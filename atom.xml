<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  
  <link href="https://yuanxw.github.io/atom.xml" rel="self"/>
  
  <link href="https://yuanxw.github.io/"/>
  <updated>2025-09-03T17:04:20.946Z</updated>
  <id>https://yuanxw.github.io/</id>
  
  <author>
    <name>Panda Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka源码分析(四)Producer生产者执行流程</title>
    <link href="https://yuanxw.github.io/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E5%9B%9B)Producer%E7%94%9F%E4%BA%A7%E8%80%85%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
    <id>https://yuanxw.github.io/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E5%9B%9B)Producer%E7%94%9F%E4%BA%A7%E8%80%85%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</id>
    <published>2025-07-03T16:00:00.000Z</published>
    <updated>2025-09-03T17:04:20.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka源码分析-四-Producer生产者执行流程"><a href="#Kafka源码分析-四-Producer生产者执行流程" class="headerlink" title="Kafka源码分析(四)Producer生产者执行流程"></a>Kafka源码分析(四)Producer生产者执行流程</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li>代码的入口main方法中Producer类是一个多线程，在main中对producerThread进行start。表示开始了这个线程，Producer类中的run方法被获得被执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaConsumerProducerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否是异步：如果参数个数为0，或者第一个参数不是&quot;sync&quot;，则是异步。生产环境一般是异步的数据处理。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isAsync</span> <span class="operator">=</span> args.length == <span class="number">0</span> || !args[<span class="number">0</span>].trim().equalsIgnoreCase(<span class="string">&quot;sync&quot;</span>);</span><br><span class="line">        <span class="type">Producer</span> <span class="variable">producerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Producer</span>(KafkaProperties.TOPIC, isAsync);</span><br><span class="line">        producerThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(KafkaProperties.TOPIC);</span><br><span class="line">        consumerThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、Producer获取元数据流程图"><a href="#二、Producer获取元数据流程图" class="headerlink" title="二、Producer获取元数据流程图"></a>二、Producer获取元数据流程图</h2><ul><li>Producer流程图</li></ul><p><img src="/images/kafak_source/chapter4/image.png" alt="image.png"></p><ul><li><p>获取元素流程图</p><p>  <img src="/images/kafak_source/chapter4/image1.png" alt="image.png"></p></li><li><p>Broker和Partition关系图</p><p>  <img src="/images/kafak_source/chapter4/image2.png" alt="image.png"></p></li></ul><pre><code class="mermaid">sequenceDiagramautonumberProducer -&gt;&gt; Producer: run()方法Producer -&gt;&gt; KafkaProducer:send()KafkaProducer -&gt;&gt; KafkaProducer: 执行拦截器Note right of KafkaProducer : Producer唤醒sender线程等待元数据更新KafkaProducer -&gt;&gt; KafkaProducer: 从服务端获取metadata数据KafkaProducer -&gt;&gt; Metadata: 将topic添加到metadata列表，如果列表中不存在topic，则把属性needUpdate设置为：trueKafkaProducer -&gt;&gt; KafkaProducer: 从缓存中获取metadata数据，如果存在已经存在缓存的数据，直接返回流程结束  loop topic主题分区数量：partitionsCount      KafkaProducer -&gt;&gt; Metadata: 属性needUpdate设置为：true      KafkaProducer --&gt;&gt; Sender: 唤醒sender线程      KafkaProducer -&gt;&gt; Metadata: 等待元数据更新，直到当前版本大于我们所知道的最后一个版本，或者等待超时  end  loop Sender线程while true死循环Note right of NetworkClient: 获取并验证apiVersion版本：handleInitiateApiVersionRequests()] Sender -&gt;&gt; NetworkClient: 当Producer线程把needUpdate设置为true时，&lt;br&#x2F;&gt;说明需要更新metadata信息NetworkClient -&gt;&gt; NetworkClient: 第一次初始化网络连接：initiateConnectNetworkClient -&gt;&gt; NetworkClient: 网络连接已经完成后，注册版本添加一个write写的事件NetworkClient -&gt;&gt; NetworkClient : handleInitiateApiVersionRequests()处理apiVersion请求。NetworkClient -&gt;&gt; NetworkClient : 再次循环handleApiVersionsResponse()成功校验apiVersion版本，并修改连接状态为readyNote right of NetworkClient: 元数据获取NetworkClient -&gt;&gt; NetworkClient : 构建获取元数据请求参数sendInternalMetadataRequestNetworkClient -&gt;&gt; NetworkClient : 处理返回值handleCompletedMetadataResponse更新元素数据metadata对象，版本号+1NetworkClient --&gt;&gt; Producer: notifyAll，唤醒Producer主线程Sender -&gt;&gt; Sender: 获取已准备好发送数据的分区请求Sender -&gt;&gt; Sender: 判断节点有没有准备好，并移除没有准备的节点Sender -&gt;&gt; NetworkClient: 如果没有建立连接 -&gt; 初始化网络连接NetworkClient -&gt;&gt; Selector: 建立连接注册的OP_CONNECT事件Sender -&gt;&gt; Sender: 准备待发送请求的数据Sender -&gt;&gt; NetworkClient: 执行网络请求pollNetworkClient -&gt;&gt; NetworkClient: 封装要拉取元数据的请求NetworkClient -&gt;&gt; NetworkClient: 处理返回请求的操作，包括：&lt;br&#x2F;&gt;处理被中止的发送请求、&lt;br&#x2F;&gt;处理已完成的发送请求、&lt;br&#x2F;&gt;处理从Broker接收到的响应、&lt;br&#x2F;&gt;处理连接断开事件、&lt;br&#x2F;&gt;建立新连接、&lt;br&#x2F;&gt;处理API版本协商请求、&lt;br&#x2F;&gt;处理超时请求NetworkClient -&gt;&gt; NetworkClient: 执行回调函数endKafkaProducer -&gt;&gt; KafkaProducer: 对消息key和value进行序列化KafkaProducer -&gt;&gt; KafkaProducer: 根据分区策略获取消息发送的分区%% 默认分区策略（DefaultPartitioner.java）%% 获得topic的分区的数量%% 如果没有指定key，则生成一个随机数，正整数，然后取模获得分区号。%% 有指定key，把key的字节数组用hash算法生成一个整数，然后取模获得分区号。KafkaProducer -&gt;&gt; KafkaProducer: 获取序列化后的消息大小并验证大小是否超过默认1M限制KafkaProducer -&gt;&gt; KafkaProducer: 绑定拦截器和回调函数KafkaProducer -&gt;&gt; KafkaProducer: 消息添加到Accumulator中，Accumulator负责将消息分成多个批次，并将消息发送到Kafka集群KafkaProducer -&gt;&gt; KafkaProducer: 如果Accumulator中缓存的消息数量已满或已创建新的批次，则唤醒sender线程KafkaProducer -&gt;&gt; KafkaProducer: 返回RecordMetadataFuture，用于获取消息发送结果</code></pre><h2 id="三、源代码分析"><a href="#三、源代码分析" class="headerlink" title="三、源代码分析"></a>三、源代码分析</h2><ul><li><p>Producer 主线程</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KafkaProducer&lt;Integer, String&gt; producer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Boolean isAsync;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产者构造函数</span></span><br><span class="line"><span class="comment">     * topic: 主题名称</span></span><br><span class="line"><span class="comment">     * isAsync: 是否异步发送</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isAsync</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(String topic, Boolean isAsync)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 连接kafka集群地址，这里使用默认配置：localhost:9092</span></span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, KafkaProperties.KAFKA_SERVER_URL + <span class="string">&quot;:&quot;</span> + KafkaProperties.KAFKA_SERVER_PORT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// client.id: 客户端ID，用于标识当前生产者实例</span></span><br><span class="line">        props.put(<span class="string">&quot;client.id&quot;</span>, <span class="string">&quot;DemoProducer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key.serializer: key序列化器，这里使用IntegerSerializer</span></span><br><span class="line">        <span class="comment">// value.serializer: value序列化器，这里使用StringSerializer</span></span><br><span class="line">        props.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.IntegerSerializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// KafkaProducer实例化, 传入配置信息</span></span><br><span class="line">        producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(props);</span><br><span class="line">        <span class="built_in">this</span>.topic = topic;</span><br><span class="line">        <span class="built_in">this</span>.isAsync = isAsync;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">messageNo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">messageStr</span> <span class="operator">=</span> <span class="string">&quot;Message_&quot;</span> + messageNo;</span><br><span class="line">            <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (isAsync) &#123; <span class="comment">// Send asynchronously</span></span><br><span class="line">                producer.send(<span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(topic,</span><br><span class="line">                    messageNo,</span><br><span class="line">                    messageStr), <span class="keyword">new</span> <span class="title class_">DemoCallBack</span>(startTime, messageNo, messageStr));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// Send synchronously</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    producer.send(<span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(topic,</span><br><span class="line">                        messageNo,</span><br><span class="line">                        messageStr)).get();</span><br><span class="line">                    System.out.println(<span class="string">&quot;Sent message: (&quot;</span> + messageNo + <span class="string">&quot;, &quot;</span> + messageStr + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ++messageNo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>KafkaProducer.send() 发送消息之前，先将消息拦截器拦截</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Future&lt;RecordMetadata&gt; <span class="title function_">send</span><span class="params">(ProducerRecord&lt;K, V&gt; record, Callback callback)</span> &#123;</span><br><span class="line">    <span class="comment">// 发送消息之前，先将消息拦截器拦截</span></span><br><span class="line">    <span class="comment">// intercept the record, which can be potentially modified; this method does not throw exceptions</span></span><br><span class="line">    ProducerRecord&lt;K, V&gt; interceptedRecord = <span class="built_in">this</span>.interceptors == <span class="literal">null</span> ? record : <span class="built_in">this</span>.interceptors.onSend(record);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="keyword">return</span> doSend(interceptedRecord, callback);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>KafkaProducer.doSend() 发送消息</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Future&lt;RecordMetadata&gt; <span class="title function_">doSend</span><span class="params">(ProducerRecord&lt;K, V&gt; record, Callback callback)</span> &#123;</span><br><span class="line">    <span class="type">TopicPartition</span> <span class="variable">tp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从服务端获取元数据：maxBlockTimeMs：最大阻塞时间，默认60s</span></span><br><span class="line">        <span class="type">ClusterAndWaitTime</span> <span class="variable">clusterAndWaitTime</span> <span class="operator">=</span> waitOnMetadata(record.topic(), record.partition(), maxBlockTimeMs);</span><br><span class="line">        <span class="comment">// remainingWaitMs（剩余可用时间） = maxBlockTimeMs（最大阻塞时间） - clusterAndWaitTime.waitedOnMetadataMs(上次获取元数据耗时)</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">remainingWaitMs</span> <span class="operator">=</span> Math.max(<span class="number">0</span>, maxBlockTimeMs - clusterAndWaitTime.waitedOnMetadataMs);</span><br><span class="line">        <span class="type">Cluster</span> <span class="variable">cluster</span> <span class="operator">=</span> clusterAndWaitTime.cluster;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 对消息key和value进行序列化</span></span><br><span class="line">        <span class="type">byte</span>[] serializedKey;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serializedKey = keySerializer.serialize(record.topic(), record.key());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException cce) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(<span class="string">&quot;Can&#x27;t convert key of class &quot;</span> + record.key().getClass().getName() +</span><br><span class="line">                    <span class="string">&quot; to class &quot;</span> + producerConfig.getClass(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG).getName() +</span><br><span class="line">                    <span class="string">&quot; specified in key.serializer&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] serializedValue;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serializedValue = valueSerializer.serialize(record.topic(), record.value());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException cce) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(<span class="string">&quot;Can&#x27;t convert value of class &quot;</span> + record.value().getClass().getName() +</span><br><span class="line">                    <span class="string">&quot; to class &quot;</span> + producerConfig.getClass(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG).getName() +</span><br><span class="line">                    <span class="string">&quot; specified in value.serializer&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 根据分区策略获取消息发送的分区</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">partition</span> <span class="operator">=</span> partition(record, serializedKey, serializedValue, cluster);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 获取序列化后的消息大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">serializedSize</span> <span class="operator">=</span> Records.LOG_OVERHEAD + Record.recordSize(serializedKey, serializedValue);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 验证消息大小是否超出限制，默认1M</span></span><br><span class="line">        ensureValidRecordSize(serializedSize);</span><br><span class="line">        tp = <span class="keyword">new</span> <span class="title class_">TopicPartition</span>(record.topic(), partition);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> record.timestamp() == <span class="literal">null</span> ? time.milliseconds() : record.timestamp();</span><br><span class="line">        log.trace(<span class="string">&quot;Sending record &#123;&#125; with callback &#123;&#125; to topic &#123;&#125; partition &#123;&#125;&quot;</span>, record, callback, record.topic(), partition);</span><br><span class="line">        <span class="comment">// producer callback will make sure to call both &#x27;callback&#x27; and interceptor callback</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 绑定拦截器和回调函数</span></span><br><span class="line">        <span class="type">Callback</span> <span class="variable">interceptCallback</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptors == <span class="literal">null</span> ? callback : <span class="keyword">new</span> <span class="title class_">InterceptorCallback</span>&lt;&gt;(callback, <span class="built_in">this</span>.interceptors, tp);</span><br><span class="line">        <span class="comment">// 消息添加到Accumulator中，Accumulator负责将消息分成多个批次，并将消息发送到Kafka集群</span></span><br><span class="line">        RecordAccumulator.<span class="type">RecordAppendResult</span> <span class="variable">result</span> <span class="operator">=</span> accumulator.append(tp, timestamp, serializedKey, serializedValue, interceptCallback, remainingWaitMs);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 如果Accumulator中缓存的消息数量已满或已创建新的批次，则唤醒sender线程</span></span><br><span class="line">        <span class="keyword">if</span> (result.batchIsFull || result.newBatchCreated) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Waking up the sender since topic &#123;&#125; partition &#123;&#125; is either full or getting a new batch&quot;</span>, record.topic(), partition);</span><br><span class="line">            <span class="built_in">this</span>.sender.wakeup();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回RecordMetadataFuture，用于获取消息发送结果</span></span><br><span class="line">        <span class="keyword">return</span> result.future;</span><br><span class="line">        <span class="comment">// handling exceptions and record the errors;</span></span><br><span class="line">        <span class="comment">// for API exceptions return them in the future,</span></span><br><span class="line">        <span class="comment">// for other exceptions throw directly</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ApiException e) &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;Exception occurred during message send:&quot;</span>, e);</span><br><span class="line">        <span class="keyword">if</span> (callback != <span class="literal">null</span>)</span><br><span class="line">            callback.onCompletion(<span class="literal">null</span>, e);</span><br><span class="line">        <span class="built_in">this</span>.errors.record();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.interceptors != <span class="literal">null</span>)</span><br><span class="line">            <span class="built_in">this</span>.interceptors.onSendError(record, tp, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FutureFailure</span>(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="built_in">this</span>.errors.record();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.interceptors != <span class="literal">null</span>)</span><br><span class="line">            <span class="built_in">this</span>.interceptors.onSendError(record, tp, e);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BufferExhaustedException e) &#123;</span><br><span class="line">        <span class="built_in">this</span>.errors.record();</span><br><span class="line">        <span class="built_in">this</span>.metrics.sensor(<span class="string">&quot;buffer-exhausted-records&quot;</span>).record();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.interceptors != <span class="literal">null</span>)</span><br><span class="line">            <span class="built_in">this</span>.interceptors.onSendError(record, tp, e);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (KafkaException e) &#123;</span><br><span class="line">        <span class="built_in">this</span>.errors.record();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.interceptors != <span class="literal">null</span>)</span><br><span class="line">            <span class="built_in">this</span>.interceptors.onSendError(record, tp, e);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// we notify interceptor about all exceptions, since onSend is called before anything else in this method</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.interceptors != <span class="literal">null</span>)</span><br><span class="line">            <span class="built_in">this</span>.interceptors.onSendError(record, tp, e);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从服务端获取元数据<code>waitOnMetadata</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wait for cluster metadata including partitions for the given topic to be available.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> topic The topic we want metadata for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> partition A specific partition expected to exist in metadata, or null if there&#x27;s no preference</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maxWaitMs The maximum time in ms for waiting on the metadata</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The cluster containing topic metadata and the amount of time we waited in ms</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ClusterAndWaitTime <span class="title function_">waitOnMetadata</span><span class="params">(String topic, Integer partition, <span class="type">long</span> maxWaitMs)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 将主题添加到元数据主题列表（如果尚不存在）并重置过期时间和needUpdate设置为true</span></span><br><span class="line">    metadata.add(topic);</span><br><span class="line">    <span class="type">Cluster</span> <span class="variable">cluster</span> <span class="operator">=</span> metadata.fetch();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">partitionsCount</span> <span class="operator">=</span> cluster.partitionCountForTopic(topic);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果我们有缓存的metadata数据，并且消息的分区未定义或在已知分区范围内，则返回缓存的metadata数据</span></span><br><span class="line">    <span class="keyword">if</span> (partitionsCount != <span class="literal">null</span> &amp;&amp; (partition == <span class="literal">null</span> || partition &lt; partitionsCount))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClusterAndWaitTime</span>(cluster, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> time.milliseconds();</span><br><span class="line">    <span class="comment">// 剩余可用时间，默认值为maxWaitMs，最多可以等待时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">remainingWaitMs</span> <span class="operator">=</span> maxWaitMs;</span><br><span class="line">    <span class="type">long</span> elapsed;</span><br><span class="line">    <span class="comment">// Issue metadata requests until we have metadata for the topic or maxWaitTimeMs is exceeded.</span></span><br><span class="line">    <span class="comment">// In case we already have cached metadata for the topic, but the requested partition is greater</span></span><br><span class="line">    <span class="comment">// than expected, issue an update request only once. This is necessary in case the metadata</span></span><br><span class="line">    <span class="comment">// is stale and the number of partitions for this topic has increased in the meantime.</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Requesting metadata update for topic &#123;&#125;.&quot;</span>, topic);</span><br><span class="line">        <span class="comment">// needUpdate设置为true，返回更新前的当前版本</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">version</span> <span class="operator">=</span> metadata.requestUpdate();</span><br><span class="line">        <span class="comment">// 唤醒sender线程</span></span><br><span class="line">        sender.wakeup();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            metadata.awaitUpdate(version, remainingWaitMs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException ex) &#123;</span><br><span class="line">            <span class="comment">// Rethrow with original maxWaitMs to prevent logging exception with remainingWaitMs</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TimeoutException</span>(<span class="string">&quot;Failed to update metadata after &quot;</span> + maxWaitMs + <span class="string">&quot; ms.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再次获取集群的元数据信息</span></span><br><span class="line">        cluster = metadata.fetch();</span><br><span class="line">        <span class="comment">// 计算拉取metadata数据耗时</span></span><br><span class="line">        elapsed = time.milliseconds() - begin;</span><br><span class="line">        <span class="comment">// 如果拉取metadata数据耗时超过了最大阻塞时间，则抛出超时异常</span></span><br><span class="line">        <span class="keyword">if</span> (elapsed &gt;= maxWaitMs)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TimeoutException</span>(<span class="string">&quot;Failed to update metadata after &quot;</span> + maxWaitMs + <span class="string">&quot; ms.&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果获取到metadata数据，topic没有授权，则抛出TopicAuthorizationException</span></span><br><span class="line">        <span class="keyword">if</span> (cluster.unauthorizedTopics().contains(topic))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TopicAuthorizationException</span>(topic);</span><br><span class="line">        <span class="comment">// 计算剩余可用时间</span></span><br><span class="line">        remainingWaitMs = maxWaitMs - elapsed;</span><br><span class="line">        <span class="comment">// 如果topic的分区数量未知，则继续等待</span></span><br><span class="line">        partitionsCount = cluster.partitionCountForTopic(topic);</span><br><span class="line">    &#125; <span class="keyword">while</span> (partitionsCount == <span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (partition != <span class="literal">null</span> &amp;&amp; partition &gt;= partitionsCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">KafkaException</span>(</span><br><span class="line">                String.format(<span class="string">&quot;Invalid partition given with record: %d is not in the range [0...%d).&quot;</span>, partition, partitionsCount));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回集群元数据和耗时时间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClusterAndWaitTime</span>(cluster, elapsed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Sender线程在run()方法死循环</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run a single iteration of sending</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> now</span></span><br><span class="line"><span class="comment"> *            The current POSIX time in milliseconds</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="type">long</span> now)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前集群metadata信息</span></span><br><span class="line">    <span class="type">Cluster</span> <span class="variable">cluster</span> <span class="operator">=</span> metadata.fetch();</span><br><span class="line">    <span class="comment">// 获取已准备好发送数据的分区请求</span></span><br><span class="line">    RecordAccumulator.<span class="type">ReadyCheckResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.accumulator.ready(cluster, now);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果有任何分区的 leader 尚不清楚，则强制元数据更新。第一次执行topic，不会走</span></span><br><span class="line">    <span class="keyword">if</span> (!result.unknownLeaderTopics.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// The set of topics with unknown leader contains topics with leader election pending as well as</span></span><br><span class="line">        <span class="comment">// topics which may have expired. Add the topic again to metadata to ensure it is included</span></span><br><span class="line">        <span class="comment">// and request metadata update, since there are messages to send to the topic.</span></span><br><span class="line">        <span class="keyword">for</span> (String topic : result.unknownLeaderTopics)</span><br><span class="line">            <span class="built_in">this</span>.metadata.add(topic);</span><br><span class="line">        <span class="built_in">this</span>.metadata.requestUpdate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断节点有没有准备好，并移除没有准备的节点</span></span><br><span class="line">    <span class="comment">// remove any nodes we aren&#x27;t ready to send to</span></span><br><span class="line">    Iterator&lt;Node&gt; iter = result.readyNodes.iterator();</span><br><span class="line">    <span class="type">long</span> <span class="variable">notReadyTimeout</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">    <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> iter.next();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.client.ready(node, now)) &#123;</span><br><span class="line">            iter.remove();</span><br><span class="line">            notReadyTimeout = Math.min(notReadyTimeout, <span class="built_in">this</span>.client.connectionDelay(node, now));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建批次请求</span></span><br><span class="line">    Map&lt;Integer, List&lt;RecordBatch&gt;&gt; batches = <span class="built_in">this</span>.accumulator.drain(cluster,</span><br><span class="line">                                                                     result.readyNodes,</span><br><span class="line">                                                                     <span class="built_in">this</span>.maxRequestSize,</span><br><span class="line">                                                                     now);</span><br><span class="line">    <span class="comment">// 保证消息顺序，第一次执行guaranteeMessageOrder为false，不会走</span></span><br><span class="line">    <span class="keyword">if</span> (guaranteeMessageOrder) &#123;</span><br><span class="line">        <span class="comment">// Mute all the partitions drained</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;RecordBatch&gt; batchList : batches.values()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (RecordBatch batch : batchList)</span><br><span class="line">                <span class="built_in">this</span>.accumulator.mutePartition(batch.topicPartition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查超时的批次，第一次执行没expiredBatches为空</span></span><br><span class="line">    List&lt;RecordBatch&gt; expiredBatches = <span class="built_in">this</span>.accumulator.abortExpiredBatches(<span class="built_in">this</span>.requestTimeout, now);</span><br><span class="line">    <span class="comment">// 更新超时批次的错误计数</span></span><br><span class="line">    <span class="keyword">for</span> (RecordBatch expiredBatch : expiredBatches)</span><br><span class="line">        <span class="built_in">this</span>.sensors.recordErrors(expiredBatch.topicPartition.topic(), expiredBatch.recordCount);</span><br><span class="line">    </span><br><span class="line">    sensors.updateProduceRequestMetrics(batches);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// If we have any nodes that are ready to send + have sendable data, poll with 0 timeout so this can immediately</span></span><br><span class="line">    <span class="comment">// loop and try sending more data. Otherwise, the timeout is determined by nodes that have partitions with data</span></span><br><span class="line">    <span class="comment">// that isn&#x27;t yet sendable (e.g. lingering, backing off). Note that this specifically does not include nodes</span></span><br><span class="line">    <span class="comment">// with sendable data that aren&#x27;t ready to send since they would cause busy looping.</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">pollTimeout</span> <span class="operator">=</span> Math.min(result.nextReadyCheckDelayMs, notReadyTimeout);</span><br><span class="line">    <span class="keyword">if</span> (!result.readyNodes.isEmpty()) &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Nodes with data ready to send: &#123;&#125;&quot;</span>, result.readyNodes);</span><br><span class="line">        <span class="comment">// 如果有已经准备好的节点，超时间隔为0，立即发送请求</span></span><br><span class="line">        pollTimeout = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 准备待发送请求的数据</span></span><br><span class="line">    sendProduceRequests(batches, now);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行网络请求</span></span><br><span class="line">    <span class="comment">// if some partitions are already ready to be sent, the select time would be 0;</span></span><br><span class="line">    <span class="comment">// otherwise if some partition already has some data accumulated but not ready yet,</span></span><br><span class="line">    <span class="comment">// the select time will be the time difference between now and its linger expiry time;</span></span><br><span class="line">    <span class="comment">// otherwise the select time will be the time difference between now and the metadata expiry time;</span></span><br><span class="line">    <span class="built_in">this</span>.client.poll(pollTimeout, now);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取已准备好发送数据的分区请求ready</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ReadyCheckResult <span class="title function_">ready</span><span class="params">(Cluster cluster, <span class="type">long</span> nowMs)</span> &#123;</span><br><span class="line">    Set&lt;Node&gt; readyNodes = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">long</span> <span class="variable">nextReadyCheckDelayMs</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">    Set&lt;String&gt; unknownLeaderTopics = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内存已经耗尽，并且线程阻塞等待buffer，则所有partition都可以发送</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exhausted</span> <span class="operator">=</span> <span class="built_in">this</span>.free.queued() &gt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历所有队列，获取每个partition的leader节点，如果leader节点不存在，则说明该partition的leader节点未知，</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;TopicPartition, Deque&lt;RecordBatch&gt;&gt; entry : <span class="built_in">this</span>.batches.entrySet()) &#123;</span><br><span class="line">        <span class="type">TopicPartition</span> <span class="variable">part</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        Deque&lt;RecordBatch&gt; deque = entry.getValue();</span><br><span class="line">    </span><br><span class="line">        <span class="type">Node</span> <span class="variable">leader</span> <span class="operator">=</span> cluster.leaderFor(part);</span><br><span class="line">        <span class="keyword">synchronized</span> (deque) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leader == <span class="literal">null</span> &amp;&amp; !deque.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// This is a partition for which leader is not known, but messages are available to send.</span></span><br><span class="line">                <span class="comment">// Note that entries are currently not removed from batches when deque is empty.</span></span><br><span class="line">                unknownLeaderTopics.add(part.topic());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!readyNodes.contains(leader) &amp;&amp; !muted.contains(part)) &#123;</span><br><span class="line">                <span class="comment">// 从队列头部获取第一个批次，如果批不为null，则判断是否可以发送，如果可以发送，则添加到readyNodes集合中</span></span><br><span class="line">                <span class="type">RecordBatch</span> <span class="variable">batch</span> <span class="operator">=</span> deque.peekFirst();</span><br><span class="line">                <span class="keyword">if</span> (batch != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * batch.attempts重试的次数</span></span><br><span class="line"><span class="comment">                     * batch.lastAttemptMs上次重试的时间</span></span><br><span class="line"><span class="comment">                     * batch.retryBackoffMs重试的间隔时间</span></span><br><span class="line"><span class="comment">                     * nowMs当前时间</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">backingOff</span> <span class="operator">=</span> batch.attempts &gt; <span class="number">0</span> &amp;&amp; batch.lastAttemptMs + retryBackoffMs &gt; nowMs;</span><br><span class="line">                    <span class="comment">// waitedTimeMs（已经等待的时间） = nowMs当前时间 - batch.lastAttemptMs上次重试的时间</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">waitedTimeMs</span> <span class="operator">=</span> nowMs - batch.lastAttemptMs;</span><br><span class="line">    </span><br><span class="line">                    <span class="comment">// timeToWaitMs最多等待的时间 = backingOff是否处于重试状态？重试间隔时间：lingerMs等待时间，默认为：0</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">timeToWaitMs</span> <span class="operator">=</span> backingOff ? retryBackoffMs : lingerMs;</span><br><span class="line">    </span><br><span class="line">                    <span class="comment">// timeLeftMs剩余等待的时间 = timeToWaitMs（最多等待的时间） - waitedTimeMs（已经等待的时间）</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">timeLeftMs</span> <span class="operator">=</span> Math.max(timeToWaitMs - waitedTimeMs, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">                    <span class="comment">//full是否已满 = 队列中有多个批次 || 当前批次已满</span></span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">full</span> <span class="operator">=</span> deque.size() &gt; <span class="number">1</span> || batch.isFull();</span><br><span class="line">    </span><br><span class="line">                    <span class="comment">// expired是否已过期 = waitedTimeMs（已经等待的时间） &gt;= timeToWaitMs（最多等待的时间）</span></span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">expired</span> <span class="operator">=</span> waitedTimeMs &gt;= timeToWaitMs;</span><br><span class="line">    </span><br><span class="line">                    <span class="comment">// sendable是否可以发送 = 队列中有多个批次或者当前批次已满 || 等待时间已过 || 内存耗尽 || 关闭 || 正在flush</span></span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">sendable</span> <span class="operator">=</span> full || expired || exhausted || closed || flushInProgress();</span><br><span class="line">                    <span class="keyword">if</span> (sendable &amp;&amp; !backingOff) &#123;</span><br><span class="line">                        readyNodes.add(leader);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// Note that this results in a conservative estimate since an un-sendable partition may have</span></span><br><span class="line">                        <span class="comment">// a leader that will later be found to have sendable data. However, this is good enough</span></span><br><span class="line">                        <span class="comment">// since we&#x27;ll just wake up and then sleep again for the remaining time.</span></span><br><span class="line">                        nextReadyCheckDelayMs = Math.min(timeLeftMs, nextReadyCheckDelayMs);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReadyCheckResult</span>(readyNodes, nextReadyCheckDelayMs, unknownLeaderTopics);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断节点有没有准备好，并移除没有准备的节点</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 判断节点有没有准备好，并移除没有准备的节点</span></span><br><span class="line">    <span class="comment">// remove any nodes we aren&#x27;t ready to send to</span></span><br><span class="line">    Iterator&lt;Node&gt; iter = result.readyNodes.iterator();</span><br><span class="line">    <span class="type">long</span> <span class="variable">notReadyTimeout</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">    <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> iter.next();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.client.ready(node, now)) &#123;</span><br><span class="line">            iter.remove();</span><br><span class="line">            notReadyTimeout = Math.min(notReadyTimeout, <span class="built_in">this</span>.client.connectionDelay(node, now));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Begin connecting to the given node, return true if we are already connected and ready to send to that node.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node The node to check</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> now The current timestamp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> True if we are ready to send to the given node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">ready</span><span class="params">(Node node, <span class="type">long</span> now)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.isEmpty())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot connect to empty node &quot;</span> + node);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isReady(node, now))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (connectionStates.canConnect(node.idString(), now))</span><br><span class="line">        <span class="comment">// 初始化网络连接</span></span><br><span class="line">        initiateConnect(node, now);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化连接，如果连接失败，则会尝试重试。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initiateConnect</span><span class="params">(Node node, <span class="type">long</span> now)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">nodeConnectionId</span> <span class="operator">=</span> node.idString();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;Initiating connection to node &#123;&#125; at &#123;&#125;:&#123;&#125;.&quot;</span>, node.id(), node.host(), node.port());</span><br><span class="line">        <span class="comment">// 修改状态为正在连接</span></span><br><span class="line">        <span class="built_in">this</span>.connectionStates.connecting(nodeConnectionId, now);</span><br><span class="line">        <span class="comment">// 尝试连接</span></span><br><span class="line">        selector.connect(nodeConnectionId,</span><br><span class="line">                         <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(node.host(), node.port()),</span><br><span class="line">                         <span class="built_in">this</span>.socketSendBuffer,</span><br><span class="line">                         <span class="built_in">this</span>.socketReceiveBuffer);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">/* attempt failed, we&#x27;ll try again after the backoff */</span></span><br><span class="line">        connectionStates.disconnected(nodeConnectionId, now);</span><br><span class="line">        <span class="comment">/* maybe the problem is our metadata, update it */</span></span><br><span class="line">        metadataUpdater.requestUpdate();</span><br><span class="line">        log.debug(<span class="string">&quot;Error connecting to node &#123;&#125; at &#123;&#125;:&#123;&#125;:&quot;</span>, node.id(), node.host(), node.port(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(String id, InetSocketAddress address, <span class="type">int</span> sendBufferSize, <span class="type">int</span> receiveBufferSize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.channels.containsKey(id))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;There is already a connection for id &quot;</span> + id);</span><br><span class="line">    <span class="comment">// 获取SocketChannel.open()</span></span><br><span class="line">    <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">    <span class="comment">// 设置非阻塞模式</span></span><br><span class="line">    socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 获取socket</span></span><br><span class="line">    <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> socketChannel.socket();</span><br><span class="line">    socket.setKeepAlive(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 设置发送缓冲区大小、接收缓冲区大小</span></span><br><span class="line">    <span class="keyword">if</span> (sendBufferSize != Selectable.USE_DEFAULT_BUFFER_SIZE)</span><br><span class="line">        socket.setSendBufferSize(sendBufferSize);</span><br><span class="line">    <span class="keyword">if</span> (receiveBufferSize != Selectable.USE_DEFAULT_BUFFER_SIZE)</span><br><span class="line">        socket.setReceiveBufferSize(receiveBufferSize);</span><br><span class="line">    <span class="comment">// 设置TcpNoDelay属性为true，用于控制 TCP 连接中数据包的发送方式。</span></span><br><span class="line">    <span class="comment">// 默认情况下，TCP 使用 Nagle 算法 来减少网络中的小数据包数量，从而提高网络利用率。</span></span><br><span class="line">    <span class="comment">// 然而，这种方式可能会增加延迟，特别是在需要快速响应的应用中</span></span><br><span class="line">    socket.setTcpNoDelay(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">boolean</span> connected;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 尝试连接服务器，有可能连接成功：true，也有可能连接失败:false</span></span><br><span class="line">        connected = socketChannel.connect(address);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnresolvedAddressException e) &#123;</span><br><span class="line">        socketChannel.close();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Can&#x27;t resolve address: &quot;</span> + address, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        socketChannel.close();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// SocketChannel.register()注册到Selector，并设置OP_CONNECT事件</span></span><br><span class="line">    <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> socketChannel.register(nioSelector, SelectionKey.OP_CONNECT);</span><br><span class="line">    KafkaChannel channel;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 根据SocketChannel创建KafkaChannel</span></span><br><span class="line">        channel = channelBuilder.buildChannel(id, key, maxReceiveSize);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketChannel.close();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            key.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Channel could not be created for socket &quot;</span> + socketChannel, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把key和channel绑定，并设置附件为channel</span></span><br><span class="line">    key.attach(channel);</span><br><span class="line">    <span class="comment">// 缓存channel</span></span><br><span class="line">    <span class="built_in">this</span>.channels.put(id, channel);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (connected) &#123;</span><br><span class="line">        <span class="comment">// OP_CONNECT won&#x27;t trigger for immediately connected channels</span></span><br><span class="line">        log.debug(<span class="string">&quot;Immediately connected to node &#123;&#125;&quot;</span>, channel.id());</span><br><span class="line">        immediatelyConnectedKeys.add(key);</span><br><span class="line">        <span class="comment">// 取消前面注册的OP_CONNECT事件</span></span><br><span class="line">        key.interestOps(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建批次请求</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建批次请求</span></span><br><span class="line">Map&lt;Integer, List&lt;RecordBatch&gt;&gt; batches = <span class="built_in">this</span>.accumulator.drain(cluster,</span><br><span class="line">                                                                 result.readyNodes,</span><br><span class="line">                                                                 <span class="built_in">this</span>.maxRequestSize,</span><br><span class="line">                                                                 now);</span><br><span class="line">                                                                     </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现按照NodeId进行分组，把相同NodeId的batch分到一组中，返回Map&lt;NodeId, List&lt;RecordBatch&gt;&gt;</span></span><br><span class="line"><span class="comment"> * Drain all the data for the given nodes and collate them into a list of batches that will fit within the specified</span></span><br><span class="line"><span class="comment"> * size on a per-node basis. This method attempts to avoid choosing the same topic-node over and over.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cluster The current cluster metadata</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nodes The list of node to drain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maxSize The maximum number of bytes to drain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> now The current unix time in milliseconds</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> A list of &#123;<span class="doctag">@link</span> RecordBatch&#125; for each node specified with total size less than the requested maxSize.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;Integer, List&lt;RecordBatch&gt;&gt; <span class="title function_">drain</span><span class="params">(Cluster cluster,</span></span><br><span class="line"><span class="params">                                             Set&lt;Node&gt; nodes,</span></span><br><span class="line"><span class="params">                                             <span class="type">int</span> maxSize,</span></span><br><span class="line"><span class="params">                                             <span class="type">long</span> now)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nodes.isEmpty())</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">    </span><br><span class="line">    Map&lt;Integer, List&lt;RecordBatch&gt;&gt; batches = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Node node : nodes) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;PartitionInfo&gt; parts = cluster.partitionsForNode(node.id());</span><br><span class="line">        List&lt;RecordBatch&gt; ready = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">/* to make starvation less likely this loop doesn&#x27;t start at 0 */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> drainIndex = drainIndex % parts.size();</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="type">PartitionInfo</span> <span class="variable">part</span> <span class="operator">=</span> parts.get(drainIndex);</span><br><span class="line">            <span class="type">TopicPartition</span> <span class="variable">tp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TopicPartition</span>(part.topic(), part.partition());</span><br><span class="line">            <span class="comment">// Only proceed if the partition has no in-flight batches.</span></span><br><span class="line">            <span class="keyword">if</span> (!muted.contains(tp)) &#123;</span><br><span class="line">                Deque&lt;RecordBatch&gt; deque = getDeque(<span class="keyword">new</span> <span class="title class_">TopicPartition</span>(part.topic(), part.partition()));</span><br><span class="line">                <span class="keyword">if</span> (deque != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (deque) &#123;</span><br><span class="line">                        <span class="type">RecordBatch</span> <span class="variable">first</span> <span class="operator">=</span> deque.peekFirst();</span><br><span class="line">                        <span class="keyword">if</span> (first != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">backoff</span> <span class="operator">=</span> first.attempts &gt; <span class="number">0</span> &amp;&amp; first.lastAttemptMs + retryBackoffMs &gt; now;</span><br><span class="line">                            <span class="comment">// Only drain the batch if it is not during backoff period.</span></span><br><span class="line">                            <span class="keyword">if</span> (!backoff) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (size + first.sizeInBytes() &gt; maxSize &amp;&amp; !ready.isEmpty()) &#123;</span><br><span class="line">                                    <span class="comment">// there is a rare case that a single batch size is larger than the request size due</span></span><br><span class="line">                                    <span class="comment">// to compression; in this case we will still eventually send this batch in a single</span></span><br><span class="line">                                    <span class="comment">// request</span></span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="type">RecordBatch</span> <span class="variable">batch</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">                                    batch.close();</span><br><span class="line">                                    size += batch.sizeInBytes();</span><br><span class="line">                                    ready.add(batch);</span><br><span class="line">                                    batch.drainedMs = now;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.drainIndex = (<span class="built_in">this</span>.drainIndex + <span class="number">1</span>) % parts.size();</span><br><span class="line">        &#125; <span class="keyword">while</span> (start != drainIndex);</span><br><span class="line">        batches.put(node.id(), ready);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> batches;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行网络请求</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Do actual reads and writes to sockets.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeout The maximum amount of time to wait (in ms) for responses if there are none immediately,</span></span><br><span class="line"><span class="comment"> *                must be non-negative. The actual timeout will be the minimum of timeout, request timeout and</span></span><br><span class="line"><span class="comment"> *                metadata timeout</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> now The current time in milliseconds</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The list of responses received</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ClientResponse&gt; <span class="title function_">poll</span><span class="params">(<span class="type">long</span> timeout, <span class="type">long</span> now)</span> &#123;</span><br><span class="line">    <span class="comment">// 封装要拉取元数据的请求</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">metadataTimeout</span> <span class="operator">=</span> metadataUpdater.maybeUpdate(now);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.selector.poll(Utils.min(timeout, metadataTimeout, requestTimeoutMs));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Unexpected error during I/O&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理已完成请求的操作</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">updatedNow</span> <span class="operator">=</span> <span class="built_in">this</span>.time.milliseconds();</span><br><span class="line">    List&lt;ClientResponse&gt; responses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    handleAbortedSends(responses);</span><br><span class="line">    handleCompletedSends(responses, updatedNow);</span><br><span class="line">    handleCompletedReceives(responses, updatedNow);</span><br><span class="line">    handleDisconnections(responses, updatedNow);</span><br><span class="line">    handleConnections();</span><br><span class="line">    handleInitiateApiVersionRequests(updatedNow);</span><br><span class="line">    handleTimedOutRequests(responses, updatedNow);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// invoke callbacks</span></span><br><span class="line">    <span class="keyword">for</span> (ClientResponse response : responses) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.onComplete();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Uncaught error in request completion:&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> responses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更新元数据信息</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maybeUpdate</span><span class="params">(<span class="type">long</span> now)</span> &#123;</span><br><span class="line">     <span class="comment">// 是否要更新metadata信息，当Producer线程把needUpdate设置为true时，说明需要更新metadata信息</span></span><br><span class="line">     <span class="type">long</span> <span class="variable">timeToNextMetadataUpdate</span> <span class="operator">=</span> metadata.timeToNextUpdate(now);</span><br><span class="line">     <span class="type">long</span> <span class="variable">waitForMetadataFetch</span> <span class="operator">=</span> <span class="built_in">this</span>.metadataFetchInProgress ? requestTimeoutMs : <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="type">long</span> <span class="variable">metadataTimeout</span> <span class="operator">=</span> Math.max(timeToNextMetadataUpdate, waitForMetadataFetch);</span><br><span class="line">     <span class="keyword">if</span> (metadataTimeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> metadataTimeout;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// Beware that the behavior of this method and the computation of timeouts for poll() are</span></span><br><span class="line">     <span class="comment">// highly dependent on the behavior of leastLoadedNode.</span></span><br><span class="line">     <span class="comment">// 获取请求最少的Node节点</span></span><br><span class="line">     <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> leastLoadedNode(now);</span><br><span class="line">     <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">         log.debug(<span class="string">&quot;Give up sending metadata request since no node is available&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> reconnectBackoffMs;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">return</span> maybeUpdate(now, node);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Add a metadata request to the list of sends if we can make one</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">maybeUpdate</span><span class="params">(<span class="type">long</span> now, Node node)</span> &#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">nodeConnectionId</span> <span class="operator">=</span> node.idString();</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">if</span> (canSendRequest(nodeConnectionId)) &#123;</span><br><span class="line">         <span class="built_in">this</span>.metadataFetchInProgress = <span class="literal">true</span>;</span><br><span class="line">         MetadataRequest.Builder metadataRequest;</span><br><span class="line">         <span class="keyword">if</span> (metadata.needMetadataForAllTopics())</span><br><span class="line">             metadataRequest = MetadataRequest.Builder.allTopics();</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             metadataRequest = <span class="keyword">new</span> <span class="title class_">MetadataRequest</span>.Builder(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(metadata.topics()));</span><br><span class="line">    </span><br><span class="line">         log.debug(<span class="string">&quot;Sending metadata request &#123;&#125; to node &#123;&#125;&quot;</span>, metadataRequest, node.id());</span><br><span class="line">         sendInternalMetadataRequest(metadataRequest, nodeConnectionId, now);</span><br><span class="line">         <span class="keyword">return</span> requestTimeoutMs;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// If there&#x27;s any connection establishment underway, wait until it completes. This prevents</span></span><br><span class="line">     <span class="comment">// the client from unnecessarily connecting to additional nodes while a previous connection</span></span><br><span class="line">     <span class="comment">// attempt has not been completed.</span></span><br><span class="line">     <span class="keyword">if</span> (isAnyNodeConnecting()) &#123;</span><br><span class="line">         <span class="comment">// Strictly the timeout we should return here is &quot;connect timeout&quot;, but as we don&#x27;t</span></span><br><span class="line">         <span class="comment">// have such application level configuration, using reconnect backoff instead.</span></span><br><span class="line">         <span class="keyword">return</span> reconnectBackoffMs;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">if</span> (connectionStates.canConnect(nodeConnectionId, now)) &#123;</span><br><span class="line">         <span class="comment">// we don&#x27;t have a connection to this node right now, make one</span></span><br><span class="line">         log.debug(<span class="string">&quot;Initialize connection to node &#123;&#125; for sending metadata request&quot;</span>, node.id());</span><br><span class="line">         initiateConnect(node, now);</span><br><span class="line">         <span class="keyword">return</span> reconnectBackoffMs;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// connected, but can&#x27;t send more OR connecting</span></span><br><span class="line">     <span class="comment">// In either case, we just need to wait for a network event to let us know the selected</span></span><br><span class="line">     <span class="comment">// connection might be usable again.</span></span><br><span class="line">     <span class="keyword">return</span> Long.MAX_VALUE;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>发送Meatadata元数据请求</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendInternalMetadataRequest</span><span class="params">(MetadataRequest.Builder builder,</span></span><br><span class="line"><span class="params">                                          String nodeConnectionId, <span class="type">long</span> now)</span> &#123;</span><br><span class="line">     <span class="type">ClientRequest</span> <span class="variable">clientRequest</span> <span class="operator">=</span> newClientRequest(nodeConnectionId, builder, now, <span class="literal">true</span>);</span><br><span class="line">     doSend(clientRequest, <span class="literal">true</span>, now);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSend</span><span class="params">(ClientRequest clientRequest, <span class="type">boolean</span> isInternalRequest, <span class="type">long</span> now)</span> &#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">nodeId</span> <span class="operator">=</span> clientRequest.destination();</span><br><span class="line">     <span class="keyword">if</span> (!isInternalRequest) &#123;</span><br><span class="line">         <span class="comment">// If this request came from outside the NetworkClient, validate</span></span><br><span class="line">         <span class="comment">// that we can send data.  If the request is internal, we trust</span></span><br><span class="line">         <span class="comment">// that that internal code has done this validation.  Validation</span></span><br><span class="line">         <span class="comment">// will be slightly different for some internal requests (for</span></span><br><span class="line">         <span class="comment">// example, ApiVersionsRequests can be sent prior to being in</span></span><br><span class="line">         <span class="comment">// READY state.)</span></span><br><span class="line">         <span class="keyword">if</span> (!canSendRequest(nodeId))</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Attempt to send a request to node &quot;</span> + nodeId + <span class="string">&quot; which is not ready.&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">AbstractRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">     AbstractRequest.Builder&lt;?&gt; builder = clientRequest.requestBuilder();</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">NodeApiVersions</span> <span class="variable">versionInfo</span> <span class="operator">=</span> nodeApiVersions.get(nodeId);</span><br><span class="line">         <span class="comment">// Note: if versionInfo is null, we have no server version information. This would be</span></span><br><span class="line">         <span class="comment">// the case when sending the initial ApiVersionRequest which fetches the version</span></span><br><span class="line">         <span class="comment">// information itself.  It is also the case when discoverBrokerVersions is set to false.</span></span><br><span class="line">         <span class="keyword">if</span> (versionInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (discoverBrokerVersions &amp;&amp; log.isTraceEnabled())</span><br><span class="line">                 log.trace(<span class="string">&quot;No version information found when sending message of type &#123;&#125; to node &#123;&#125;. &quot;</span> +</span><br><span class="line">                         <span class="string">&quot;Assuming version &#123;&#125;.&quot;</span>, clientRequest.apiKey(), nodeId, builder.version());</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="type">short</span> <span class="variable">version</span> <span class="operator">=</span> versionInfo.usableVersion(clientRequest.apiKey());</span><br><span class="line">             builder.setVersion(version);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// The call to build may also throw UnsupportedVersionException, if there are essential</span></span><br><span class="line">         <span class="comment">// fields that cannot be represented in the chosen version.</span></span><br><span class="line">         request = builder.build();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (UnsupportedVersionException e) &#123;</span><br><span class="line">         <span class="comment">// If the version is not supported, skip sending the request over the wire.</span></span><br><span class="line">         <span class="comment">// Instead, simply add it to the local queue of aborted requests.</span></span><br><span class="line">         log.debug(<span class="string">&quot;Version mismatch when attempting to send &#123;&#125; to &#123;&#125;&quot;</span>,</span><br><span class="line">                 clientRequest.toString(), clientRequest.destination(), e);</span><br><span class="line">         <span class="type">ClientResponse</span> <span class="variable">clientResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientResponse</span>(clientRequest.makeHeader(),</span><br><span class="line">                 clientRequest.callback(), clientRequest.destination(), now, now,</span><br><span class="line">                 <span class="literal">false</span>, e, <span class="literal">null</span>);</span><br><span class="line">         abortedSends.add(clientResponse);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">RequestHeader</span> <span class="variable">header</span> <span class="operator">=</span> clientRequest.makeHeader();</span><br><span class="line">     <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">latestClientVersion</span> <span class="operator">=</span> ProtoUtils.latestVersion(clientRequest.apiKey().id);</span><br><span class="line">         <span class="keyword">if</span> (header.apiVersion() == latestClientVersion) &#123;</span><br><span class="line">             log.trace(<span class="string">&quot;Sending &#123;&#125; to node &#123;&#125;.&quot;</span>, request, nodeId);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             log.debug(<span class="string">&quot;Using older server API v&#123;&#125; to send &#123;&#125; to node &#123;&#125;.&quot;</span>,</span><br><span class="line">                 header.apiVersion(), request, nodeId);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">Send</span> <span class="variable">send</span> <span class="operator">=</span> request.toSend(nodeId, header);</span><br><span class="line">     <span class="type">InFlightRequest</span> <span class="variable">inFlightRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InFlightRequest</span>(</span><br><span class="line">             header,</span><br><span class="line">             clientRequest.createdTimeMs(),</span><br><span class="line">             clientRequest.destination(),</span><br><span class="line">             clientRequest.callback(),</span><br><span class="line">             clientRequest.expectResponse(),</span><br><span class="line">             isInternalRequest,</span><br><span class="line">             send,</span><br><span class="line">             now);</span><br><span class="line">     <span class="built_in">this</span>.inFlightRequests.add(inFlightRequest);</span><br><span class="line">     selector.send(inFlightRequest.send);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Queue the given request for sending in the subsequent &#123;<span class="doctag">@link</span> #poll(long)&#125; calls</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> send The request to send</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(Send send)</span> &#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">connectionId</span> <span class="operator">=</span> send.destination();</span><br><span class="line">     <span class="keyword">if</span> (closingChannels.containsKey(connectionId))</span><br><span class="line">         <span class="built_in">this</span>.failedSends.add(connectionId);</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="type">KafkaChannel</span> <span class="variable">channel</span> <span class="operator">=</span> channelOrFail(connectionId, <span class="literal">false</span>);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             channel.setSend(send);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (CancelledKeyException e) &#123;</span><br><span class="line">             <span class="built_in">this</span>.failedSends.add(connectionId);</span><br><span class="line">             close(channel, <span class="literal">false</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSend</span><span class="params">(Send send)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.send != <span class="literal">null</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Attempt to begin a send operation with prior send operation still in progress.&quot;</span>);</span><br><span class="line">     <span class="built_in">this</span>.send = send;</span><br><span class="line">     <span class="built_in">this</span>.transportLayer.addInterestOps(SelectionKey.OP_WRITE);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">代码的入口main方法中Producer类是一个多线程，在main中对producerThread进行start。表示开始了这个线程，Producer类中的run方法被获得被执行。</summary>
    
    
    
    <category term="Kafka" scheme="https://yuanxw.github.io/categories/Kafka/"/>
    
    
    <category term="Kafka" scheme="https://yuanxw.github.io/tags/Kafka/"/>
    
    <category term="Kafka源码分析" scheme="https://yuanxw.github.io/tags/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Kafka源码分析(三)Sender线程获取metadata数据</title>
    <link href="https://yuanxw.github.io/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%89)Sender%E7%BA%BF%E7%A8%8B%E8%8E%B7%E5%8F%96metadata%E6%95%B0%E6%8D%AE/"/>
    <id>https://yuanxw.github.io/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%89)Sender%E7%BA%BF%E7%A8%8B%E8%8E%B7%E5%8F%96metadata%E6%95%B0%E6%8D%AE/</id>
    <published>2025-07-02T16:00:00.000Z</published>
    <updated>2025-09-03T17:04:00.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka源码分析-三-Sender线程获取metadata数据"><a href="#Kafka源码分析-三-Sender线程获取metadata数据" class="headerlink" title="Kafka源码分析(三)Sender线程获取metadata数据"></a>Kafka源码分析(三)Sender线程获取metadata数据</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li>前面<code>KafkaProducer</code> 类里面开启sender线程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">KafkaProducer</span><span class="params">(ProducerConfig config, Serializer&lt;K&gt; keySerializer, Serializer&lt;V&gt; valueSerializer)</span> &#123;</span><br><span class="line"><span class="comment">// .....省略....</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动Kafka网络线程</span></span><br><span class="line"><span class="built_in">this</span>.ioThread = <span class="keyword">new</span> <span class="title class_">KafkaThread</span>(ioThreadName, <span class="built_in">this</span>.sender, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">this</span>.ioThread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// .....省略....</span></span><br></pre></td></tr></table></figure><h2 id="二、Sender线程执行流程图"><a href="#二、Sender线程执行流程图" class="headerlink" title="二、Sender线程执行流程图"></a>二、Sender线程执行流程图</h2><pre><code class="mermaid">sequenceDiagramautonumberKafkaProducer -&gt;&gt; Sender: ioThread.start()Sender-&gt;&gt;Sender: run()多线程方法loop while (running)[死循环]    Sender-&gt;&gt;Sender: 获取当前集群metadata信息 metadata.fetch();    Sender-&gt;&gt;Sender: 获取已准备好发送数据的分区请求    Sender-&gt;&gt;Sender: 创建批次请求this.accumulator.drain    Sender-&gt;&gt;Sender: 保证消息顺序，guaranteeMessageOrder：false    Sender-&gt;&gt;Sender: 准备待发送请求的数据，sendProduceRequests(batches, now);    Sender-&gt;&gt;NetworkClient: this.client.poll(pollTimeout, now);    NetworkClient-&gt;&gt; NetworkClient: 封装要拉取元数据的请求metadataUpdater.maybeUpdate(now);    NetworkClient-&gt;&gt; Selector: 阻塞等待，直到有可用连接或超时select(timeout);end</code></pre><h2 id="三、源代码分析"><a href="#三、源代码分析" class="headerlink" title="三、源代码分析"></a>三、源代码分析</h2><ul><li>Sender线程的run方法被执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * producer线程的主 run 循环</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">     log.debug(<span class="string">&quot;Starting Kafka producer I/O thread.&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// main 循环，一直运行直到调用 close</span></span><br><span class="line">     <span class="keyword">while</span> (running) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             run(time.milliseconds());</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             log.error(<span class="string">&quot;Uncaught error in kafka producer I/O thread: &quot;</span>, e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     log.debug(<span class="string">&quot;Beginning shutdown of Kafka producer I/O thread, sending remaining records.&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// okay we stopped accepting requests but there may still be</span></span><br><span class="line">     <span class="comment">// requests in the accumulator or waiting for acknowledgment,</span></span><br><span class="line">     <span class="comment">// wait until these are completed.</span></span><br><span class="line">     <span class="keyword">while</span> (!forceClose &amp;&amp; (<span class="built_in">this</span>.accumulator.hasUnsent() || <span class="built_in">this</span>.client.inFlightRequestCount() &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             run(time.milliseconds());</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             log.error(<span class="string">&quot;Uncaught error in kafka producer I/O thread: &quot;</span>, e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (forceClose) &#123;</span><br><span class="line">         <span class="comment">// We need to fail all the incomplete batches and wake up the threads waiting on</span></span><br><span class="line">         <span class="comment">// the futures.</span></span><br><span class="line">         <span class="built_in">this</span>.accumulator.abortIncompleteBatches();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.client.close();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         log.error(<span class="string">&quot;Failed to close network client&quot;</span>, e);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     log.debug(<span class="string">&quot;Shutdown of Kafka producer I/O thread has completed.&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run a single iteration of sending</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> now</span></span><br><span class="line"><span class="comment"> *            The current POSIX time in milliseconds</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="type">long</span> now)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前集群metadata信息</span></span><br><span class="line">    <span class="type">Cluster</span> <span class="variable">cluster</span> <span class="operator">=</span> metadata.fetch();</span><br><span class="line">    <span class="comment">// 获取已准备好发送数据的节点</span></span><br><span class="line">    RecordAccumulator.<span class="type">ReadyCheckResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.accumulator.ready(cluster, now);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有任何分区的 leader 尚不清楚，则强制元数据更新。第一次执行topic，不会走</span></span><br><span class="line">    <span class="keyword">if</span> (!result.unknownLeaderTopics.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// The set of topics with unknown leader contains topics with leader election pending as well as</span></span><br><span class="line">        <span class="comment">// topics which may have expired. Add the topic again to metadata to ensure it is included</span></span><br><span class="line">        <span class="comment">// and request metadata update, since there are messages to send to the topic.</span></span><br><span class="line">        <span class="keyword">for</span> (String topic : result.unknownLeaderTopics)</span><br><span class="line">            <span class="built_in">this</span>.metadata.add(topic);</span><br><span class="line">        <span class="built_in">this</span>.metadata.requestUpdate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断节点有没有准备好，并移除没有准备的节点</span></span><br><span class="line">    <span class="comment">// remove any nodes we aren&#x27;t ready to send to</span></span><br><span class="line">    Iterator&lt;Node&gt; iter = result.readyNodes.iterator();</span><br><span class="line">    <span class="type">long</span> <span class="variable">notReadyTimeout</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">    <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> iter.next();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.client.ready(node, now)) &#123;</span><br><span class="line">            iter.remove();</span><br><span class="line">            notReadyTimeout = Math.min(notReadyTimeout, <span class="built_in">this</span>.client.connectionDelay(node, now));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建批次请求</span></span><br><span class="line">    Map&lt;Integer, List&lt;RecordBatch&gt;&gt; batches = <span class="built_in">this</span>.accumulator.drain(cluster,</span><br><span class="line">                                                                     result.readyNodes,</span><br><span class="line">                                                                     <span class="built_in">this</span>.maxRequestSize,</span><br><span class="line">                                                                     now);</span><br><span class="line">    <span class="comment">// 保证消息顺序，第一次执行guaranteeMessageOrder为false，不会走</span></span><br><span class="line">    <span class="keyword">if</span> (guaranteeMessageOrder) &#123;</span><br><span class="line">        <span class="comment">// Mute all the partitions drained</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;RecordBatch&gt; batchList : batches.values()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (RecordBatch batch : batchList)</span><br><span class="line">                <span class="built_in">this</span>.accumulator.mutePartition(batch.topicPartition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查超时的批次，第一次执行没expiredBatches为空</span></span><br><span class="line">    List&lt;RecordBatch&gt; expiredBatches = <span class="built_in">this</span>.accumulator.abortExpiredBatches(<span class="built_in">this</span>.requestTimeout, now);</span><br><span class="line">    <span class="comment">// 更新超时批次的错误计数</span></span><br><span class="line">    <span class="keyword">for</span> (RecordBatch expiredBatch : expiredBatches)</span><br><span class="line">        <span class="built_in">this</span>.sensors.recordErrors(expiredBatch.topicPartition.topic(), expiredBatch.recordCount);</span><br><span class="line"></span><br><span class="line">    sensors.updateProduceRequestMetrics(batches);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we have any nodes that are ready to send + have sendable data, poll with 0 timeout so this can immediately</span></span><br><span class="line">    <span class="comment">// loop and try sending more data. Otherwise, the timeout is determined by nodes that have partitions with data</span></span><br><span class="line">    <span class="comment">// that isn&#x27;t yet sendable (e.g. lingering, backing off). Note that this specifically does not include nodes</span></span><br><span class="line">    <span class="comment">// with sendable data that aren&#x27;t ready to send since they would cause busy looping.</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">pollTimeout</span> <span class="operator">=</span> Math.min(result.nextReadyCheckDelayMs, notReadyTimeout);</span><br><span class="line">    <span class="keyword">if</span> (!result.readyNodes.isEmpty()) &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Nodes with data ready to send: &#123;&#125;&quot;</span>, result.readyNodes);</span><br><span class="line">        pollTimeout = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 准备待发送请求的数据</span></span><br><span class="line">    sendProduceRequests(batches, now);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行网络请求</span></span><br><span class="line">    <span class="comment">// if some partitions are already ready to be sent, the select time would be 0;</span></span><br><span class="line">    <span class="comment">// otherwise if some partition already has some data accumulated but not ready yet,</span></span><br><span class="line">    <span class="comment">// the select time will be the time difference between now and its linger expiry time;</span></span><br><span class="line">    <span class="comment">// otherwise the select time will be the time difference between now and the metadata expiry time;</span></span><br><span class="line">    <span class="built_in">this</span>.client.poll(pollTimeout, now);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>拉取元数据的请求，在第一次执行的时候，不会返回任何的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Do actual reads and writes to sockets.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeout The maximum amount of time to wait (in ms) for responses if there are none immediately,</span></span><br><span class="line"><span class="comment"> *                must be non-negative. The actual timeout will be the minimum of timeout, request timeout and</span></span><br><span class="line"><span class="comment"> *                metadata timeout</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> now The current time in milliseconds</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The list of responses received</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ClientResponse&gt; <span class="title function_">poll</span><span class="params">(<span class="type">long</span> timeout, <span class="type">long</span> now)</span> &#123;</span><br><span class="line">    <span class="comment">// 封装要拉取元数据的请求</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">metadataTimeout</span> <span class="operator">=</span> metadataUpdater.maybeUpdate(now);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.selector.poll(Utils.min(timeout, metadataTimeout, requestTimeoutMs));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Unexpected error during I/O&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理已完成请求的操作</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">updatedNow</span> <span class="operator">=</span> <span class="built_in">this</span>.time.milliseconds();</span><br><span class="line">    List&lt;ClientResponse&gt; responses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    handleAbortedSends(responses);</span><br><span class="line">    handleCompletedSends(responses, updatedNow);</span><br><span class="line">    handleCompletedReceives(responses, updatedNow);</span><br><span class="line">    handleDisconnections(responses, updatedNow);</span><br><span class="line">    handleConnections();</span><br><span class="line">    handleInitiateApiVersionRequests(updatedNow);</span><br><span class="line">    handleTimedOutRequests(responses, updatedNow);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// invoke callbacks</span></span><br><span class="line">    <span class="keyword">for</span> (ClientResponse response : responses) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.onComplete();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Uncaught error in request completion:&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> responses;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>拉取元数据，给定超时间返回可用的通道或超时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">poll</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout should be &gt;= 0&quot;</span>);</span><br><span class="line"></span><br><span class="line">    clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasStagedReceives() || !immediatelyConnectedKeys.isEmpty())</span><br><span class="line">        timeout = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* check ready keys */</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">startSelect</span> <span class="operator">=</span> time.nanoseconds();</span><br><span class="line">    <span class="comment">// 阻塞等待，直到有可用连接或超时</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">readyKeys</span> <span class="operator">=</span> select(timeout);</span><br><span class="line">    <span class="type">long</span> <span class="variable">endSelect</span> <span class="operator">=</span> time.nanoseconds();</span><br><span class="line">    <span class="built_in">this</span>.sensors.selectTime.record(endSelect - startSelect, time.milliseconds());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (readyKeys &gt; <span class="number">0</span> || !immediatelyConnectedKeys.isEmpty()) &#123;</span><br><span class="line">        pollSelectionKeys(<span class="built_in">this</span>.nioSelector.selectedKeys(), <span class="literal">false</span>, endSelect);</span><br><span class="line">        pollSelectionKeys(immediatelyConnectedKeys, <span class="literal">true</span>, endSelect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addToCompletedReceives();</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">endIo</span> <span class="operator">=</span> time.nanoseconds();</span><br><span class="line">    <span class="built_in">this</span>.sensors.ioTime.record(endIo - endSelect, time.milliseconds());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we use the time at the end of select to ensure that we don&#x27;t close any connections that</span></span><br><span class="line">    <span class="comment">// have just been processed in pollSelectionKeys</span></span><br><span class="line">    maybeCloseOldestConnection(endSelect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前面`KafkaProducer` 类里面开启sender线程</summary>
    
    
    
    <category term="Kafka" scheme="https://yuanxw.github.io/categories/Kafka/"/>
    
    
    <category term="Kafka" scheme="https://yuanxw.github.io/tags/Kafka/"/>
    
    <category term="Kafka源码分析" scheme="https://yuanxw.github.io/tags/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Kafka源码分析(二)KafkaProducer初始化</title>
    <link href="https://yuanxw.github.io/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%BA%8C)KafkaProducer%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://yuanxw.github.io/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%BA%8C)KafkaProducer%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2025-07-01T16:00:00.000Z</published>
    <updated>2025-09-03T17:02:14.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka源码分析-二-KafkaProducer初始化"><a href="#Kafka源码分析-二-KafkaProducer初始化" class="headerlink" title="Kafka源码分析(二)KafkaProducer初始化"></a>Kafka源码分析(二)KafkaProducer初始化</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>Kafka的源码中附带了一个examples模块，我们从<code>KafkaConsumerProducerDemo</code>类中作为Producer生产者入口进入源码。</p><h3 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h3><ul><li><code>KafkaConsumerProducerDemo</code> 在Demo中创建Producer实例，并且开启多线程start</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaConsumerProducerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否是异步：如果参数个数为0，或者第一个参数不是&quot;sync&quot;，则是异步。生产环境一般是异步的数据处理。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isAsync</span> <span class="operator">=</span> args.length == <span class="number">0</span> || !args[<span class="number">0</span>].trim().equalsIgnoreCase(<span class="string">&quot;sync&quot;</span>);</span><br><span class="line">        <span class="type">Producer</span> <span class="variable">producerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Producer</span>(KafkaProperties.TOPIC, isAsync);</span><br><span class="line">        producerThread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本章节只看Producer，因此把Consumer相关的代码暂时注释掉</span></span><br><span class="line">        <span class="comment">// Consumer consumerThread = new Consumer(KafkaProperties.TOPIC);</span></span><br><span class="line">        <span class="comment">// consumerThread.start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>KafkaProducer初始化流程图</li></ul><pre><code class="mermaid">sequenceDiagramautonumberNote right of Producer: Producer初始化Producer-&gt;&gt; Producer: KafkaProducer实例化，传入props配置信息Producer-&gt;&gt; KafkaProducer: KafkaProducer实例化，传入props配置信息KafkaProducer-&gt;&gt; ProducerConfig: ProducerConfig初始化配置并验证参数信息KafkaProducer-&gt;&gt; KafkaProducer: 获取clientId属性，如果没有设置，则生成一个唯一的idKafkaProducer-&gt;&gt; KafkaProducer: 从配置中获取分区器，如果没有设置，则使用默认分区器KafkaProducer-&gt;&gt; KafkaProducer: 获取重试的间隔时间，默认100msKafkaProducer-&gt;&gt; KafkaProducer: 获取序列化器KafkaProducer-&gt;&gt; KafkaProducer: 初始化metadata元数据，并设置集群资源监听器KafkaProducer-&gt;&gt; KafkaProducer: 初始化缓存对象accumulator，用于缓存待发送的记录KafkaProducer-&gt;&gt; KafkaProducer: 更新元数据，设置cluster信息，cluster信息来自于配置文件中的bootstrap.serversKafkaProducer-&gt;&gt; KafkaProducer: 初始化网络客户端，用于发送请求。KafkaProducer-&gt;&gt; KafkaProducer: 初始化网络线程sender，用于发送请求。KafkaProducer-&gt;&gt; KafkaProducer: 启动Kafka网络线程this.ioThread.start();</code></pre><ul><li>生产者构造函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者构造函数</span></span><br><span class="line"><span class="comment"> * topic: 主题名称</span></span><br><span class="line"><span class="comment"> * isAsync: 是否异步发送</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> topic</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isAsync</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(String topic, Boolean isAsync)</span> &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="comment">// 连接kafka集群地址，这里使用默认配置：localhost:9092</span></span><br><span class="line">    props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, KafkaProperties.KAFKA_SERVER_URL + <span class="string">&quot;:&quot;</span> + KafkaProperties.KAFKA_SERVER_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// client.id: 客户端ID，用于标识当前生产者实例</span></span><br><span class="line">    props.put(<span class="string">&quot;client.id&quot;</span>, <span class="string">&quot;DemoProducer&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// key.serializer: key序列化器，这里使用IntegerSerializer</span></span><br><span class="line">    <span class="comment">// value.serializer: value序列化器，这里使用StringSerializer</span></span><br><span class="line">    props.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.IntegerSerializer&quot;</span>);</span><br><span class="line">    props.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// KafkaProducer实例化，传入配置信息</span></span><br><span class="line">    producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(props);</span><br><span class="line">    <span class="built_in">this</span>.topic = topic;</span><br><span class="line">    <span class="built_in">this</span>.isAsync = isAsync;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>构建KafkaProducer</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过提供一组键值对作为配置来实例化创建者。有效的配置字符串</span></span><br><span class="line"><span class="comment">  * 记录在 &lt;a href=“http://kafka.apache.org/documentation.html#producerconfigs”&gt;这里&lt;/a&gt;。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> properties   生产者配置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">KafkaProducer</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">ProducerConfig</span>(properties), <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过提供一组键值对作为配置、一个键和一个值 &#123;<span class="doctag">@link</span> Serializer&#125; 来实例化生产者。</span></span><br><span class="line"><span class="comment">  * 此处记录了有效的配置字符串&lt;a href=“http://kafka.apache.org/documentation.html#producerconfigs”&gt;&lt;/a&gt;。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> properties 生产者配置</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> keySerializer 实现 &#123;<span class="doctag">@link</span> Serializer&#125; 的 key 的序列化器。configure（） 方法不会是</span></span><br><span class="line"><span class="comment">  * 在直接传入序列化程序时在 producer 中调用。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> valueSerializer 实现 &#123;<span class="doctag">@link</span> Serializer&#125; 的值的序列化器。configure（） 方法不会</span></span><br><span class="line"><span class="comment">  * 当直接传入序列化程序时，在 producer 中调用。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">KafkaProducer</span><span class="params">(Properties properties, Serializer&lt;K&gt; keySerializer, Serializer&lt;V&gt; valueSerializer)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">ProducerConfig</span>(ProducerConfig.addSerializerToConfig(properties, keySerializer, valueSerializer)),</span><br><span class="line">          keySerializer, valueSerializer);</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>KafkaProducer实例化</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">KafkaProducer</span><span class="params">(ProducerConfig config, Serializer&lt;K&gt; keySerializer, Serializer&lt;V&gt; valueSerializer)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Starting the Kafka producer&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; userProvidedConfigs = config.originals();</span><br><span class="line">        <span class="built_in">this</span>.producerConfig = config;</span><br><span class="line">        <span class="built_in">this</span>.time = Time.SYSTEM;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取clientId属性，如果没有设置，则生成一个唯一的id</span></span><br><span class="line">        clientId = config.getString(ProducerConfig.CLIENT_ID_CONFIG);</span><br><span class="line">        <span class="keyword">if</span> (clientId.length() &lt;= <span class="number">0</span>)</span><br><span class="line">            clientId = <span class="string">&quot;producer-&quot;</span> + PRODUCER_CLIENT_ID_SEQUENCE.getAndIncrement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指标、监控相关代码</span></span><br><span class="line">        Map&lt;String, String&gt; metricTags = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line">        metricTags.put(<span class="string">&quot;client-id&quot;</span>, clientId);</span><br><span class="line">        <span class="type">MetricConfig</span> <span class="variable">metricConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MetricConfig</span>().samples(config.getInt(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG))</span><br><span class="line">                .timeWindow(config.getLong(ProducerConfig.METRICS_SAMPLE_WINDOW_MS_CONFIG), TimeUnit.MILLISECONDS)</span><br><span class="line">                .tags(metricTags);</span><br><span class="line">        List&lt;MetricsReporter&gt; reporters = config.getConfiguredInstances(ProducerConfig.METRIC_REPORTER_CLASSES_CONFIG,</span><br><span class="line">                MetricsReporter.class);</span><br><span class="line">        reporters.add(<span class="keyword">new</span> <span class="title class_">JmxReporter</span>(JMX_PREFIX));</span><br><span class="line">        <span class="built_in">this</span>.metrics = <span class="keyword">new</span> <span class="title class_">Metrics</span>(metricConfig, reporters, time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从配置中获取分区器，如果没有设置，则使用默认分区器</span></span><br><span class="line">        <span class="built_in">this</span>.partitioner = config.getConfiguredInstance(ProducerConfig.PARTITIONER_CLASS_CONFIG, Partitioner.class);</span><br><span class="line">        <span class="comment">// 获取重试的间隔时间，默认100ms</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">retryBackoffMs</span> <span class="operator">=</span> config.getLong(ProducerConfig.RETRY_BACKOFF_MS_CONFIG);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取序列化器</span></span><br><span class="line">        <span class="keyword">if</span> (keySerializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.keySerializer = config.getConfiguredInstance(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,</span><br><span class="line">                    Serializer.class);</span><br><span class="line">            <span class="built_in">this</span>.keySerializer.configure(config.originals(), <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            config.ignore(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG);</span><br><span class="line">            <span class="built_in">this</span>.keySerializer = keySerializer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (valueSerializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.valueSerializer = config.getConfiguredInstance(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,</span><br><span class="line">                    Serializer.class);</span><br><span class="line">            <span class="built_in">this</span>.valueSerializer.configure(config.originals(), <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            config.ignore(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG);</span><br><span class="line">            <span class="built_in">this</span>.valueSerializer = valueSerializer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置拦截器</span></span><br><span class="line">        userProvidedConfigs.put(ProducerConfig.CLIENT_ID_CONFIG, clientId);</span><br><span class="line">        List&lt;ProducerInterceptor&lt;K, V&gt;&gt; interceptorList = (List) (<span class="keyword">new</span> <span class="title class_">ProducerConfig</span>(userProvidedConfigs, <span class="literal">false</span>)).getConfiguredInstances(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG,</span><br><span class="line">                ProducerInterceptor.class);</span><br><span class="line">        <span class="built_in">this</span>.interceptors = interceptorList.isEmpty() ? <span class="literal">null</span> : <span class="keyword">new</span> <span class="title class_">ProducerInterceptors</span>&lt;&gt;(interceptorList);</span><br><span class="line">        <span class="comment">// 集群资源监听器</span></span><br><span class="line">        <span class="type">ClusterResourceListeners</span> <span class="variable">clusterResourceListeners</span> <span class="operator">=</span> configureClusterResourceListeners(keySerializer, valueSerializer, interceptorList, reporters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 初始化metadata元数据结构，并设置集群资源监听器</span></span><br><span class="line"><span class="comment">         * retryBackoffMs:重试的间隔时间，默认100ms</span></span><br><span class="line"><span class="comment">         * metadataMaxAgeMs:元数据最大存活时间，默认5分钟</span></span><br><span class="line"><span class="comment">         * allowAutoTopicCreation:是否允许自动创建主题，默认true</span></span><br><span class="line"><span class="comment">         * clusterResourceListeners:集群资源监听器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.metadata = <span class="keyword">new</span> <span class="title class_">Metadata</span>(retryBackoffMs, config.getLong(ProducerConfig.METADATA_MAX_AGE_CONFIG), <span class="literal">true</span>, clusterResourceListeners);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取maxRequestSize属性，(最大请求大小)，默认1M</span></span><br><span class="line"><span class="comment">         * 获取totalMemorySize属性，(缓冲区总大小)，默认32M</span></span><br><span class="line"><span class="comment">         * 获取compressionType属性，(压缩类型)，默认none</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">this</span>.maxRequestSize = config.getInt(ProducerConfig.MAX_REQUEST_SIZE_CONFIG);</span><br><span class="line">        <span class="built_in">this</span>.totalMemorySize = config.getLong(ProducerConfig.BUFFER_MEMORY_CONFIG);</span><br><span class="line">        <span class="built_in">this</span>.compressionType = CompressionType.forName(config.getString(ProducerConfig.COMPRESSION_TYPE_CONFIG));</span><br><span class="line">        <span class="comment">/* 检查用户定义的设置。</span></span><br><span class="line"><span class="comment">         * 如果 BLOCK_ON_BUFFER_FULL 设置为 true，则不执行 METADATA_FETCH_TIMEOUT_CONFIG。</span></span><br><span class="line"><span class="comment">         * 当已弃用的配置被删除时，这应该在 0.9 版本中删除。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (userProvidedConfigs.containsKey(ProducerConfig.BLOCK_ON_BUFFER_FULL_CONFIG)) &#123;</span><br><span class="line">            log.warn(ProducerConfig.BLOCK_ON_BUFFER_FULL_CONFIG + <span class="string">&quot; config is deprecated and will be removed soon. &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Please use &quot;</span> + ProducerConfig.MAX_BLOCK_MS_CONFIG);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">blockOnBufferFull</span> <span class="operator">=</span> config.getBoolean(ProducerConfig.BLOCK_ON_BUFFER_FULL_CONFIG);</span><br><span class="line">            <span class="keyword">if</span> (blockOnBufferFull) &#123;</span><br><span class="line">                <span class="built_in">this</span>.maxBlockTimeMs = Long.MAX_VALUE;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userProvidedConfigs.containsKey(ProducerConfig.METADATA_FETCH_TIMEOUT_CONFIG)) &#123;</span><br><span class="line">                log.warn(ProducerConfig.METADATA_FETCH_TIMEOUT_CONFIG + <span class="string">&quot; config is deprecated and will be removed soon. &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please use &quot;</span> + ProducerConfig.MAX_BLOCK_MS_CONFIG);</span><br><span class="line">                <span class="built_in">this</span>.maxBlockTimeMs = config.getLong(ProducerConfig.METADATA_FETCH_TIMEOUT_CONFIG);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.maxBlockTimeMs = config.getLong(ProducerConfig.MAX_BLOCK_MS_CONFIG);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userProvidedConfigs.containsKey(ProducerConfig.METADATA_FETCH_TIMEOUT_CONFIG)) &#123;</span><br><span class="line">            <span class="comment">// 获取元数据超时时间，默认60s</span></span><br><span class="line">            log.warn(ProducerConfig.METADATA_FETCH_TIMEOUT_CONFIG + <span class="string">&quot; config is deprecated and will be removed soon. &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Please use &quot;</span> + ProducerConfig.MAX_BLOCK_MS_CONFIG);</span><br><span class="line">            <span class="built_in">this</span>.maxBlockTimeMs = config.getLong(ProducerConfig.METADATA_FETCH_TIMEOUT_CONFIG);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取最大阻塞时间，默认60s</span></span><br><span class="line">            <span class="built_in">this</span>.maxBlockTimeMs = config.getLong(ProducerConfig.MAX_BLOCK_MS_CONFIG);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 检查用户定义的设置。</span></span><br><span class="line"><span class="comment">         * 如果设置了 TIME_OUT 配置，请将其用于请求超时。</span></span><br><span class="line"><span class="comment">         * 这应该在 0.9 版中删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (userProvidedConfigs.containsKey(ProducerConfig.TIMEOUT_CONFIG)) &#123;</span><br><span class="line">            log.warn(ProducerConfig.TIMEOUT_CONFIG + <span class="string">&quot; config is deprecated and will be removed soon. Please use &quot;</span> +</span><br><span class="line">                    ProducerConfig.REQUEST_TIMEOUT_MS_CONFIG);</span><br><span class="line">            <span class="built_in">this</span>.requestTimeoutMs = config.getInt(ProducerConfig.TIMEOUT_CONFIG);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取请求超时时间，默认30s</span></span><br><span class="line">            <span class="built_in">this</span>.requestTimeoutMs = config.getInt(ProducerConfig.REQUEST_TIMEOUT_MS_CONFIG);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化缓存对象，用于缓存待发送的记录。</span></span><br><span class="line">        <span class="built_in">this</span>.accumulator = <span class="keyword">new</span> <span class="title class_">RecordAccumulator</span>(config.getInt(ProducerConfig.BATCH_SIZE_CONFIG),</span><br><span class="line">                <span class="built_in">this</span>.totalMemorySize,</span><br><span class="line">                <span class="built_in">this</span>.compressionType,</span><br><span class="line">                config.getLong(ProducerConfig.LINGER_MS_CONFIG),</span><br><span class="line">                retryBackoffMs,</span><br><span class="line">                metrics,</span><br><span class="line">                time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新元数据，设置cluster信息，cluster信息来自于配置文件中的bootstrap.servers</span></span><br><span class="line">        List&lt;InetSocketAddress&gt; addresses = ClientUtils.parseAndValidateAddresses(config.getList(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG));</span><br><span class="line">        <span class="built_in">this</span>.metadata.update(Cluster.bootstrap(addresses), Collections.&lt;String&gt;emptySet(), time.milliseconds());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 初始化管理网络组件NetworkClient</span></span><br><span class="line"><span class="comment">         * connections.max.idle.ms : 连接最大空闲时间，默认9分钟</span></span><br><span class="line"><span class="comment">         * max.in.flight.requests.per.connection : 单个连接最大未确认请求数，默认5。如果需要有序，需要设置：为1</span></span><br><span class="line"><span class="comment">         * reconnect.backoff.ms : 重连间隔时间，默认50毫秒</span></span><br><span class="line"><span class="comment">         * send.buffer.bytes : 发送缓冲区大小，默认128K</span></span><br><span class="line"><span class="comment">         * receive.buffer.bytes : 接收缓冲区大小，默认32K</span></span><br><span class="line"><span class="comment">         * requestTimeoutMs：请求超时时间，默认5分钟</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ChannelBuilder</span> <span class="variable">channelBuilder</span> <span class="operator">=</span> ClientUtils.createChannelBuilder(config.values());</span><br><span class="line">        <span class="type">NetworkClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NetworkClient</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Selector</span>(config.getLong(ProducerConfig.CONNECTIONS_MAX_IDLE_MS_CONFIG), <span class="built_in">this</span>.metrics, time, <span class="string">&quot;producer&quot;</span>, channelBuilder),</span><br><span class="line">                <span class="built_in">this</span>.metadata,</span><br><span class="line">                clientId,</span><br><span class="line">                config.getInt(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION),</span><br><span class="line">                config.getLong(ProducerConfig.RECONNECT_BACKOFF_MS_CONFIG),</span><br><span class="line">                config.getInt(ProducerConfig.SEND_BUFFER_CONFIG),</span><br><span class="line">                config.getInt(ProducerConfig.RECEIVE_BUFFER_CONFIG),</span><br><span class="line">                <span class="built_in">this</span>.requestTimeoutMs,</span><br><span class="line">                time,</span><br><span class="line">                <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  初始化网络Sender线程，用于发送请求。</span></span><br><span class="line"><span class="comment">         *  acks：确认模式：默认值为：1</span></span><br><span class="line"><span class="comment">         *      0：不确认，即使集群中有leader，也不会等待确认。</span></span><br><span class="line"><span class="comment">         *      1：leader确认，即使集群中有follower，也不会等待确认。</span></span><br><span class="line"><span class="comment">         *      2：leader和follower都确认，等待所有副本确认。</span></span><br><span class="line"><span class="comment">         * retries：重试次数，默认值为：0。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">this</span>.sender = <span class="keyword">new</span> <span class="title class_">Sender</span>(client,</span><br><span class="line">                <span class="built_in">this</span>.metadata,</span><br><span class="line">                <span class="built_in">this</span>.accumulator,</span><br><span class="line">                config.getInt(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION) == <span class="number">1</span>,</span><br><span class="line">                config.getInt(ProducerConfig.MAX_REQUEST_SIZE_CONFIG),</span><br><span class="line">                (<span class="type">short</span>) parseAcks(config.getString(ProducerConfig.ACKS_CONFIG)),</span><br><span class="line">                config.getInt(ProducerConfig.RETRIES_CONFIG),</span><br><span class="line">                <span class="built_in">this</span>.metrics,</span><br><span class="line">                Time.SYSTEM,</span><br><span class="line">                <span class="built_in">this</span>.requestTimeoutMs);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ioThreadName</span> <span class="operator">=</span> <span class="string">&quot;kafka-producer-network-thread&quot;</span> + (clientId.length() &gt; <span class="number">0</span> ? <span class="string">&quot; | &quot;</span> + clientId : <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动Kafka网络线程</span></span><br><span class="line">        <span class="built_in">this</span>.ioThread = <span class="keyword">new</span> <span class="title class_">KafkaThread</span>(ioThreadName, <span class="built_in">this</span>.sender, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.ioThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.errors = <span class="built_in">this</span>.metrics.sensor(<span class="string">&quot;errors&quot;</span>);</span><br><span class="line"></span><br><span class="line">        config.logUnused();</span><br><span class="line">        AppInfoParser.registerAppInfo(JMX_PREFIX, clientId);</span><br><span class="line">        log.debug(<span class="string">&quot;Kafka producer started&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="comment">// this is to prevent resource leak. see KAFKA-2121</span></span><br><span class="line">        close(<span class="number">0</span>, TimeUnit.MILLISECONDS, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">KafkaException</span>(<span class="string">&quot;Failed to construct kafka producer&quot;</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Kafka的源码中附带了一个examples模块，我们从`KafkaConsumerProducerDemo`类中作为Producer生产者入口进入源码</summary>
    
    
    
    <category term="Kafka" scheme="https://yuanxw.github.io/categories/Kafka/"/>
    
    
    <category term="Kafka" scheme="https://yuanxw.github.io/tags/Kafka/"/>
    
    <category term="Kafka源码分析" scheme="https://yuanxw.github.io/tags/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Kafka源码分析(一)环境搭建</title>
    <link href="https://yuanxw.github.io/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%80)%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://yuanxw.github.io/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%80)%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2025-06-30T16:00:00.000Z</published>
    <updated>2025-09-03T16:42:04.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka源码分析-一-环境搭建"><a href="#Kafka源码分析-一-环境搭建" class="headerlink" title="Kafka源码分析(一)环境搭建"></a>Kafka源码分析(一)环境搭建</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>源码的思路是先分析老版本，再分析新版本。因为老版本的架构是稳定的，基础特性都是有的。最后我们对比Feature提升对Kafka理解。<br>由浅入深：假设我们认为Kafka是一个单体的，首先分析一条消息从Producer发到Kafka再到Consumer的一个消费，再到集群的处理的消费。</p><h2 id="二、前置条件"><a href="#二、前置条件" class="headerlink" title="二、前置条件"></a>二、前置条件</h2><h3 id="2-1-安装和配置JDK"><a href="#2-1-安装和配置JDK" class="headerlink" title="2.1 安装和配置JDK"></a>2.1 <strong>安装和配置JDK</strong></h3><ul><li><p>JDK配置要求JDK1.8，使用java -version命令来查看当前JDK的版本，示例如下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\yuanxw&gt;java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_241&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_241-b07)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-下载并安装配置Gradle"><a href="#2-2-下载并安装配置Gradle" class="headerlink" title="2.2 下载并安装配置Gradle"></a><strong>2.2 下载并安装配置Gradle</strong></h3><ul><li><p>下载地址为：<a href="https://gradle.org/releases/">https://gradle.org/releases/</a>，笔者使用的版本是5.6.4。一般只需要将下载的包解压，然后再将GRADLE_HOME&#x2F;bin的路径添加到环境变量Path中即可，其中;GRADLE_HOME指的是Gradle的根目录。可以使用gradle -v命令来验证Gradle是否已经配置完成，示例如下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\yuanxw&gt;gradle -v</span><br><span class="line"></span><br><span class="line">Welcome to Gradle 5.6.4!</span><br><span class="line"></span><br><span class="line">Here are the highlights of this release:</span><br><span class="line"> - Incremental Groovy compilation</span><br><span class="line"> - Groovy compile avoidance</span><br><span class="line"> - Test fixtures <span class="keyword">for</span> Java projects</span><br><span class="line"> - Manage plugin versions via settings script</span><br><span class="line"></span><br><span class="line">For more details see https://docs.gradle.org/5.6.4/release-notes.html</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 5.6.4</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build <span class="keyword">time</span>:   2019-11-01 20:42:00 UTC</span><br><span class="line">Revision:     dd870424f9bd8e195d614dc14bb140f43c22da98</span><br><span class="line"></span><br><span class="line">Kotlin:       1.3.41</span><br><span class="line">Groovy:       2.5.4</span><br><span class="line">Ant:          Apache Ant(TM) version 1.9.14 compiled on March 12 2019</span><br><span class="line">JVM:          1.8.0_241 (Oracle Corporation 25.241-b07)</span><br><span class="line">OS:           Windows 10 10.0 amd64</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-下载并安装配置Scala"><a href="#2-3-下载并安装配置Scala" class="headerlink" title="2.3 下载并安装配置Scala"></a><strong>2.3 下载并安装配置Scala</strong></h3><ul><li><p>在win上安装Scala 2.10.6，上官网找到2.10.6版本对应的下载地址，kafka的服务器端的源码是scala写的，但是新版本的客户端的源码是java写的<a href="https://www.scala-lang.org/download/2.10.6.html">https://www.scala-lang.org/download/2.10.6.html</a>然后就可以下载win上的安装包，scala.msi，下载好之后傻瓜式安装就可以了，接着必须配置SCALA_HOME和PATH两个环境变量，首先必须得有Java和Scala两种编程语言的支持才可以。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\yuanxw&gt;scala -version</span><br><span class="line">Scala code runner version 2.10.6 -- Copyright 2002-2013, LAMP/EPFL</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-构建Kafka源码环境"><a href="#2-4-构建Kafka源码环境" class="headerlink" title="2.4 构建Kafka源码环境"></a><strong>2.4 构建Kafka源码环境</strong></h3><ul><li><p>在GitHub上fork一份kafka源码到自已仓库，从自己的仓库中下载，下载地址：<a href="https://github.com/apache/kafka.git">https://github.com/apache/kafka.git</a></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 E： 盘新建一个 kafka 目录，然后把 Kafka 项目 Clone 到这里。(作者位置：E:\workspace\IdeaWork\github)</span></span><br><span class="line">E:\workspace\IdeaWork\github&gt;**git <span class="built_in">clone</span> git@github.com:yuanxw/kafka.git**</span><br><span class="line">Cloning into <span class="string">&#x27;kafka&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 451197, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 451197 (delta 0), reused 0 (delta 0), pack-reused 451197 (from 1)</span><br><span class="line">Receiving objects: 100% (451197/451197), 227.47 MiB | 81.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (220962/220962), <span class="keyword">done</span>.</span><br><span class="line">Updating files: 100% (6890/6890), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 0.10.2 版本*</span></span><br><span class="line">git checkout origin/0.10.2</span><br></pre></td></tr></table></figure></li><li><p>Gradle 构建 Kafka 项目之前确认事项：</p><ol><li><p>确保 gradle.properties 配置文件中的 scalaVersion 与 Windows 中 Scala 版本一致，0.10.2 版本的 Kafka 是 2.10.6 版本的 Scala。</p> <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">group=org.apache.kafka</span><br><span class="line"># <span class="attr">NOTE:</span> When you change <span class="variable language_">this</span> version number, you should also make sure to update</span><br><span class="line"># the version numbers <span class="keyword">in</span> tests<span class="regexp">/kafkatest/</span>__init__.py and kafka-merge-pr.py.</span><br><span class="line">version=<span class="number">0.10</span><span class="number">.2</span><span class="number">.3</span>-SNAPSHOT</span><br><span class="line">scalaVersion=<span class="number">2.10</span><span class="number">.6</span></span><br><span class="line">task=build</span><br><span class="line">org.gradle.jvmargs=-<span class="attr">XX:</span>MaxPermSize=<span class="number">512</span>m -Xmx1024m -Xss2m</span><br></pre></td></tr></table></figure></li><li><p>配置 Gradle 的仓库为阿里的镜像仓库</p><ul><li>改之前遇到的错误：</li></ul> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">E:\workspace\IdeaWork\github\kafka&gt;gradle idea</span><br><span class="line">Starting a Gradle Daemon (subsequent builds will be faster)</span><br><span class="line"></span><br><span class="line">&gt; Configure project :</span><br><span class="line">[<span class="type">Fatal</span> <span class="type">Error</span>] gradle<span class="literal">-versions-plugin-0</span>.<span class="number">13.0</span>.pom:<span class="number">7</span>:<span class="number">3</span>: 元素类型 <span class="string">&quot;hr&quot;</span> 必须由匹配的结束标记 <span class="string">&quot;&lt;/hr&gt;&quot;</span> 终止。</span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring root project <span class="string">&#x27;kafka&#x27;</span>.</span><br><span class="line">&gt; Could not resolve all artifacts <span class="keyword">for</span> configuration <span class="string">&#x27;:classpath&#x27;</span>.</span><br><span class="line">   &gt; Could not resolve com.github.ben<span class="literal">-manes</span>:gradle<span class="literal">-versions-plugin</span>:<span class="number">0.13</span>.<span class="number">0</span>.</span><br><span class="line">     Required by:</span><br><span class="line">         project :</span><br><span class="line">      &gt; Could not resolve com.github.ben<span class="literal">-manes</span>:gradle<span class="literal">-versions-plugin</span>:<span class="number">0.13</span>.<span class="number">0</span>.</span><br><span class="line">         &gt; Could not parse POM http://dl.bintray.com/content/netflixoss/external<span class="literal">-gradle-plugins</span>/com/github/ben<span class="literal">-manes</span>/gradle<span class="literal">-versions-plugin</span>/<span class="number">0.13</span>.<span class="number">0</span>/gradle<span class="literal">-versions-plugin-0</span>.<span class="number">13.0</span>.pom</span><br><span class="line">            &gt; 元素类型 <span class="string">&quot;hr&quot;</span> 必须由匹配的结束标记 <span class="string">&quot;&lt;/hr&gt;&quot;</span> 终止。</span><br><span class="line"></span><br><span class="line">* <span class="keyword">Try</span>:</span><br><span class="line">Run with <span class="literal">--stacktrace</span> option to get the stack trace. Run with <span class="literal">--info</span> or <span class="literal">--debug</span> option to get more log output. Run with <span class="literal">--scan</span> to get full insights.</span><br><span class="line"></span><br><span class="line">* Get more help at https://help.gradle.org</span><br><span class="line"></span><br><span class="line">BUILD FAILED <span class="keyword">in</span> <span class="number">12</span>s</span><br></pre></td></tr></table></figure></li><li><p>修改 org.scoverage:gradle-scoverage 的版本号</p> <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  <span class="comment">// For Apache Rat plugin to ignore non-Git files</span></span><br><span class="line">  classpath <span class="string">&quot;org.ajoberstar:grgit:1.7.0&quot;</span></span><br><span class="line">  classpath <span class="string">&#x27;com.github.ben-manes:gradle-versions-plugin:0.13.0&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 这里原来是 2.1.0 修改为 2.5.0</span></span><br><span class="line">  <span class="comment">// classpath &#x27;org.scoverage:gradle-scoverage:2.1.0&#x27;</span></span><br><span class="line">  classpath <span class="string">&#x27;org.scoverage:gradle-scoverage:2.5.0&#x27;</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>改之前遇到的错误：</li></ul> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; Configure project :\github\kafka&gt;gradle idea</span><br><span class="line">Building project <span class="string">&#x27;core&#x27;</span> with Scala version <span class="number">2.10</span>.<span class="number">6</span></span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* <span class="built_in">Where</span>:</span><br><span class="line">Build file <span class="string">&#x27;E:\workspace\IdeaWork\github\kafka\build.gradle&#x27;</span> line: <span class="number">388</span></span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred evaluating root project <span class="string">&#x27;kafka&#x27;</span>.</span><br><span class="line">&gt; Failed to apply plugin [<span class="type">id</span> <span class="string">&#x27;org.scoverage&#x27;</span>]</span><br><span class="line">   &gt; Could not create an instance of <span class="built_in">type</span> org.scoverage.ScoverageExtension.</span><br><span class="line">      &gt; You can<span class="string">&#x27;t map a property that does not exist: propertyName=testClassesDir</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* Try:</span></span><br><span class="line"><span class="string">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* Get more help at https://help.gradle.org</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Deprecated Gradle features were used in this build, making it incompatible with Gradle 6.0.</span></span><br><span class="line"><span class="string">Use &#x27;</span><span class="literal">--warning-mode</span> all<span class="string">&#x27; to show the individual deprecation warnings.</span></span><br><span class="line"><span class="string">See https://docs.gradle.org/5.6.4/userguide/command_line_interface.html#sec:command_line_warnings</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">BUILD FAILED in 1s</span></span><br></pre></td></tr></table></figure></li><li><p>修改好上面的文件之后就可以在 kafka 根目录直接执行 <code>gradle idea</code>，等成功之后就可以用 IDEA 打开了。</p> <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">E:</span>\workspace\IdeaWork\github\kafka&gt;gradle idea</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span></span><br><span class="line">Building project <span class="string">&#x27;core&#x27;</span> with Scala version <span class="number">2.10</span><span class="number">.6</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="attr">Task :</span>idea</span><br><span class="line">Generated IDEA project at <span class="attr">file:</span><span class="comment">///E:/workspace/IdeaWork/github/kafka/kafka.ipr</span></span><br><span class="line"></span><br><span class="line">Deprecated Gradle features were used <span class="keyword">in</span> <span class="variable language_">this</span> build, making it incompatible with Gradle <span class="number">6.0</span>.</span><br><span class="line">Use <span class="string">&#x27;--warning-mode all&#x27;</span> to show the individual deprecation warnings.</span><br><span class="line">See <span class="attr">https:</span><span class="comment">//docs.gradle.org/5.6.4/userguide/command_line_interface.html#sec:command_line_warnings</span></span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> <span class="number">3</span>m <span class="number">19</span>s</span><br><span class="line"><span class="number">19</span> actionable <span class="attr">tasks:</span> <span class="number">19</span> executed</span><br></pre></td></tr></table></figure><p> <img src="/images/kafak_source/chapter1/image.png" alt="image.png"></p></li></ol></li></ul><h3 id="2-5-Idea配置Kafka源码环境"><a href="#2-5-Idea配置Kafka源码环境" class="headerlink" title="2.5 Idea配置Kafka源码环境"></a><strong>2.5 Idea配置Kafka源码环境</strong></h3><ul><li><p>IDEA 安装 Scala 插件，在 File -&gt; Settings -&gt; Plugin 中搜索 Scala 并安装。</p><p>  <img src="/images/kafak_source/chapter1/image1.png" alt="image.png"></p></li><li><p>配置 Scala SDK，在 File -&gt; Settings -&gt; ProjectStructure</p><p>  <img src="/images/kafak_source/chapter1/image2.png" alt="image.png"></p></li><li><p>将 config 目录下的 log4j.properties 文件拷贝到 core&#x2F;src&#x2F;main&#x2F;scala 目录下，这样可以让 Kafka 在运行时能够输出日志信息。</p><p>  <img src="/images/kafak_source/chapter1/image3.png" alt="image.png"></p></li><li><p>配置 server.properties 文件</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启这个功能方便Kafka在运行一段时间之后，能够删除一些不需要的临时topic</span></span><br><span class="line"><span class="string">delete.topic.enable=true</span></span><br><span class="line"><span class="comment"># 禁用自动创建topic的功能</span></span><br><span class="line"><span class="string">auto.create.topics.enable=false</span></span><br><span class="line"><span class="comment"># 在Windows环境下运行，所以需要修改这个配置，注意这里的双反斜杠</span></span><br><span class="line"><span class="string">log.dirs=E:\\workspace\\IdeaWork\\github\\kafka\\tmp\\kafka-logs</span></span><br><span class="line"><span class="comment"># 配置kafka依赖的zookeeper路径地址，这里的前提是在本地开启了一个zookeeper的服务</span></span><br><span class="line"><span class="string">zookeeper.connect=localhost:2181/kafka</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-6-Zookeeper的安装、配置及启动"><a href="#2-6-Zookeeper的安装、配置及启动" class="headerlink" title="2.6 Zookeeper的安装、配置及启动"></a><strong>2.6 Zookeeper的安装、配置及启动</strong></h3><p>Kafka需要使用Zookeeper来管理元数据，比如记录topic、partitions（分区）以及replica（副本）的分配信息。由于这里只是阐述如何构建Kafka的源码环境搭建，所以这里的Zookeeper的安装也以极简为主，即采用单机配置。Zookeeper下载地址为：<a href="http://zookeeper.apache.org/releases.html">http://zookeeper.apache.org/releases.html</a>，下载之后解压，然后将**$ZOOKEEPER_HOME<strong>目录下的conf&#x2F;zoo_sample.cfg重命名为zoo.cfg，其中</strong>$ZOOKEEPER_HOME**指的是ZooKeeper的根目录。</p><p>修改**$ZOOKEEPER_HOME**&#x2F;conf&#x2F;zoo.cfg配置，示例配置如下（其余配置可以不做修改）：</p><ul><li><p>本地下载Zookeeper</p><ul><li>下载版本：apache-zookeeper-3.6.1</li><li>修改配置：dataDir&#x3D;D:\software\apache-zookeeper-3.6.1\data</li></ul></li><li><p>配置zookeeper环境变量</p><p>  将$ZOOKEEPER_HOME&#x2F;bin配置到Path中，之后直接运行zkServer命令即可开启Zookeeper服务。示例如下：</p>  <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\yuanxw&gt;zkServer</span><br><span class="line"></span><br><span class="line">C:\Users\yuanxw&gt;call <span class="string">&quot;D:\software\Java\jdk1.8\jdk1.8.0_241&quot;</span>\bin\java <span class="string">&quot;-Dzookeeper.log.dir=D:\software\apache-zookeeper-3.6.1\bin\..\logs&quot;</span> <span class="string">&quot;-Dzookeeper.root.logger=INFO,CONSOLE&quot;</span> <span class="string">&quot;-Dzookeeper.log.file=zookeeper-yuanxw-server-DESKTOP-EDMKNEI.log&quot;</span> <span class="string">&quot;-XX:+HeapDumpOnOutOfMemoryError&quot;</span> <span class="string">&quot;-XX:OnOutOfMemoryError=cmd /c taskkill /pid %%p /t /f&quot;</span> -cp <span class="string">&quot;D:\software\apache-zookeeper-3.6.1\bin\..\build\classes;D:\software\apache-zookeeper-3.6.1\bin\..\build\lib\*;D:\software\apache-zookeeper-3.6.1\bin\..\*;D:\software\apache-zookeeper-3.6.1\bin\..\lib\*;D:\software\apache-zookeeper-3.6.1\bin\..\conf&quot;</span> org<span class="variable">.apache</span><span class="variable">.zookeeper</span><span class="variable">.server</span><span class="variable">.quorum</span><span class="variable">.QuorumPeerMain</span> <span class="string">&quot;D:\software\apache-zookeeper-3.6.1\bin\..\conf\zoo.cfg&quot;</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">539</span> [myid:] - INFO  [main:QuorumPeerConfig@<span class="number">173</span>] - Reading configuration from: D:\software\apache-zookeeper-<span class="number">3</span><span class="variable">.6</span><span class="variable">.1</span>\bin\..\conf\zoo<span class="variable">.cfg</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">566</span> [myid:] - INFO  [main:QuorumPeerConfig@<span class="number">459</span>] - clientPortAddress is <span class="number">0</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.0</span>:<span class="number">2181</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">567</span> [myid:] - INFO  [main:QuorumPeerConfig@<span class="number">463</span>] - secureClientPort is <span class="keyword">not</span> set</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">567</span> [myid:] - INFO  [main:QuorumPeerConfig@<span class="number">479</span>] - observerMasterPort is <span class="keyword">not</span> set</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">569</span> [myid:] - INFO  [main:QuorumPeerConfig@<span class="number">496</span>] - metricsProvider<span class="variable">.className</span> is org<span class="variable">.apache</span><span class="variable">.zookeeper</span><span class="variable">.metrics</span><span class="variable">.impl</span><span class="variable">.DefaultMetricsProvider</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">570</span> [myid:] - INFO  [main:DatadirCleanupManager@<span class="number">78</span>] - autopurge<span class="variable">.snapRetainCount</span> set to <span class="number">3</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">570</span> [myid:] - INFO  [main:DatadirCleanupManager@<span class="number">79</span>] - autopurge<span class="variable">.purgeInterval</span> set to <span class="number">0</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">570</span> [myid:] - INFO  [main:DatadirCleanupManager@<span class="number">101</span>] - Purge <span class="keyword">task</span> is <span class="keyword">not</span> scheduled.</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">570</span> [myid:] - WARN  [main:QuorumPeerMain@<span class="number">138</span>] - Either no <span class="keyword">config</span> <span class="keyword">or</span> no quorum defined in <span class="keyword">config</span>, running in standalone mode</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">574</span> [myid:] - INFO  [main:ManagedUtil@<span class="number">44</span>] - Log4j <span class="number">1</span><span class="variable">.2</span> jmx support found <span class="keyword">and</span> enabled.</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">630</span> [myid:] - INFO  [main:QuorumPeerConfig@<span class="number">173</span>] - Reading configuration from: D:\software\apache-zookeeper-<span class="number">3</span><span class="variable">.6</span><span class="variable">.1</span>\bin\..\conf\zoo<span class="variable">.cfg</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">631</span> [myid:] - INFO  [main:QuorumPeerConfig@<span class="number">459</span>] - clientPortAddress is <span class="number">0</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.0</span>:<span class="number">2181</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">631</span> [myid:] - INFO  [main:QuorumPeerConfig@<span class="number">463</span>] - secureClientPort is <span class="keyword">not</span> set</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">632</span> [myid:] - INFO  [main:QuorumPeerConfig@<span class="number">479</span>] - observerMasterPort is <span class="keyword">not</span> set</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">632</span> [myid:] - INFO  [main:QuorumPeerConfig@<span class="number">496</span>] - metricsProvider<span class="variable">.className</span> is org<span class="variable">.apache</span><span class="variable">.zookeeper</span><span class="variable">.metrics</span><span class="variable">.impl</span><span class="variable">.DefaultMetricsProvider</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">632</span> [myid:] - INFO  [main:ZooKeeperServerMain@<span class="number">122</span>] - Starting server</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">680</span> [myid:] - INFO  [main:ServerMetrics@<span class="number">62</span>] - ServerMetrics initialized <span class="keyword">with</span> provider org<span class="variable">.apache</span><span class="variable">.zookeeper</span><span class="variable">.metrics</span><span class="variable">.impl</span><span class="variable">.DefaultMetricsProvider</span>@<span class="number">7</span>a92922</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">683</span> [myid:] - INFO  [main:FileTxnSnapLog@<span class="number">124</span>] - zookeeper<span class="variable">.snapshot</span><span class="variable">.trust</span><span class="variable">.empty</span> : false</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">691</span> [myid:] - INFO  [main:ZookeeperBanner@<span class="number">42</span>] -</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">691</span> [myid:] - INFO  [main:ZookeeperBanner@<span class="number">42</span>] -   ______                  _</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">691</span> [myid:] - INFO  [main:ZookeeperBanner@<span class="number">42</span>] -  |___  /                 | |</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">692</span> [myid:] - INFO  [main:ZookeeperBanner@<span class="number">42</span>] -     / /    ___     ___   | | __   ___    ___   _ __     ___   _ __</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">692</span> [myid:] - INFO  [main:ZookeeperBanner@<span class="number">42</span>] -    / /    / _ \   / _ \  | |/ /  / _ \  / _ \ | &#x27;_ \   / _ \ | &#x27;__|</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">692</span> [myid:] - INFO  [main:ZookeeperBanner@<span class="number">42</span>] -   / /__  | (_) | | (_) | |   &lt;  |  __/ |  __/ | |_) | |  __/ | |</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">693</span> [myid:] - INFO  [main:ZookeeperBanner@<span class="number">42</span>] -  /_____|  \___/   \___/  |_|\_\  \___|  \___| | <span class="variable">.__</span>/   \___| |_|</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">693</span> [myid:] - INFO  [main:ZookeeperBanner@<span class="number">42</span>] -                                               | |</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">693</span> [myid:] - INFO  [main:ZookeeperBanner@<span class="number">42</span>] -                                               |_|</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">694</span> [myid:] - INFO  [main:ZookeeperBanner@<span class="number">42</span>] -</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">705</span> [myid:] - INFO  [main:Environment@<span class="number">98</span>] - Server environment:zookeeper<span class="variable">.version</span>=<span class="number">3</span><span class="variable">.6</span><span class="variable">.1</span>--<span class="number">104</span>dcb3e3fb464b30c5186d229e00af9f332524b, built on <span class="number">04</span>/<span class="number">21</span>/<span class="number">2020</span> <span class="number">15</span>:<span class="number">01</span> GMT</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">705</span> [myid:] - INFO  [main:Environment@<span class="number">98</span>] - Server environment:host<span class="variable">.name</span>=DESKTOP-EDMKNEI</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">705</span> [myid:] - INFO  [main:Environment@<span class="number">98</span>] - Server environment:java<span class="variable">.version</span>=<span class="number">1</span><span class="variable">.8</span><span class="variable">.0_241</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">706</span> [myid:] - INFO  [main:Environment@<span class="number">98</span>] - Server environment:java<span class="variable">.vendor</span>=Oracle Corporation</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">708</span> [myid:] - INFO  [main:Environment@<span class="number">98</span>] - Server environment:java<span class="variable">.home</span>=D:\software\Java\jdk1<span class="variable">.8</span>\jdk1<span class="variable">.8</span><span class="variable">.0_241</span>\jre</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">32</span>,<span class="number">874</span> [myid:] - INFO  [main:ContextHandler@<span class="number">825</span>] - Started o<span class="variable">.e</span><span class="variable">.j</span><span class="variable">.s</span><span class="variable">.ServletContextHandler</span>@<span class="number">887</span>af79&#123;/,<span class="literal">null</span>,AVAILABLE&#125;</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">262</span> [myid:] - INFO  [main:AbstractConnector@<span class="number">330</span>] - Started ServerConnector@<span class="number">57</span>baeedf&#123;HTTP/<span class="number">1</span><span class="variable">.1</span>,[http/<span class="number">1</span><span class="variable">.1</span>]&#125;&#123;<span class="number">0</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.0</span>:<span class="number">8080</span>&#125;</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">263</span> [myid:] - INFO  [main:Server@<span class="number">399</span>] - Started @<span class="number">925</span>ms</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">264</span> [myid:] - INFO  [main:JettyAdminServer@<span class="number">178</span>] - Started AdminServer on address <span class="number">0</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.0</span>, port <span class="number">8080</span> <span class="keyword">and</span> command URL /commands</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">268</span> [myid:] - INFO  [main:ServerCnxnFactory@<span class="number">169</span>] - Using org<span class="variable">.apache</span><span class="variable">.zookeeper</span><span class="variable">.server</span><span class="variable">.NIOServerCnxnFactory</span> as server connection factory</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">269</span> [myid:] - WARN  [main:ServerCnxnFactory@<span class="number">309</span>] - maxCnxns is <span class="keyword">not</span> configured, using <span class="keyword">default</span> value <span class="number">0</span>.</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">271</span> [myid:] - INFO  [main:NIOServerCnxnFactory@<span class="number">666</span>] - Configuring NIO connection handler <span class="keyword">with</span> <span class="number">10</span>s sessionless connection timeout, <span class="number">2</span> selector thread(s), <span class="number">16</span> worker threads, <span class="keyword">and</span> <span class="number">64</span> kB direct buffers.</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">272</span> [myid:] - INFO  [main:NIOServerCnxnFactory@<span class="number">674</span>] - binding to port <span class="number">0</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.0</span>/<span class="number">0</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.0</span>:<span class="number">2181</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">285</span> [myid:] - INFO  [main:WatchManagerFactory@<span class="number">42</span>] - Using org<span class="variable">.apache</span><span class="variable">.zookeeper</span><span class="variable">.server</span><span class="variable">.watch</span><span class="variable">.WatchManager</span> as watch manager</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">286</span> [myid:] - INFO  [main:WatchManagerFactory@<span class="number">42</span>] - Using org<span class="variable">.apache</span><span class="variable">.zookeeper</span><span class="variable">.server</span><span class="variable">.watch</span><span class="variable">.WatchManager</span> as watch manager</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">286</span> [myid:] - INFO  [main:ZKDatabase@<span class="number">132</span>] - zookeeper<span class="variable">.snapshotSizeFactor</span> = <span class="number">0</span><span class="variable">.33</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">286</span> [myid:] - INFO  [main:ZKDatabase@<span class="number">152</span>] - zookeeper<span class="variable">.commitLogCount</span>=<span class="number">500</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">290</span> [myid:] - INFO  [main:SnapStream@<span class="number">61</span>] - zookeeper<span class="variable">.snapshot</span><span class="variable">.compression</span><span class="variable">.method</span> = CHECKED</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">291</span> [myid:] - INFO  [main:FileSnap@<span class="number">85</span>] - Reading snapshot D:\software\apache-zookeeper-<span class="number">3</span><span class="variable">.6</span><span class="variable">.1</span>\data\version-<span class="number">2\s</span>napshot<span class="variable">.0</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">293</span> [myid:] - INFO  [main:DataTree@<span class="number">1737</span>] - The digest value is empty in snapshot</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">298</span> [myid:] - INFO  [main:ZKDatabase@<span class="number">289</span>] - Snapshot loaded in <span class="number">11</span> ms, highest zxid is <span class="number">0</span>x0, digest is <span class="number">1371985504</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">299</span> [myid:] - INFO  [main:FileTxnSnapLog@<span class="number">470</span>] - Snapshotting: <span class="number">0</span>x0 to D:\software\apache-zookeeper-<span class="number">3</span><span class="variable">.6</span><span class="variable">.1</span>\data\version-<span class="number">2\s</span>napshot<span class="variable">.0</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">301</span> [myid:] - INFO  [main:ZooKeeperServer@<span class="number">519</span>] - Snapshot taken in <span class="number">2</span> ms</span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">315</span> [myid:] - INFO  [main:RequestThrottler@<span class="number">74</span>] - zookeeper<span class="variable">.request_throttler</span><span class="variable">.shutdownTimeout</span> = <span class="number">10000</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">326</span> [myid:] - INFO  [main:ContainerManager@<span class="number">83</span>] - Using checkIntervalMs=<span class="number">60000</span> maxPerMinute=<span class="number">10000</span> maxNeverUsedIntervalMs=<span class="number">0</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">33</span>,<span class="number">328</span> [myid:] - INFO  [main:ZKAuditProvider@<span class="number">42</span>] - ZooKeeper audit is disabled.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">源码的思路是先分析老版本，再分析新版本。因为老版本的架构是稳定的，基础特性都是有的。最后我们对比Feature提升对Kafka理解。由浅入深：假设我们认为Kafka是一个单体的，首先分析一条消息从Producer发到Kafka再到Consumer的一个消费，再到集群的处理的消费。</summary>
    
    
    
    <category term="Kafka" scheme="https://yuanxw.github.io/categories/Kafka/"/>
    
    
    <category term="Kafka" scheme="https://yuanxw.github.io/tags/Kafka/"/>
    
    <category term="Kafka源码分析" scheme="https://yuanxw.github.io/tags/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础入门(十一)Redis缓存穿透和雪崩</title>
    <link href="https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E5%8D%81%E4%B8%80)Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/"/>
    <id>https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E5%8D%81%E4%B8%80)Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/</id>
    <published>2023-04-10T16:00:00.000Z</published>
    <updated>2025-09-03T16:22:07.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基础入门-十一-Redis缓存穿透和雪崩"><a href="#Redis基础入门-十一-Redis缓存穿透和雪崩" class="headerlink" title="Redis基础入门(十一)Redis缓存穿透和雪崩"></a>Redis基础入门(十一)Redis缓存穿透和雪崩</h2><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。<br>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</p><p><img src="/images/redis_basics_beginners/chapter11/image.png" alt="Untitled"></p><h3 id="2-缓存穿透（查不到）"><a href="#2-缓存穿透（查不到）" class="headerlink" title="2. 缓存穿透（查不到）"></a>2. 缓存穿透（查不到）</h3><p>缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒<br>杀！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了——<strong>缓存穿透</strong>。</p><ul><li><p>解决方案</p><ul><li><p>布隆过滤器</p><p>  布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力；</p><p>  <img src="/images/redis_basics_beginners/chapter11/image1.png" alt="Untitled"></p></li><li><p>缓存空对象</p><p>  当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数<br>  据将会从缓存中获取，保护了后端数据源；</p><p>  <img src="/images/redis_basics_beginners/chapter11/image2.png" alt="Untitled"></p></li></ul><p>  但是这种方法会存在两个问题：<br>  1、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多<br>  的空值的键；<br>  2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于<br>  需要保持一致性的业务会有影响。</p></li></ul><h3 id="缓存击穿（量太大，缓存过期！）"><a href="#缓存击穿（量太大，缓存过期！）" class="headerlink" title="缓存击穿（量太大，缓存过期！）"></a><strong>缓存击穿（量太大，缓存过期！）</strong></h3><p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一<br>个屏障上凿开了一个洞。</p><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p><ul><li><p>设置热点数据永不过期</p><ul><li>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</li></ul></li><li><p>加互斥锁</p><ul><li>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</li></ul><p>  <img src="/images/redis_basics_beginners/chapter11/image3.png" alt="Untitled"></p></li></ul><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机！产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p><p><img src="/images/redis_basics_beginners/chapter11/image4.png" alt="Untitled"></p><p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就<br>是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p><ul><li>解决方案<ul><li><p>redis高可用</p><p>  这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。（异地多活！）</p></li><li><p>限流降级</p><p>  这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p></li><li><p>数据预热</p><p>  数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</summary>
    
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/tags/Redis/"/>
    
    <category term="Redis基础入门" scheme="https://yuanxw.github.io/tags/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础入门(十)Redis主从复制</title>
    <link href="https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E5%8D%81)Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E5%8D%81)Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</id>
    <published>2023-04-09T16:00:00.000Z</published>
    <updated>2025-09-03T16:22:02.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基础入门-十-Redis主从复制"><a href="#Redis基础入门-十-Redis主从复制" class="headerlink" title="Redis基础入门(十)Redis主从复制"></a>Redis基础入门(十)Redis主从复制</h2><h3 id="1-主从复制"><a href="#1-主从复制" class="headerlink" title="1. 主从复制"></a>1. 主从复制</h3><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master&#x2F;leader)，后者称为从节点(slave&#x2F;follower)；数据的复制是单向的，只能由主节点到从节点。<br>Master以写为主，Slave 以读为主。默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p><ul><li>主从复制的作用主要包括：<ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li>高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ol></li></ul><p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的（宕机），原因如下：</p><ol><li>从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</li><li>从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。</li><li>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。<br>对于这种场景，我们可以使如下这种架构：</li></ol><p><img src="/images/redis_basics_beginners/chapter10/image.png" alt="Untitled"></p><p>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！ 一主<br>二从！<br>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用Redis！</p><h3 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h3><ul><li>只配置从库，不用配置主库！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication <span class="comment"># 查看当前库的信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master <span class="comment"># 角色 master</span></span><br><span class="line">connected_slaves:0 <span class="comment"># 没有从机</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:b63c90e6c501143759cb0e7f450bd1eb0c70882a</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><ul><li>复制3个配置文件，然后修改对应的信息<ul><li>端口</li><li>pid 名字</li><li>log文件名字</li><li>dump.rdb 名字<br>  修改完毕之后，启动我们的3个redis服务器，可以通过进程信息查看！</li></ul></li></ul><h3 id="3-一主二从配置"><a href="#3-一主二从配置" class="headerlink" title="3. 一主二从配置"></a>3. 一主二从配置</h3><p><strong><code>默认情况下，每台Redis服务器都是主节点</code></strong>； 我们一般情况下只用配置从机就好了！<br>认老大！ 一主 （79）二从（80，81）</p><ul><li>服务器：6380、6381节点，命令：SLAVEOF 127.0.0.1 6379</li><li>真实的从主配置应该在配置文件中配置，这样的话是永久的，我们这里使用的是命令，暂时的！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:11</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:14</span><br><span class="line">slave_repl_offset:14</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:b0d63cc54f188f3c8a92cc65e88134759417b18e</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:14</span><br></pre></td></tr></table></figure><ul><li>在主机节点：【6379】中查看！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2   <span class="comment"># 多了从机的配置</span></span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=14,lag=1  <span class="comment"># 多了从机的配置</span></span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=14,lag=0  <span class="comment"># 多了从机的配置</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:b0d63cc54f188f3c8a92cc65e88134759417b18e</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:14</span><br></pre></td></tr></table></figure><ul><li><p>主从测试</p><p>  主机可以写，从机不能写只能读！主机中的所有信息和数据，都会自动被从机保存！</p><p>  主机写：</p><p>  <img src="/images/redis_basics_beginners/chapter10/image1.png" alt="Untitled"></p></li><li><p>从机只能读取内容：</p><p>  <img src="/images/redis_basics_beginners/chapter10/image2.png" alt="Untitled"></p><p>  测试：</p><ul><li>主机断开连接，从机依旧连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息！</li><li>如果是使用命令行，来配置的主从，这个时候如果重启了，就会变回主机！只要变为从机，立马就会从主机中获取值！</li></ul></li><li><p>复制原理</p><ul><li>Slave 启动成功连接到 master 后会发送一个sync同步命令。</li><li>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</li><li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master 继续将新的所有收集到的修改命令依次传给slave，完成同步。但是只要是重新连接master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中看到！</li></ul></li><li><p>手动选对主节点</p><p>  如果主机断开了连接，我们可以使用 <strong><code>SLAVEOF no one</code></strong> 让自己变成主机！其他的节点就可以手动连接到最新的这个主节点（手动）！如果这个时候老大修复了，那就重新连接（重新设置**<code>SLAVEOF命令</code>**）！</p></li></ul><h3 id="4-哨兵模式"><a href="#4-哨兵模式" class="headerlink" title="4. 哨兵模式"></a>4. 哨兵模式</h3><p>概述：自动选举master的模式</p><p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel（哨兵） 架构来解决这个问题。</p><p>后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。<br>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p><p><img src="/images/redis_basics_beginners/chapter10/image3.png" alt="Untitled"></p><ul><li><p>这里的哨兵有两个作用</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</li></ul><p>  然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。<br>  各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p>  <img src="/images/redis_basics_beginners/chapter10/image4.png" alt="Untitled"></p><p>  假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。  </p></li><li><p>测试</p><p>  我们目前的状态是 一主二从！</p><ul><li><p>配置哨兵配置文件 sentinel.conf</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sentinel monitor 被监控的名称 host port 1</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p>  后面的这个数字1，代表主机挂了，slave投票看让谁接替成为主机，票数最多的，就会成为主机！</p></li><li><p>启动哨兵</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./redis-sentinel config/sentinel.conf </span><br><span class="line">23283:X 12 Jan 2022 07:06:19.119 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">23283:X 12 Jan 2022 07:06:19.119 <span class="comment"># Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=23283, just started</span></span><br><span class="line">23283:X 12 Jan 2022 07:06:19.119 <span class="comment"># Configuration loaded</span></span><br><span class="line">23283:X 12 Jan 2022 07:06:19.121 * monotonic clock: POSIX clock_gettime</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ <span class="string">&#x27;&#x27;</span>-._                                             </span><br><span class="line">      _.-``    `.  `_.  <span class="string">&#x27;&#x27;</span>-._           Redis 6.2.6 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">&#x27;&#x27;</span>-._                                  </span><br><span class="line"> (    <span class="string">&#x27;      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class="string">&#x27;|     Port: 26379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 23283</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |           https://redis.io       </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |                                  </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line">      `-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>                                       </span><br><span class="line">          `-._        _.-<span class="string">&#x27;                                           </span></span><br><span class="line"><span class="string">              `-.__.-&#x27;</span>                                               </span><br><span class="line"></span><br><span class="line">23283:X 12 Jan 2022 07:06:19.122 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">23283:X 12 Jan 2022 07:06:19.122 <span class="comment"># Sentinel ID is 4cc0f01814993b512993fe592448af8fb6590b01</span></span><br><span class="line">23283:X 12 Jan 2022 07:06:19.122 <span class="comment"># +monitor master myredis 127.0.0.1 6379 quorum 1</span></span><br><span class="line">23283:X 12 Jan 2022 07:06:19.123 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class="line">23283:X 12 Jan 2022 07:06:19.125 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span><br></pre></td></tr></table></figure><ul><li>如果Master 节点断开了，这个时候就会从从机中随机选择一个服务器！ （这里面有一个投票算法！）</li></ul><p>  <img src="/images/redis_basics_beginners/chapter10/image5.png" alt="Untitled"></p><p>  <img src="/images/redis_basics_beginners/chapter10/image6.png" alt="Untitled"></p><p>  如果主机此时回来了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则！  </p></li><li><p>优点缺点</p><ul><li>优点<ul><li>哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</li><li>主从可以切换，故障可以转移，系统的可用性就会更好</li><li>哨兵模式就是主从模式的升级，手动到自动，更加健壮！</li></ul></li><li>缺点：<ul><li>Redis 不好啊在线扩容的，集群容量一旦到达上限，在线扩容就十分麻烦！</li><li>实现哨兵模式的配置其实是很麻烦的，里面有很多选择！</li></ul></li></ul></li><li><p>哨兵模式的全部配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"><span class="comment"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 哨兵sentinel的工作目录</span></span><br><span class="line"><span class="built_in">dir</span> /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 哨兵sentinel监控的redis主节点的 ip port</span></span><br><span class="line"><span class="comment"># master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class="line"><span class="comment"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，</span></span><br><span class="line"><span class="comment"># 但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span></span><br><span class="line"><span class="comment"># 可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span></span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span></span><br><span class="line"><span class="comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class="line"><span class="comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span></span><br><span class="line"><span class="comment">#3.当想要取消一个正在进行的failover所需要的时间。</span></span><br><span class="line"><span class="comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，</span></span><br><span class="line"><span class="comment"># slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span></span><br><span class="line"><span class="comment"># 默认三分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"><span class="comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="comment">#对于脚本的运行结果有以下规则：</span></span><br><span class="line"><span class="comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class="line"><span class="comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class="line"><span class="comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class="line"><span class="comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class="line"><span class="comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），</span></span><br><span class="line"><span class="comment">#将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信</span></span><br><span class="line"><span class="comment">#息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配</span></span><br><span class="line"><span class="comment">#置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class="line"><span class="comment"># 通知脚本</span></span><br><span class="line"><span class="comment"># shell编程</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class="line"><span class="comment"># &lt;role&gt;是“leader”或者“observer”中的一个。</span></span><br><span class="line"><span class="comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class="line"><span class="comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh <span class="comment"># 一般都是由运维来配置！</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。</summary>
    
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/tags/Redis/"/>
    
    <category term="Redis基础入门" scheme="https://yuanxw.github.io/tags/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础入门(九)Redis发布订阅</title>
    <link href="https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%B9%9D)Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    <id>https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%B9%9D)Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</id>
    <published>2023-04-08T16:00:00.000Z</published>
    <updated>2025-09-03T16:16:24.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基础入门-九-Redis发布订阅"><a href="#Redis基础入门-九-Redis发布订阅" class="headerlink" title="Redis基础入门(九)Redis发布订阅"></a>Redis基础入门(九)Redis发布订阅</h2><p>Redis 发布订阅(pub&#x2F;sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。微信、微博、关注系统！<br>Redis 客户端可以订阅任意数量的频道。<br>订阅&#x2F;发布消息图：<br>第一个：消息发送者， 第二个：频道 第三个：消息订阅者！</p><p><img src="/images/redis_basics_beginners/chapter9/image.png" alt="Untitled"></p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的</p><p><img src="/images/redis_basics_beginners/chapter9/image1.png" alt="Untitled"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="/images/redis_basics_beginners/chapter9/image2.png" alt="Untitled"></p><ul><li><p>命令</p><ul><li>这些命令被广泛用于构建即时通信应用，比如网络聊天室(chatroom)和实时广播、实时提醒等。</li></ul><p>  <img src="/images/redis_basics_beginners/chapter9/image3.png" alt="Untitled">  </p></li><li><p>测试</p><ul><li>订阅端</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE peppa <span class="comment"># 订阅一个频道 peppa</span></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;peppa&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 等待读取推送的信息</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span> <span class="comment"># 消息</span></span><br><span class="line">2) <span class="string">&quot;peppa&quot;</span> <span class="comment"># 那个频道的消息</span></span><br><span class="line">3) <span class="string">&quot;hello,kuangshen&quot;</span> <span class="comment"># 消息的具体内容</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;peppa&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello,redis&quot;</span></span><br></pre></td></tr></table></figure><ul><li>发送端：</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH peppa <span class="string">&quot;hello,kuangshen&quot;</span> <span class="comment"># 发布者发布消息到频道！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH peppa <span class="string">&quot;hello,redis&quot;</span> <span class="comment"># 发布者发布消息到频道！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li><li><p>原理</p><p>  Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加深对 Redis 的理解。</p><p>  Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。<br>  微信：<br>  通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 频道！而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键，就是将客户端添加到给定 channel 的订阅链表中。</p><p>  <img src="/images/redis_basics_beginners/chapter9/image4.png" alt="Untitled"></p></li></ul><p>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p><p>Pub&#x2F;Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应<br>的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p><ul><li><strong>使用场景</strong><ul><li>实时消息系统！</li><li>事实聊天！（频道当做聊天室，将信息回显给所有人即可！）</li><li>订阅，关注系统都是可以的！<code>稍微复杂的场景我们就会使用 消息中间件</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。微信、微博、关注系统！Redis 客户端可以订阅任意数量的频道。</summary>
    
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/tags/Redis/"/>
    
    <category term="Redis基础入门" scheme="https://yuanxw.github.io/tags/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础入门(八)Redis持久化</title>
    <link href="https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E5%85%AB)Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E5%85%AB)Redis%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2023-04-07T16:00:00.000Z</published>
    <updated>2025-09-03T16:21:03.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基础入门-八-Redis持久化"><a href="#Redis基础入门-八-Redis持久化" class="headerlink" title="Redis基础入门(八)Redis持久化"></a>Redis基础入门(八)Redis持久化</h2><p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！</p><h3 id="1-RDB（Redis-DataBase）"><a href="#1-RDB（Redis-DataBase）" class="headerlink" title="1. RDB（Redis DataBase）"></a>1. RDB（Redis DataBase）</h3><ul><li><p><strong>什么是RDB</strong></p><ul><li>在主从复制中，rdb就是备用了！从机上面！</li></ul><p>  <img src="/images/redis_basics_beginners/chapter8/image.png" alt="Untitled"></p><p>  在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。<br>  Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。<br>  这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是<br>  RDB，一般情况下不需要修改这个配置！<br>  有时候在生产环境我们会将这个文件进行备份！<br>  <strong><code>rdb保存的文件是dump.rdb</code></strong> 都是在我们的配置文件中快照中进行配置的！</p><p>  <img src="/images/redis_basics_beginners/chapter8/image1.png" alt="Untitled"></p><p>  <img src="/images/redis_basics_beginners/chapter8/image2.png" alt="Untitled">  </p></li><li><p><strong>触发机制</strong></p><ul><li>save的规则满足的情况下，会自动触发rdb规则</li><li>执行 flushall 命令，也会触发我们的rdb规则！</li><li>退出redis，也会产生 rdb 文件！备份就自动生成一个 dump.rdb</li></ul><p>  <img src="/images/redis_basics_beginners/chapter8/image3.png" alt="Untitled"></p></li><li><p><strong>如果恢复rdb文件</strong></p><ul><li>只需要将rdb文件放在我们redis启动目录就可以，redis启动的时候会自动检查dump.rdb 恢复其中的数据！</li><li>查看需要存在的位置</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get <span class="built_in">dir</span></span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/usr/local/bin&quot;</span> <span class="comment"># 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure></li><li><p>优点缺点：</p><ul><li>优点：<ul><li>适合大规模的数据恢复！</li><li>对数据的完整性要不高！</li></ul></li><li>缺点：<ul><li>需要一定的时间间隔进程操作！如果redis意外宕机了，这个最后一次修改数据就没有的了！</li><li>fork进程的时候，会占用一定的内容空间！！</li></ul></li></ul></li></ul><h3 id="2-AOF（Append-Only-File）"><a href="#2-AOF（Append-Only-File）" class="headerlink" title="2. AOF（Append Only File）"></a>2. <strong>AOF（Append Only File）</strong></h3><p>将我们的所有命令都记录下来，history，恢复的时候就把这个文件全部在执行一遍！</p><ul><li><p><strong>什么是AOF</strong></p><p>  <img src="/images/redis_basics_beginners/chapter8/image4.png" alt="Untitled"></p></li></ul><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件<br>的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><p><strong><code>Aof保存的是 appendonly.aof 文件</code></strong></p><ul><li><p><strong>append</strong></p><p>  <img src="/images/redis_basics_beginners/chapter8/image5.png" alt="Untitled"></p><p>  默认是不开启的，我们需要手动进行配置！我们只需要将 appendonly 改为yes就开启了 aof！重启，redis 就可以生效了！<br>  如果这个 aof 文件有错位，这时候 redis 是启动不起来的吗，我们需要修复这个aof文件<br>  redis 给我们提供了一个工具：<strong><code>redis-check-aof --fix</code></strong></p><p>  <img src="/images/redis_basics_beginners/chapter8/image6.png" alt="Untitled"></p></li><li><p>重写规则说明</p><ul><li><p>aof 默认就是文件的无限追加，文件会越来越大！，如果 aof 文件大于 64m，太大了！ fork一个新的进程来将我们的文件进行重写！</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">appendonly no <span class="comment"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，</span></span><br><span class="line">rdb完全够用！</span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> <span class="comment"># 持久化的文件的名字</span></span><br><span class="line"><span class="comment"># appendfsync always # 每次修改都会 sync。消耗性能</span></span><br><span class="line">appendfsync everysec <span class="comment"># 每秒执行一次 sync，可能会丢失这1s的数据！</span></span><br><span class="line"><span class="comment"># appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span></span><br><span class="line"><span class="comment"># rewrite 重写，</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>优点和缺点</p><ul><li>优点：<ul><li>每一次修改都同步，文件的完整会更加好！</li><li>每秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高的！</li></ul></li><li>缺点：<ul><li>相对于数据文件来说，aof远远大于 rdb，修复的速度也比 rdb慢！</li><li>Aof 运行效率也要比 rdb 慢，所以我们redis默认的配置就是rdb持久化！</li></ul></li></ul></li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul><li>RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</li><li>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重<br>写，使得AOF文件的体积不至于过大。</li><li>只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化</li><li>同时开启两种持久化方式：<ul><li>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li><li>RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有<br>  AOF可能潜在的Bug，留着作为一个万一的手段。</li></ul></li><li>性能建议<ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</li><li>如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产<br>  生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重<br>  写可以改到适当的数值。</li><li>如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master&#x2F;Slave 同时倒掉，会丢失十几分钟的数据，<br>  启动脚本也要比较两个 Master&#x2F;Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！</summary>
    
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/tags/Redis/"/>
    
    <category term="Redis基础入门" scheme="https://yuanxw.github.io/tags/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础入门(七)Redis.conf详解</title>
    <link href="https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%B8%83)Redis%20conf%E8%AF%A6%E8%A7%A3/"/>
    <id>https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%B8%83)Redis%20conf%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-04-06T16:00:00.000Z</published>
    <updated>2025-09-03T16:22:07.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基础入门-七-Redis-conf详解"><a href="#Redis基础入门-七-Redis-conf详解" class="headerlink" title="Redis基础入门(七)Redis.conf详解"></a>Redis基础入门(七)Redis.conf详解</h2><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><ul><li><p><strong>单位</strong></p><ul><li>配置文件 unit单位 对大小写不敏感！</li></ul><p>  <img src="/images/redis_basics_beginners/chapter7/image.png" alt="Untitled"></p></li><li><p><strong>include(包含)</strong></p><ul><li>就是好比我们学习Spring、Improt， include</li></ul><p>  <img src="/images/redis_basics_beginners/chapter7/image1.png" alt="Untitled"></p></li><li><p>NETWORK（网络）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1      <span class="comment"># 绑定的ip</span></span><br><span class="line">protected-mode <span class="built_in">yes</span>  <span class="comment"># 保护模式</span></span><br><span class="line">port 6379           <span class="comment"># 端口设置</span></span><br></pre></td></tr></table></figure></li><li><p>GENERAL(通用 )</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">daemonize <span class="built_in">yes</span> <span class="comment"># 以守护进程的方式运行，默认是 no，我们需要自己开启为yes！</span></span><br><span class="line">pidfile /var/run/redis_6379.pid <span class="comment"># 如果以后台的方式运行，我们就需要指定一个 pid 文件！</span></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably) 生产环境</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;&quot;</span> <span class="comment"># 日志的文件位置名</span></span><br><span class="line">databases 16 <span class="comment"># 数据库的数量，默认是 16 个数据库</span></span><br><span class="line">always-show-logo <span class="built_in">yes</span> <span class="comment"># 是否总是显示LOGO</span></span><br></pre></td></tr></table></figure></li><li><p>SNAPSHOTTING（快照）</p><ul><li>持久化， 在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb. aof。Redis 是内存数据库，如果没有持久化，那么数据断电及失！</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作</span></span><br><span class="line">save 60 10000</span><br><span class="line"><span class="comment"># 我们之后学习持久化，会自己定义这个测试！</span></span><br><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span> <span class="comment"># 持久化如果出错，是否还需要继续工作！</span></span><br><span class="line">rdbcompression <span class="built_in">yes</span> <span class="comment"># 是否压缩 rdb 文件，需要消耗一些cpu资源！</span></span><br><span class="line">rdbchecksum <span class="built_in">yes</span> <span class="comment"># 保存rdb文件的时候，进行错误的检查校验！</span></span><br><span class="line"><span class="built_in">dir</span> ./ <span class="comment"># rdb 文件保存的目录！</span></span><br></pre></td></tr></table></figure></li><li><p><strong>SECURITY (安全)</strong></p><p>  可以在这里设置redis的密码，默认是没有密码！</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass <span class="comment"># 获取redis的密码</span></span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass <span class="string">&quot;123456&quot;</span> <span class="comment"># 设置redis的密码</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass <span class="comment"># 发现所有的命令都没有权限了</span></span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth 123456 <span class="comment"># 使用密码进行登录！</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>CLIENTS(限制 )</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000 <span class="comment"># 设置能连接上redis的最大客户端的数量</span></span><br><span class="line">maxmemory &lt;bytes&gt; <span class="comment"># redis 配置最大的内存容量</span></span><br><span class="line">maxmemory-policy noeviction <span class="comment"># 内存到达上限之后的处理策略</span></span><br></pre></td></tr></table></figure><ul><li>内存到达上限之后的处理策略：<ol><li>volatile-lru：  只对设置了过期时间的key进行LRU（默认值）</li><li>allkeys-lru ： 删除lru算法的key</li><li>volatile-random：随机删除即将过期key</li><li>allkeys-random：随机删除</li><li>volatile-ttl ： 删除即将过期的</li><li>noeviction ： 永不过期，返回错误</li></ol></li></ul></li></ul><h3 id="APPEND-ONLY-模式-aof配置"><a href="#APPEND-ONLY-模式-aof配置" class="headerlink" title="APPEND ONLY 模式 aof配置"></a>APPEND ONLY 模式 aof配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ppendonly no <span class="comment"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> <span class="comment"># 持久化的文件的名字</span></span><br><span class="line"><span class="comment"># appendfsync always # 每次修改都会 sync。消耗性能</span></span><br><span class="line">appendfsync everysec <span class="comment"># 每秒执行一次 sync，可能会丢失这1s的数据！</span></span><br><span class="line"><span class="comment"># appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Redis基础入门(七)Redis.conf详解</summary>
    
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/tags/Redis/"/>
    
    <category term="Redis基础入门" scheme="https://yuanxw.github.io/tags/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础入门(六)SpringBoot整合</title>
    <link href="https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E5%85%AD)SpringBoot%E6%95%B4%E5%90%88/"/>
    <id>https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E5%85%AD)SpringBoot%E6%95%B4%E5%90%88/</id>
    <published>2023-04-05T16:00:00.000Z</published>
    <updated>2025-09-03T16:21:08.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基础入门-六-SpringBoot整合"><a href="#Redis基础入门-六-SpringBoot整合" class="headerlink" title="Redis基础入门(六)SpringBoot整合"></a>Redis基础入门(六)SpringBoot整合</h2><p>SpringBoot 操作数据，添加Spring Data下</p><p>Spring Data:  Spring 的一个子项目。用于简化数据库访问，支持<strong>NoSQL</strong>和<strong>关系数据库存储</strong>。其主要目标是使数据库的访问变得方便快捷。</p><p>Spring Data 项目所支持<strong>NoSQL存储</strong>：</p><ul><li><ul><li>MongoDB（文档数据库）</li></ul></li><li><ul><li>Neo4j （图形数据库）</li></ul></li><li><ul><li>Redis（键&#x2F;值存储）</li></ul></li><li><ul><li>Hbase（列族数据库）</li></ul></li></ul><p>Spring Data 项目所支持的<strong>关系数据存储技术</strong>：</p><ul><li><ul><li>JDBC</li></ul></li><li><p>- <strong>JPA</strong></p></li></ul><h3 id="1-创建Springboot模块"><a href="#1-创建Springboot模块" class="headerlink" title="1. 创建Springboot模块"></a>1. 创建Springboot模块</h3><ul><li>选择创建Module ⇒ Spring Initializr</li></ul><p><img src="/images/redis_basics_beginners/chapter6/image.png" alt="Untitled"></p><ul><li>配置参数及JDK版本</li></ul><p><img src="/images/redis_basics_beginners/chapter6/image1.png" alt="Untitled"></p><ul><li>选择开发工具</li></ul><p><img src="/images/redis_basics_beginners/chapter6/image2.png" alt="Untitled"></p><ul><li>选择存储位置</li></ul><p><img src="/images/redis_basics_beginners/chapter6/image3.png" alt="Untitled"></p><ul><li><p>自动导入依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.peppa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>peppa-springboot-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  <img src="/images/redis_basics_beginners/chapter6/image4.png" alt="Untitled"></p></li><li><p><strong>说明： 在 SpringBoot2.x 之后，原来使用的jedis 被替换为了 lettuce?</strong></p><p>  jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接池！ 更像 BIO 模式<br>  lettuce : 采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据了，更像 NIO 模式</p></li><li><p>查看自动配置文件：spring-autoconfigure-metadata.properties</p><p>  SpringBoot所有的配置类，都有一个自动配置类，自动配置类都会绑定一个properties配置文件</p><p>  <img src="/images/redis_basics_beginners/chapter6/image5.png" alt="Untitled"></p></li><li><p>源码分析：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">    <span class="comment">// 默认的 RedisTemplate 没有过多的设置，redis 对象都是需要序列化！</span></span><br><span class="line">    <span class="comment">// 两个泛型都是 Object, Object 的类型，我们后使用需要强制转换 &lt;String, Object&gt;</span></span><br><span class="line">RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>  <span class="comment">// 由于 String 是redis中最常使用的类型，所以说单独提出来了一个bean！</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> StringRedisTemplate <span class="title function_">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringRedisTemplate</span>(redisConnectionFactory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置连接</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置redis</span></span><br><span class="line"><span class="string">spring.redis.host=192.168.3.21</span></span><br><span class="line"><span class="string">spring.redis.port=6379</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.peppa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PeppaSpringbootRedisApplicationTests</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(PeppaSpringbootRedisApplicationTests.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// redisTemplate 操作不同的数据类型，api和我们的指令是一样的</span></span><br><span class="line">        <span class="comment">// opsForValue 操作字符串 类似String</span></span><br><span class="line">        <span class="comment">// opsForList 操作List 类似List</span></span><br><span class="line">        <span class="comment">// opsForSet</span></span><br><span class="line">        <span class="comment">// opsForHash</span></span><br><span class="line">        <span class="comment">// opsForZSet</span></span><br><span class="line">        <span class="comment">// opsForGeo</span></span><br><span class="line">        <span class="comment">// opsForHyperLogLog</span></span><br><span class="line">        <span class="comment">// 除了进本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的CRUD</span></span><br><span class="line">        <span class="comment">// 获取redis的连接对象</span></span><br><span class="line">        <span class="comment">// RedisConnection connection =</span></span><br><span class="line">        redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">        <span class="comment">// connection.flushDb();</span></span><br><span class="line">        <span class="comment">// connection.flushAll();</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;mykey&quot;</span>, <span class="string">&quot;小猪佩奇&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;mykey===&gt;&#123;&#125;&quot;</span>,redisTemplate.opsForValue().get(<span class="string">&quot;mykey&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-Redis序列化配置"><a href="#2-Redis序列化配置" class="headerlink" title="2. Redis序列化配置"></a>2. Redis序列化配置</h3><ul><li><p>默认序列化</p><ul><li>Redis模板对象中会使用到的序列化：org.springframework.data.redis.core.RedisTemplate，默认的序列化是JDK</li></ul><p>  <img src="/images/redis_basics_beginners/chapter6/image6.png" alt="Untitled"></p></li><li><p>关于保存对象</p><p>  所有的对象，都需要序列化，不需要的会报如下错误</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObjectToRedisTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;小猪佩奇&quot;</span>);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    logger.info(<span class="string">&quot;user==&gt;&#123;&#125;&quot;</span>,redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="/images/redis_basics_beginners/chapter6/image7.png" alt="Untitled"></p></li><li><p><strong>自定义RedisTemplete</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.peppa.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自己定义了一个 RedisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        <span class="comment">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// String 的序列化</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>自定义RedisUtil</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.peppa.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSetAndTime</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lUpdateIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">remove</span> <span class="operator">=</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试RedisUtil</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisUtilTest</span><span class="params">()</span>&#123;</span><br><span class="line">    redisUtil.set(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;peppa&quot;</span>);</span><br><span class="line">    logger.info(<span class="string">&quot;userName===&gt;&#123;&#125;&quot;</span>,redisUtil.get(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/redis_basics_beginners/chapter6/image8.png" alt="Untitled"></p><p><img src="/images/redis_basics_beginners/chapter6/image9.png" alt="Untitled"></p>]]></content>
    
    
    <summary type="html">SpringBoot 操作数据，添加Spring Data下.Spring Data:  Spring 的一个子项目。用于简化数据库访问，支持**NoSQL**和**关系数据库存储**。其主要目标是使数据库的访问变得方便快捷。</summary>
    
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/tags/Redis/"/>
    
    <category term="Redis基础入门" scheme="https://yuanxw.github.io/tags/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础入门(五)Java连接开发工具Jedis</title>
    <link href="https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%BA%94)Java%E8%BF%9E%E6%8E%A5%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Jedis/"/>
    <id>https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%BA%94)Java%E8%BF%9E%E6%8E%A5%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Jedis/</id>
    <published>2023-04-04T16:00:00.000Z</published>
    <updated>2025-09-03T16:20:59.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基础入门-五-Java连接开发工具Jedis"><a href="#Redis基础入门-五-Java连接开发工具Jedis" class="headerlink" title="Redis基础入门(五)Java连接开发工具Jedis"></a>Redis基础入门(五)Java连接开发工具Jedis</h2><p>什么是Jedis 是 Redis 官方推荐的 java连接开发工具！ 使用Java 操作Redis 中间件！如果你要使用java操作redis，那么一定要对Jedis 十分的熟悉！</p><h3 id="1-新建Jedis项目"><a href="#1-新建Jedis项目" class="headerlink" title="1. 新建Jedis项目"></a>1. 新建Jedis项目</h3><p>创建<strong>peppa-jedis</strong>，引用相关jar包</p><p><img src="/images/redis_basics_beginners/chapter5/image.png" alt="Untitled"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jedis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.79<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--slf4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-alpha5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- logback --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0-alpha12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0-alpha12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-access<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0-alpha12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-PingTest测试连接"><a href="#2-PingTest测试连接" class="headerlink" title="2. PingTest测试连接"></a>2. PingTest测试连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.peppa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PingTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(PingTest.class);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.3.21&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.ping()==&gt;&#123;&#125;&quot;</span>,jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-StringTest字符"><a href="#3-StringTest字符" class="headerlink" title="3. StringTest字符"></a>3. StringTest字符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.peppa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.PUBLIC_MEMBER;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(StringTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">key</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.3.21&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;按索引查询：&#123;&#125;&quot;</span>, jedis.select(<span class="number">0</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;清空数据：&#123;&#125;&quot;</span>, jedis.flushDB());</span><br><span class="line">        logger.info(<span class="string">&quot;判断某个键是否存在：&#123;&#125;&quot;</span>, jedis.exists(<span class="string">&quot;username&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;新增&lt;&#x27;username&#x27;,&#x27;peppa&#x27;&gt;的键值对：&#123;&#125;&quot;</span>, jedis.set(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;peppa&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;新增&lt;&#x27;password&#x27;,&#x27;password&#x27;&gt;的键值对：&#123;&#125;&quot;</span>, jedis.set(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span> ));</span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span> );</span><br><span class="line">        logger.info(<span class="string">&quot;系统中所有的键如下：&#123;&#125;&quot;</span>, Arrays.toString(keys.toArray()));</span><br><span class="line">        logger.info(<span class="string">&quot;删除键password:&#123;&#125;&quot;</span>, jedis.del(<span class="string">&quot;password&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;判断键password是否存在：&#123;&#125;&quot;</span>, jedis.exists(<span class="string">&quot;password&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;查看键username所存储的值的类型:&#123;&#125;&quot;</span>, jedis.type(<span class="string">&quot;username&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;随机返回key空间的一个：&#123;&#125;&quot;</span>, jedis.randomKey());</span><br><span class="line">        logger.info(<span class="string">&quot;重命名key：&#123;&#125;&quot;</span>, jedis.rename(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;name&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;取出改后的name：&#123;&#125;&quot;</span>, jedis.get(<span class="string">&quot;name&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;删除当前选择数据库中的所有：&#123;&#125;&quot;</span>, jedis.flushDB());</span><br><span class="line">        logger.info(<span class="string">&quot;返回当前数据库中key的数目：&#123;&#125;&quot;</span>, jedis.dbSize());</span><br><span class="line">        logger.info(<span class="string">&quot;删除所有数据库中的所有key：&#123;&#125;&quot;</span>, jedis.flushAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">str</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.3.21&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        logger.info(<span class="string">&quot;==========增加数据=========&quot;</span> );</span><br><span class="line">        logger.info(jedis.set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;valuel&quot;</span> ));</span><br><span class="line">        logger.info(jedis.set(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span> ));</span><br><span class="line">        logger.info(jedis.set(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;删除键key2:&#123;&#125;&quot;</span>, jedis.del(<span class="string">&quot;key2&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;获取键key2:&#123;&#125;&quot;</span>, jedis.get(<span class="string">&quot;key2&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;修改key:&#123;&#125;&quot;</span>, jedis.set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;valueChanged&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;获取key1的值：&#123;&#125;&quot;</span>, jedis.get(<span class="string">&quot;key1&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;在key3后面加入值：&#123;&#125;&quot;</span>, jedis.append(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;End&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;key3的值：&quot;</span> + jedis.get(<span class="string">&quot;key3&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;增加多个键值对：&#123;&#125;&quot;</span>, jedis.mset(<span class="string">&quot;key01&quot;</span>, <span class="string">&quot;value02&quot;</span>, <span class="string">&quot;key02&quot;</span>, <span class="string">&quot;value02&quot;</span>, <span class="string">&quot;key03&quot;</span>, <span class="string">&quot;value03&quot;</span>, <span class="string">&quot;key04&quot;</span>, <span class="string">&quot;value04&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;获取多个键值对：&#123;&#125;&quot;</span>, jedis.mget(<span class="string">&quot;key01&quot;</span>, <span class="string">&quot;key02&quot;</span>, <span class="string">&quot;key03&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;获取多个键值对：&#123;&#125;&quot;</span>, jedis.mget(<span class="string">&quot;key01&quot;</span>, <span class="string">&quot;key02&quot;</span>, <span class="string">&quot;key03&quot;</span>, <span class="string">&quot;key04&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;删除多个键值对：&#123;&#125;&quot;</span>, jedis.del(<span class="string">&quot;key01&quot;</span>, <span class="string">&quot;key02&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;获取多个键值对：&#123;&#125;&quot;</span>, jedis.mget(<span class="string">&quot;key01&quot;</span>, <span class="string">&quot;key02&quot;</span>, <span class="string">&quot;key03&quot;</span> ));</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        logger.info(<span class="string">&quot;===========新增键值对防止覆盖筛先值=============&quot;</span> );</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.setnx():&#123;&#125;&quot;</span>, jedis.setnx(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.setnx():&#123;&#125;&quot;</span>, jedis.setnx(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.setnx():&#123;&#125;&quot;</span>, jedis.setnx(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2-new&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.get():&#123;&#125;&quot;</span>, jedis.get(<span class="string">&quot;key1&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.get():&#123;&#125;&quot;</span>, jedis.get(<span class="string">&quot;key2&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;=======新增键值对并设置有效时间=====&quot;</span> );</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.setex():&#123;&#125;&quot;</span>, jedis.setex(<span class="string">&quot;key3&quot;</span>, <span class="number">2</span>, <span class="string">&quot;value3&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.get(key3):&#123;&#125;&quot;</span>, jedis.get(<span class="string">&quot;key3&quot;</span> ));</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.get(key3):&#123;&#125;&quot;</span>, jedis.get(<span class="string">&quot;key3&quot;</span> ));</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;===========获取原值，更新为新值===========&quot;</span> );</span><br><span class="line">        logger.info(jedis.getSet(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;key2GetSet&quot;</span> ));</span><br><span class="line">        logger.info(jedis.get(<span class="string">&quot;key2&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;获得key2的值的字串：&#123;&#125;&quot;</span>, jedis.getrange(<span class="string">&quot;key2&quot;</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-ListTest列表"><a href="#4-ListTest列表" class="headerlink" title="4. ListTest列表"></a>4. <strong>ListTest列表</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.peppa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ListTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        logger.info(<span class="string">&quot;=======添加一个1ist===========&quot;</span> );</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;ArrayList&quot;</span>, <span class="string">&quot;Vector&quot;</span>, <span class="string">&quot;Stack&quot;</span>, <span class="string">&quot;HashMap&quot;</span>, <span class="string">&quot;WeakHashMap&quot;</span>, <span class="string">&quot;LinkedHashMap&quot;</span> );</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;HashSet&quot;</span> );</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;TreeSet&quot;</span> );</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;TreeMap&quot;</span> );</span><br><span class="line">        logger.info(<span class="string">&quot;collections的内容：&#123;&#125;&quot;</span> ,jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>)); <span class="comment">//-1代表倒数第一个元素，-2代表倒数第二个元素</span></span><br><span class="line">        logger.info(<span class="string">&quot;collections区间0-3的元素：&#123;&#125;&quot;</span> ,jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;=================================&quot;</span> );</span><br><span class="line">        <span class="comment">// 删除列表指定的值，第二个参数的个数（有重复时），后add进去的值先被删，类似于出栈</span></span><br><span class="line">        logger.info(<span class="string">&quot;删除指定元素个数：&#123;&#125;&quot;</span> ,jedis.lrem(<span class="string">&quot;collections&quot;</span>, <span class="number">2</span>, <span class="string">&quot;HashMap&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;collections的内容：&#123;&#125;&quot;</span> ,jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;删除下表0-3区间之外的元素：&#123;&#125;&quot;</span> ,jedis.ltrim(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;collections的内容：&#123;&#125;&quot;</span> ,jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;collections列表出栈（左端）：&#123;&#125;&quot;</span> ,jedis.lpop(<span class="string">&quot;collections&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;collections的内容：&#123;&#125;&quot;</span> ,jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;collections添加元素，从列表右端，与1push相对应：&#123;&#125;&quot;</span> ,jedis.rpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;EnumMap&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;collections的内容：&#123;&#125;&quot;</span> ,jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;collections3列表出栈（右端）：&#123;&#125;&quot;</span> ,jedis.rpop(<span class="string">&quot;collections&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;collections的内容：&#123;&#125;&quot;</span> ,jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;修改collections指定下标1的内容：&#123;&#125;&quot;</span> ,jedis.lset(<span class="string">&quot;collections&quot;</span>, <span class="number">1</span>, <span class="string">&quot;LinkedArrayList&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;collections的内容：&#123;&#125;&quot;</span> ,jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;=================================&quot;</span> );</span><br><span class="line">        logger.info(<span class="string">&quot;collections的长度：&#123;&#125;&quot;</span> ,jedis.llen(<span class="string">&quot;collections&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;获取collections下标为2的元素：&#123;&#125;&quot;</span> ,jedis.lindex(<span class="string">&quot;collections&quot;</span>, <span class="number">2</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;=================================&quot;</span> );</span><br><span class="line">        jedis.lpush(<span class="string">&quot;sortedList&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;4&quot;</span> );</span><br><span class="line">        logger.info(<span class="string">&quot;sortedList排序前：&#123;&#125;&quot;</span> ,jedis.lrange(<span class="string">&quot;sortedList&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.sort():&#123;&#125;&quot;</span>,jedis.sort(<span class="string">&quot;sortedList&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;sortedList排序后：&#123;&#125;&quot;</span> ,jedis.lrange(<span class="string">&quot;sortedList&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-SetTest集合"><a href="#5-SetTest集合" class="headerlink" title="5. SetTest集合"></a>5. SetTest集合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.peppa;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line">public class SetTest &#123;</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(SetTest.class);</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void <span class="function"><span class="title">set</span></span>() &#123;</span><br><span class="line">        Jedis jedis = new Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, 6379);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        logger.info(<span class="string">&quot;================向集合中添加元素（不重复）============&quot;</span> );</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.sadd():&#123;&#125;&quot;</span>,jedis.sadd(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e1&quot;</span>, <span class="string">&quot;e2&quot;</span>, <span class="string">&quot;e4&quot;</span>, <span class="string">&quot;e3&quot;</span>, <span class="string">&quot;e0&quot;</span>, <span class="string">&quot;e8&quot;</span>, <span class="string">&quot;e7&quot;</span>, <span class="string">&quot;e5&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.sadd():&#123;&#125;&quot;</span>,jedis.sadd(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e6&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.sadd():&#123;&#125;&quot;</span>,jedis.sadd(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e6&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet的所有元素为：&#123;&#125;&quot;</span> ,jedis.smembers(<span class="string">&quot;eleSet&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;删除一个元素e0：&#123;&#125;&quot;</span> ,jedis.srem(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e0&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet的所有元素为：&#123;&#125;&quot;</span> ,jedis.smembers(<span class="string">&quot;eleSet&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;删除两个元素e7和e6：&#123;&#125;&quot;</span> ,jedis.srem(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e7&quot;</span>, <span class="string">&quot;e6&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet的所有元素为：&#123;&#125;&quot;</span> ,jedis.smembers(<span class="string">&quot;eleSet&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;随机的移除集合中的一个元素：&#123;&#125;&quot;</span> ,jedis.spop(<span class="string">&quot;eleSet&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;随机的移除集合中的一个元素：&#123;&#125;&quot;</span> ,jedis.spop(<span class="string">&quot;eleSet&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet的所有元素为：&#123;&#125;&quot;</span> ,jedis.smembers(<span class="string">&quot;eleSet&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet中包含元素的个数：&#123;&#125;&quot;</span> ,jedis.scard(<span class="string">&quot;eleSet&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;e3是否在eleSet中：&#123;&#125;&quot;</span> ,jedis.sismember(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e3&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;e1是否在eleSet中：&#123;&#125;&quot;</span> ,jedis.sismember(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e1&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;e1是否在eleSet中：&#123;&#125;&quot;</span> ,jedis.sismember(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e5&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;=============================&quot;</span> );</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.sadd():&#123;&#125;&quot;</span>,jedis.sadd(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;e1&quot;</span>, <span class="string">&quot;e2&quot;</span>, <span class="string">&quot;e4&quot;</span>, <span class="string">&quot;e3&quot;</span>, <span class="string">&quot;e0&quot;</span>, <span class="string">&quot;e8&quot;</span>, <span class="string">&quot;e7&quot;</span>, <span class="string">&quot;e5&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;jedis.sadd():&#123;&#125;&quot;</span>,jedis.sadd(<span class="string">&quot;eleSet2&quot;</span>, <span class="string">&quot;e1&quot;</span>, <span class="string">&quot;e2&quot;</span>, <span class="string">&quot;e4&quot;</span>, <span class="string">&quot;e3&quot;</span>, <span class="string">&quot;e0&quot;</span>, <span class="string">&quot;e8&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;将eleSet1中删除e1并存入eleSet3中：&#123;&#125;&quot;</span> ,jedis.smove(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet3&quot;</span>, <span class="string">&quot;el&quot;</span> ));//移到集合元素 </span><br><span class="line">        logger.info(<span class="string">&quot;将eleSet1中删除e2并存入eleSet3中：&#123;&#125;&quot;</span> ,jedis.smove(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet3&quot;</span>, <span class="string">&quot;e2&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet1中的元素：&#123;&#125;&quot;</span> ,jedis.smembers(<span class="string">&quot;eleSet1&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet3中的元素：&#123;&#125;&quot;</span> ,jedis.smembers(<span class="string">&quot;eleSet3&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;=================集合运算================&quot;</span> );</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet1中的元素：&#123;&#125;&quot;</span> ,jedis.smembers(<span class="string">&quot;eleSet1&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet2中的元素：&#123;&#125;&quot;</span> ,jedis.smembers(<span class="string">&quot;eleSet2&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet1和eleSet2的交集：&#123;&#125;&quot;</span> ,jedis.sinter(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet2&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet1和eleSet2的并集：&#123;&#125;&quot;</span> ,jedis.sunion(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet2&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet1和eleSet2的差集:&quot;</span> + jedis.sdiff(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet2&quot;</span> ));//eLeSet1中有，eLeSet2中没有</span><br><span class="line">        jedis.sinterstore( <span class="string">&quot;eleSet4&quot;</span>, <span class="string">&quot;eleSet1&quot;</span>,<span class="string">&quot;eleSet2&quot;</span>);//求交集并将交集保</span><br><span class="line">        logger.info(<span class="string">&quot;eleSet4中的元素：&#123;&#125;&quot;</span>,jedis.smembers(<span class="string">&quot;eleSet4&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-TestHash"><a href="#6-TestHash" class="headerlink" title="6. TestHash"></a>6. TestHash</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.peppa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestHash</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ListTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span> );</span><br><span class="line">        map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span> );</span><br><span class="line">        map.put(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span> );</span><br><span class="line">        map.put(<span class="string">&quot;key4&quot;</span>, <span class="string">&quot;value4&quot;</span> );</span><br><span class="line">        <span class="comment">//添加名称为hash（key）的hash元素</span></span><br><span class="line">        jedis.hmset(<span class="string">&quot;hash&quot;</span>, map);</span><br><span class="line">        <span class="comment">//名称为hash的hash中添加Rey 为key5，vaLue为vatue5元素</span></span><br><span class="line">        jedis.hset(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key5&quot;</span>, <span class="string">&quot;value5&quot;</span> );</span><br><span class="line">        logger.info(<span class="string">&quot;散列hash的所有键值对为：&#123;&#125;&quot;</span> ,jedis.hgetAll(<span class="string">&quot;hash&quot;</span> )); <span class="comment">//return Map&lt;s</span></span><br><span class="line">        logger.info(<span class="string">&quot;散列hash的所有键为：&#123;&#125;&quot;</span> ,jedis.hkeys(<span class="string">&quot;hash&quot;</span> )); <span class="comment">//return Set&lt;String&gt;</span></span><br><span class="line">        logger.info(<span class="string">&quot;散列hash的所有值为：&#123;&#125;&quot;</span> ,jedis.hvals(<span class="string">&quot;hash&quot;</span> )); <span class="comment">//return List&lt;String</span></span><br><span class="line">        logger.info(<span class="string">&quot;将key6保存的值加上一个整数，如果key6不存在则添加key6：&#123;&#125;&quot;</span> ,jedis.hincrBy(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key6&quot;</span>, <span class="number">5</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;散列hash的所有键值对为：&#123;&#125;&quot;</span> ,jedis.hgetAll(<span class="string">&quot;hash&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;将key6保存的值加上一个整数，如果key6不存在则添加key6：&#123;&#125;&quot;</span> ,jedis.hincrBy(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key6&quot;</span>, <span class="number">10</span>));</span><br><span class="line">        logger.info(<span class="string">&quot;散列hash的所有键值对为：&#123;&#125;&quot;</span> ,jedis.hgetAll(<span class="string">&quot;hash&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;删除一个或者多个键值对：&#123;&#125;&quot;</span> ,jedis.hdel(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key2&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;散列hash的所有键值对为：&#123;&#125;&quot;</span> ,jedis.hgetAll(<span class="string">&quot;hash&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;散列hash中键值对的个数： &quot;</span> + jedis.hlen(<span class="string">&quot;hash&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;判断hash中是否存在key2：&#123;&#125;&quot;</span> ,jedis.hexists(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key2&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;判断hash中是否存在key3：&#123;&#125;&quot;</span> ,jedis.hexists(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key3&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;获取hash中的值：&#123;&#125;&quot;</span> ,jedis.hmget(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key3&quot;</span> ));</span><br><span class="line">        logger.info(<span class="string">&quot;获取hash中的值：&#123;&#125;&quot;</span> ,jedis.hmget(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key3&quot;</span>, <span class="string">&quot;key4&quot;</span> ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-TransactionTest（事务）"><a href="#7-TransactionTest（事务）" class="headerlink" title="7. TransactionTest（事务）"></a>7. TransactionTest（事务）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.peppa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ListTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transaction</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> jsonObject.toJSONString();</span><br><span class="line">        multi.set(<span class="string">&quot;user1&quot;</span>,jsonStr);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 代码抛出异常，执行失败</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 执行事务</span></span><br><span class="line">            multi.exec();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">            logger.error(ex.getMessage(),ex);</span><br><span class="line">            multi.discard(); <span class="comment">// 放弃事务</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭连接</span></span><br><span class="line">            jedis.close();</span><br><span class="line">            logger.info(<span class="string">&quot;jsonStr:&#123;&#125;&quot;</span>,jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">什么是Jedis 是 Redis 官方推荐的 java连接开发工具！ 使用Java 操作Redis 中间件！如果你要使用java操作redis，那么一定要对Jedis 十分的熟悉！</summary>
    
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/tags/Redis/"/>
    
    <category term="Redis基础入门" scheme="https://yuanxw.github.io/tags/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础入门(四)Redis 事务操作</title>
    <link href="https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E5%9B%9B)Redis%20%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/"/>
    <id>https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E5%9B%9B)Redis%20%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/</id>
    <published>2023-04-03T16:00:00.000Z</published>
    <updated>2025-09-03T16:21:12.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基础入门-四-Redis-事务操作"><a href="#Redis基础入门-四-Redis-事务操作" class="headerlink" title="Redis基础入门(四)Redis 事务操作"></a>Redis基础入门(四)Redis 事务操作</h2><h3 id="1-事务"><a href="#1-事务" class="headerlink" title="1. 事务"></a>1. 事务</h3><p>Redis 事务本质：一组命令的集合！ 一个事务中的所有命令都会被序列化，在事务执行过程的中，会按照顺序执行！<br>一次性、顺序性、排他性！执行一些列的命令！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">----- 队列 <span class="built_in">set</span> <span class="built_in">set</span> <span class="built_in">set</span> 执行----—</span><br></pre></td></tr></table></figure><p><strong>Redis事务没有没有隔离级别的概念！</strong><br>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！Exec<br><strong>Redis单条命令式保存原子性的，但是事务不保证原子性！</strong></p><ul><li><p><strong>Redis的事务：</strong></p><ul><li>开启事务（multi）</li><li>命令入队（……）</li><li>执行事务（exec）</li></ul></li><li><p><strong>正常执行事务</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 命令入队</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">4) OK</span><br></pre></td></tr></table></figure><ul><li><strong>放弃事务</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD <span class="comment"># 取消事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4 <span class="comment"># 事务队列中命令都不会被执行！</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><ul><li><strong>编译型异常</strong>（代码有问题！ 命令有错！） ，事务中所有的命令都不会被执行！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3 <span class="comment"># 错误的命令</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k5 v5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 执行事务报错！</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k5 <span class="comment"># 所有的命令都不会被执行！</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><ul><li>运行时异常（1&#x2F;0）， 如果事务队列中存在语法性，那么执行命令的时候，其他命令是可以正常执行的，错误命令抛出异常！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 <span class="string">&quot;v1&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1 <span class="comment"># 会执行的时候失败！</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (error) ERR value is not an <span class="built_in">integer</span> or out of range <span class="comment"># 虽然第一条命令报错了，但是依旧正常执行成功了！</span></span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br><span class="line">4) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line"><span class="string">&quot;v2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line"><span class="string">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>监控！ Watch （面试常问！）</strong></p><ol><li><strong>悲观锁：</strong><code>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</code></li><li><strong>乐观锁：</strong></li></ol><ul><li>很乐观，认为什么时候都不会出问题，所以不会上锁！ 更新数据的时候去判断一下，在此期间是否有人修改过这个数据，</li><li>获取version</li><li>更新的时候比较 version</li></ul></li><li><p><strong>Redis测监视测试</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># 监视 money 对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功！</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY out 20</span><br><span class="line">QUEUED</span><br><span class="line">**127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure><ul><li>测试多线程修改值 , 使用watch 可以当做redis的乐观锁操作！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># 监视 money</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY out 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 执行之前，另外一个线程，修改了我们的值，这个时候，就会导致事务执行失败！</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><ul><li>如果修改失败，获取最新的值就好</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; UNWATCH</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; DECRBY money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCRBY out 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 70</span><br><span class="line">2) (<span class="built_in">integer</span>) 30</span><br></pre></td></tr></table></figure><p><img src="/images/redis_basics_beginners/chapter4/image.png" alt="Untitled"></p>]]></content>
    
    
    <summary type="html">Redis 事务本质：一组命令的集合！ 一个事务中的所有命令都会被序列化，在事务执行过程的中，会按照顺序执行！一次性、顺序性、排他性！执行一些列的命令！</summary>
    
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/tags/Redis/"/>
    
    <category term="Redis基础入门" scheme="https://yuanxw.github.io/tags/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础入门(三)三种特殊数据类型</title>
    <link href="https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%B8%89)%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%B8%89)%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-04-02T16:00:00.000Z</published>
    <updated>2025-09-03T16:22:07.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基础入门-三-三种特殊数据类型"><a href="#Redis基础入门-三-三种特殊数据类型" class="headerlink" title="Redis基础入门(三)三种特殊数据类型"></a>Redis基础入门(三)三种特殊数据类型</h2><h3 id="1-Geospatial-地理位置"><a href="#1-Geospatial-地理位置" class="headerlink" title="1. Geospatial 地理位置"></a>1. Geospatial 地理位置</h3><ul><li><p>朋友的定位，附近的人，打车距离计算？</p><ul><li>Redis 的 Geo 在Redis3.2 版本就推出了！ 这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人！可以查询一些测试数据：<a href="http://www.jsons.cn/lngcodeinfo/0706D99C19A781A3/">http://www.jsons.cn/lngcodeinfo/0706D99C19A781A3/</a></li></ul><p>  <img src="/Untitled.png" alt="Untitled"></p></li></ul><p>官方文档：<a href="https://www.redis.net.cn/order/3685.html">https://www.redis.net.cn/order/3685.html</a></p><ul><li><strong>getadd 添加地理位置</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># getadd 添加地理位置</span></span><br><span class="line"><span class="comment"># 规则：两级无法直接添加，我们一般会下载城市数据，直接通过java程序一次性导入！</span></span><br><span class="line"><span class="comment"># 有效的经度从-180度到180度。</span></span><br><span class="line"><span class="comment"># 有效的纬度从-85.05112878度到85.05112878度。</span></span><br><span class="line"><span class="comment"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span></span><br><span class="line"><span class="comment"># 127.0.0.1:6379&gt; geoadd china:city 39.90 116.40 beijin</span></span><br><span class="line">(error) ERR invalid longitude,latitude pair 39.900000,116.400000</span><br><span class="line"><span class="comment"># 参数 key 值（）</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shengzhen</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26 xian</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><ul><li><strong>getpos获得当前定位：一定是一个坐标值！</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOPOS china:city beijing <span class="comment"># 获取指定的城市的经度和纬度！</span></span><br><span class="line">1) 1) <span class="string">&quot;116.39999896287918091&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.90000009167092543&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEOPOS china:city beijing chongqing</span><br><span class="line">1) 1) <span class="string">&quot;116.39999896287918091&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.90000009167092543&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">   2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>GEODIST 两人之间的距离</strong></p><ul><li>单位：<br>  m 表示单位为米。<br>  km 表示单位为千米。<br>  mi 表示单位为英里。<br>  ft 表示单位为英尺。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEODIST china:city beijing shanghai km <span class="comment"># 查看上海到北京的直线距离</span></span><br><span class="line"><span class="string">&quot;1067.3788&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEODIST china:city beijing chongqing km <span class="comment"># 查看重庆到北京的直线距离</span></span><br><span class="line"><span class="string">&quot;1464.0708&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>georadius 以给定的经纬度为中心， 找出某一半径内的元素</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 1000 km <span class="comment"># 以110，30 这个经纬度为中心，寻找方圆1000km内的城市</span></span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shengzhen&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist <span class="comment"># 显示到中间距离的位置</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) <span class="string">&quot;341.9374&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) <span class="string">&quot;483.8340&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord <span class="comment"># 显示他人的定位信息</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;108.96000176668167114&quot;</span></span><br><span class="line">      2) <span class="string">&quot;34.25999964418929977&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 1 <span class="comment"># 筛选出指定的结果！</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) <span class="string">&quot;341.9374&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 2</span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) <span class="string">&quot;341.9374&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) <span class="string">&quot;483.8340&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;108.96000176668167114&quot;</span></span><br><span class="line">      2) <span class="string">&quot;34.25999964418929977&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>GEORADIUSBYMEMBER  找出位于指定元素周围的其他元素！</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijing 1000 km</span><br><span class="line">1) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city shanghai 400 km</span><br><span class="line">1) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">2) <span class="string">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>GEOHASH 命令 - 返回一个或多个位置元素的 Geohash 表示</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geohash china:city beijing chongqing <span class="comment"># 将二维的经纬度转换为一维的字符串，如果两个字符串越接近，那么则距离越近！</span></span><br><span class="line">1) <span class="string">&quot;wx4fbxxfke0&quot;</span></span><br><span class="line">2) <span class="string">&quot;wm5xzrybty0&quot;</span></span><br></pre></td></tr></table></figure><ul><li>GEO 底层的实现原理其实就是 Zset！我们可以使用Zset命令来操作geo！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE china:city 0 -1 <span class="comment"># 查看地图中全部的元素</span></span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shengzhen&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">5) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">6) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem china:city beijing <span class="comment"># 移除指定元素！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE china:city 0 -1</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shengzhen&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">5) <span class="string">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h3><ul><li><strong>什么是基数？</strong></li></ul><p>基数（不重复的元素） &#x3D; 5，可以接受误差！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A &#123;1,3,5,7,8,7&#125;</span><br><span class="line">B &#123;1,3,5,7,8&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>简介</strong></p><p>  Redis 2.8.9 版本就更新了 Hyperloglog 数据结构！<br>  Redis Hyperloglog 基数统计的算法！</p></li><li><p><strong>网页的 UV （一个人访问一个网站多次，但是还是算作一个人！）</strong></p><p>  传统的方式， set 保存用户的id，然后就可以统计 set 中的元素数量作为标准判断 !<br>  这个方式如果保存大量的用户id，就会比较麻烦！我们的目的是为了计数，而不是保存用户id；<br>  0.81% 错误率！ 统计UV任务，可以忽略不计的！</p><ul><li><p>测试使用</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFadd mykey a b c d e f g h i j <span class="comment"># 创建第一组元素 mykey</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT mykey <span class="comment"># 统计 mykey 元素的基数数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; PFadd mykey2 i j z x c v b n m <span class="comment"># 创建第二组元素 mykey2</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT mykey2</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE mykey3 mykey mykey2 <span class="comment"># 合并两组 mykey mykey2 =&gt; mykey3 并集</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT mykey3 <span class="comment"># 看并集的数量！</span></span><br><span class="line">(<span class="built_in">integer</span>) 15</span><br></pre></td></tr></table></figure></li></ul><p>  如果允许容错，那么一定可以使用 Hyperloglog ！<br>  如果不允许容错，就使用 set 或者自己的数据类型即可！</p></li></ul><h3 id="Bitmap-位存储"><a href="#Bitmap-位存储" class="headerlink" title="Bitmap 位存储"></a>Bitmap 位存储</h3><p>统计用户信息，活跃，不活跃！ 登录 、 未登录！ 打卡，365打卡！ 两个状态的，都可以使用<br>Bitmaps！<br>Bitmap 位图，数据结构！ 都是操作二进制位来进行记录，就只有0 和 1 两个状态！<br>365 天 &#x3D; 365 bit 1字节 &#x3D; 8bit 46 个字节左右！</p><ul><li><strong>使用bitmap 来记录 周一到周日的打卡！</strong><br>周一：1 周二：0 周三：0 周四：1 ……</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit sign 0 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 1 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 5 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 6 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 3 <span class="comment"># 查看某一天是否有打卡！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 6</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; bitcount sign <span class="comment"># 统计这周的打卡记录，就可以看到是否有全勤！</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">朋友的定位，附近的人，打车距离计算？Redis 的 Geo 在Redis3.2 版本就推出了！ 这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人！可以查询一些测试数据</summary>
    
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/tags/Redis/"/>
    
    <category term="Redis基础入门" scheme="https://yuanxw.github.io/tags/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础入门(二)五大数据类型</title>
    <link href="https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%BA%8C)%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%BA%8C)%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-04-01T16:00:00.000Z</published>
    <updated>2025-09-03T16:17:04.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基础入门-二-五大数据类型"><a href="#Redis基础入门-二-五大数据类型" class="headerlink" title="Redis基础入门(二)五大数据类型"></a>Redis基础入门(二)五大数据类型</h2><h3 id="1-官网文档"><a href="#1-官网文档" class="headerlink" title="1. 官网文档"></a>1. 官网文档</h3><p><img src="/images/redis_basics_beginners/chapter2/image.png" alt="Untitled"></p><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）。</p><h3 id="2-Redis-Key"><a href="#2-Redis-Key" class="headerlink" title="2. Redis-Key"></a>2. Redis-Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys * <span class="comment"># 查看所有的key</span></span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name     yuanxw <span class="comment"># set key</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS name <span class="comment"># 判断当前的key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS name1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; move name 1 <span class="comment"># 移除当前的key</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name beijing</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; clear</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;beijing&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EXPIRE name 10 <span class="comment"># 设置key的过期时间，单位是秒</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name <span class="comment"># 查看当前key的剩余时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name <span class="comment"># 查看当前key的一个类型！</span></span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> age</span><br><span class="line">string</span><br></pre></td></tr></table></figure><p>后面如果遇到不会的命令，可以在官网查看帮助文档！</p><p><img src="/images/redis_basics_beginners/chapter2/image1.png" alt="Untitled"></p><h3 id="3-String（字符串）"><a href="#3-String（字符串）" class="headerlink" title="3. String（字符串）"></a>3. String（字符串）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 v1 <span class="comment"># 设置值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1 <span class="comment"># 获得值</span></span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment"># 获得所有的key</span></span><br><span class="line">1) <span class="string">&quot;key1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS key1 <span class="comment"># 判断某一个key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; APPEND key1 <span class="string">&quot;hello&quot;</span> <span class="comment"># 追加字符串，如果当前key不存在，就相当于setkey</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; STRLEN key1 <span class="comment"># 获取字符串的长度！</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; APPEND key1 <span class="string">&quot;,peppa&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; STRLEN key1</span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1hello,peppa&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"><span class="comment"># i++</span></span><br><span class="line"><span class="comment"># 步长 i+=</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> views 0 <span class="comment"># 初始浏览量为0</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incr views <span class="comment"># 自增1 浏览量变为1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; incr views</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decr views <span class="comment"># 自减1 浏览量-1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; decr views</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; decr views</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;-1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; INCRBY views 10 <span class="comment"># 可以设置步长，指定增量！</span></span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; INCRBY views 10</span><br><span class="line">(<span class="built_in">integer</span>) 19</span><br><span class="line">127.0.0.1:6379&gt; DECRBY views 5</span><br><span class="line"></span><br><span class="line">(<span class="built_in">integer</span>) 14</span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"><span class="comment"># 字符串范围 range</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">&quot;hello,peppa&quot;</span> <span class="comment"># 设置 key1 的值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello,peppa&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 3 <span class="comment"># 截取字符串 [0,3]</span></span><br><span class="line"><span class="string">&quot;hell&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 -1 <span class="comment"># 获取全部的字符串 和 get key是一样的</span></span><br><span class="line"><span class="string">&quot;hello,peppa&quot;</span></span><br><span class="line"><span class="comment"># 替换！</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key2 abcdefg</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SETRANGE key2 1 xx <span class="comment"># 替换指定位置开始的字符串！</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;axxdefg&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"><span class="comment"># setex (set with expire) # 设置过期时间</span></span><br><span class="line"><span class="comment"># setnx (set if not exist) # 不存在在设置 （在分布式锁中会常常使用！）</span></span><br><span class="line">127.0.0.1:6379&gt; setex key3 30 <span class="string">&quot;hello&quot;</span> <span class="comment"># 设置key3 的值为 hello,30秒后过期</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl key3</span><br><span class="line">(<span class="built_in">integer</span>) 26</span><br><span class="line">127.0.0.1:6379&gt; get key3</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">&quot;redis&quot;</span> <span class="comment"># 如果mykey 不存在，创建mykey</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;key2&quot;</span></span><br><span class="line">2) <span class="string">&quot;mykey&quot;</span></span><br><span class="line">3) <span class="string">&quot;key1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ttl key3</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">&quot;MongoDB&quot;</span> <span class="comment"># 如果mykey存在，创建失败！</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">mset</span><br><span class="line">mget</span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 <span class="comment"># 同时设置多个值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k1&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3 <span class="comment"># 同时获取多个值</span></span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4 <span class="comment"># msetnx 是一个原子性的操作，要么一起成功，要么一起失败！</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil)</span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="built_in">set</span> user:1 &#123;name:zhangsan,age:3&#125; <span class="comment"># 设置一个user:1 对象 值为 json字符来保存一个对象！</span></span><br><span class="line"><span class="comment"># 这里的key是一个巧妙的设计： user:&#123;id&#125;:&#123;filed&#125; , 如此设计在Redis中是完全OK了！</span></span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">getset <span class="comment"># 先get然后在set</span></span><br><span class="line">127.0.0.1:6379&gt; getset db redis <span class="comment"># 如果不存在值，则返回 nil</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getset db mongodb <span class="comment"># 如果存在值，获取原来的值，并设置新的值</span></span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;mongodb&quot;</span></span><br></pre></td></tr></table></figure><p>数据结构是相同的！<br>String类似的使用场景：value除了是我们的字符串还可以是我们的数字！</p><ul><li>计数器</li><li>统计多单位的数量</li><li>粉丝数</li><li>对象缓存存储！</li></ul><p><strong>List（列表）</strong><br>基本的数据类型：列表</p><p>在redis里面，我们可以把list玩成 ，栈、队列、阻塞队列！所有的list命令都是用l开头的，Redis不区分大小命令</p><p><img src="/images/redis_basics_beginners/chapter2/image2.png" alt="Untitled"></p><p>在redis里面，我们可以把list玩成 ，栈、队列、阻塞队列！所有的list命令都是用l开头的，Redis不区分大小命令</p><p><img src="/images/redis_basics_beginners/chapter2/image3.png" alt="Untitled"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list one <span class="comment"># 将一个值或者多个值，插入到列表头部 （左）</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1 <span class="comment"># 获取list中值！</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 1 <span class="comment"># 通过区间获取具体的值！</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Rpush list righr <span class="comment"># 将一个值或者多个值，插入到列表位部 （右）</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;righr&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">LPOP</span><br><span class="line">RPOP</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;righr&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lpop list <span class="comment"># 移除list的第一个元素</span></span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Rpop list <span class="comment"># 移除list的最后一个元素</span></span><br><span class="line"><span class="string">&quot;righr&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">Lindex</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lindex list 1 <span class="comment"># 通过下标获得 list 中的某一个值！</span></span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lindex list 0</span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">Llen</span><br><span class="line">127.0.0.1:6379&gt; Lpush list one</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; Lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; Lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; Llen list <span class="comment"># 返回列表的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; Lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">移除指定的值！</span><br><span class="line">取关 uid</span><br><span class="line">Lrem</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 one <span class="comment"># 移除list集合中指定个数的value，精确匹配</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 three</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 three</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">trim 修剪；list 截断!</span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; Rpush mylist <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; Rpush mylist <span class="string">&quot;hello1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; Rpush mylist <span class="string">&quot;hello2&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; Rpush mylist <span class="string">&quot;hello3&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ltrim mylist 1 2 <span class="comment"># 通过下标截取指定的长度，这个list已经被改变了，截断了</span></span><br><span class="line">只剩下截取的元素！</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">rpoplpush <span class="comment"># 移除列表的最后一个元素，将他移动到新的列表中！</span></span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist <span class="string">&quot;hello1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist <span class="string">&quot;hello2&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush mylist myotherlist <span class="comment"># 移除列表的最后一个元素，将他移动到新的列表中！</span></span><br><span class="line"><span class="string">&quot;hello2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1 <span class="comment"># 查看原来的列表</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange myotherlist 0 -1 <span class="comment"># 查看目标列表中，确实存在改值！</span></span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">lset 将列表中指定下标的值替换为另外一个值，更新操作</span><br><span class="line">127.0.0.1:6379&gt; EXISTS list <span class="comment"># 判断这个列表是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item <span class="comment"># 如果不存在列表我们去更新就会报错</span></span><br><span class="line">(error) ERR no such key</span><br><span class="line">127.0.0.1:6379&gt; lpush list value1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class="line">1) <span class="string">&quot;value1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item <span class="comment"># 如果存在，更新当前下标的值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class="line">1) <span class="string">&quot;item&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 1 other <span class="comment"># 如果不存在，则会报错！</span></span><br><span class="line">(error) ERR index out of range</span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">linsert <span class="comment"># 将某个具体的value插入到列把你中某个元素的前面或者后面！</span></span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; Rpush mylist <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; Rpush mylist <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist before <span class="string">&quot;world&quot;</span> <span class="string">&quot;other&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist after world new</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">4) <span class="string">&quot;new&quot;</span></span><br></pre></td></tr></table></figure><p>小结：</p><ul><li>list实际上是一个链表，before Node after ， left，right 都可以插入值。</li><li>如果key 不存在，创建新的链表。如果key存在，新增内容</li><li>如果key存在，新增内容</li><li>在两边插入或者改动值，效率最高！ 中间元素，相对来说效率会低一点~</li><li>消息排队！消息队列 （Lpush Rpop）， 栈（ Lpush Lpop）！</li></ul><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>set中的值是不能重读的！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;hello&quot;</span> <span class="comment"># set集合中添加匀速</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;peppa&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;lovepeppa&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset <span class="comment"># 查看指定set的所有值</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;lovepeppa&quot;</span></span><br><span class="line">3) <span class="string">&quot;peppa&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset hello <span class="comment"># 判断某一个值是不是在set集合中！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset world</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; scard myset <span class="comment"># 获取set集合中的内容元素个数！</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">rem</span><br><span class="line">127.0.0.1:6379&gt; srem myset hello <span class="comment"># 移除set集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; scard myset</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">2) <span class="string">&quot;lovepeppa&quot;</span></span><br><span class="line">3) <span class="string">&quot;peppa&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"><span class="built_in">set</span> 无序不重复集合。抽随机！</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;lovepeppa2&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;lovepeppa2&quot;</span></span><br><span class="line">2) <span class="string">&quot;peppa&quot;</span></span><br><span class="line">3) <span class="string">&quot;lovepeppa&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset <span class="comment"># 随机抽选出一个元素</span></span><br><span class="line"><span class="string">&quot;peppa&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">&quot;peppa&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">&quot;peppa&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">&quot;peppa&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2 <span class="comment"># 随机抽选出指定个数的元素</span></span><br><span class="line">1) <span class="string">&quot;lovepeppa&quot;</span></span><br><span class="line">2) <span class="string">&quot;lovepeppa2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2</span><br><span class="line">1) <span class="string">&quot;lovepeppa&quot;</span></span><br><span class="line">2) <span class="string">&quot;lovepeppa2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset <span class="comment"># 随机抽选出一个元素</span></span><br><span class="line"><span class="string">&quot;lovepeppa2&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">删除定的key，随机删除key！</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;lovepeppa2&quot;</span></span><br><span class="line">2) <span class="string">&quot;lovepeppa&quot;</span></span><br><span class="line">3) <span class="string">&quot;peppa&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset <span class="comment"># 随机删除一些set集合中的元素！</span></span><br><span class="line"><span class="string">&quot;lovepeppa2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line"><span class="string">&quot;lovepeppa&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;peppa&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">将一个指定的值，移动到另外一个<span class="built_in">set</span>集合！</span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;peppa&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 <span class="string">&quot;set2&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 <span class="string">&quot;peppa&quot;</span> <span class="comment"># 将一个指定的值，移动到另外一个set集合！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset2</span><br><span class="line">1) <span class="string">&quot;peppa&quot;</span></span><br><span class="line">2) <span class="string">&quot;set2&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">微博，微信朋友圈，共同关注！(并集)</span><br><span class="line">数字集合类：</span><br><span class="line">- 差集 SDIFF</span><br><span class="line">- 交集</span><br><span class="line">- 并集</span><br><span class="line">127.0.0.1:6379&gt; FLUSHALL</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; sadd key1 a  b c </span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 c  d  e </span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; SDIFF key1 key2 <span class="comment"># 差集</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SINTER key1 key2 <span class="comment"># 交集 共同好友就可以这样实现</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SUNION key1 key2 <span class="comment"># 并集</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;e&quot;</span></span><br><span class="line">4) <span class="string">&quot;a&quot;</span></span><br><span class="line">5) <span class="string">&quot;d&quot;</span></span><br></pre></td></tr></table></figure><p>微博，A用户将所有关注的人放在一个set集合中！将它的粉丝也放在一个集合中！<br>共同关注，共同爱好，二度好友，推荐好友！（六度分割理论）</p><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><p>Map集合，key-map! 时候这个值是一个map集合！ 本质和String类型没有太大区别，还是一个简单的<br>key-vlaue！<br>set myhash field peppa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hset myhash field1 peppa <span class="comment"># set一个具体 key-vlaue</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field1 <span class="comment"># 获取一个字段值</span></span><br><span class="line"><span class="string">&quot;peppa&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world <span class="comment"># set多个 key-vlaue</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget myhash field1 field2 <span class="comment"># 获取多个字段值</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash <span class="comment"># 获取全部的数据，</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash field1 <span class="comment"># 删除hash指定key字段！对应的value值也就消失了！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">hlen</span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGETALL myhash</span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">3) <span class="string">&quot;field1&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash <span class="comment"># 获取hash表的字段数量！</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash field1 <span class="comment"># 判断hash中指定字段是否存在！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash field3</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"><span class="comment"># 只获得所有field</span></span><br><span class="line"><span class="comment"># 只获得所有value</span></span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash <span class="comment"># 只获得所有field</span></span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;field1&quot;</span></span><br></pre></td></tr></table></figure><p>hash变更的数据 user name age,尤其是是用户信息之类的，经常变动的信息！ hash 更适合于对象的<br>存储，String更加适合字符串存储！</p><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><p>在set的基础上，增加了一个值，set k1 v1 zset k1 score1 v1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">27.0.0.1:6379&gt; zadd myset 1 one <span class="comment"># 添加一个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 two 3 three <span class="comment"># 添加多个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">排序如何实现</span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2500 zhangsan <span class="comment"># 添加三个用户</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 5000 lisi</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 500 wangwu</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># ZRANGEBYSCORE key min max</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf <span class="comment"># 显示全部的用户 从小到大！</span></span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">3) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 <span class="comment"># 从大到进行排序！</span></span><br><span class="line">1) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">3) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores <span class="comment"># 显示全部的用户并且附带成绩</span></span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">4) <span class="string">&quot;2500&quot;</span></span><br><span class="line">5) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">6) <span class="string">&quot;5000&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 2500 withscores <span class="comment"># # 显示工资小于2500员工的升序排序！</span></span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">4) <span class="string">&quot;2500&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"><span class="comment"># 移除rem中的元素</span></span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">3) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem salary zhangsan <span class="comment"># 移除有序集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">2) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zcard salary <span class="comment"># 获取有序集合中的个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 1 hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 world 3 peppa</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zcount myset 1 3 <span class="comment"># 获取指定区间的成员数量！</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zcount myset 1 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><p>其它更多的API，查询官方文档：<a href="https://redis.io/commands">Command reference – Redis</a></p><p>案例思路：set 排序 存储班级成绩表，工资表排序！<br>普通消息，1， 重要消息 2，带权重进行判断！<br>排行榜应用实现，取Top N 测试！</p>]]></content>
    
    
    <summary type="html">Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构</summary>
    
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/tags/Redis/"/>
    
    <category term="Redis基础入门" scheme="https://yuanxw.github.io/tags/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis(一)认识Redis</title>
    <link href="https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%B8%80)%E8%AE%A4%E8%AF%86Redis%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>https://yuanxw.github.io/Redis/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8(%E4%B8%80)%E8%AE%A4%E8%AF%86Redis%E4%B8%AD%E9%97%B4%E4%BB%B6/</id>
    <published>2023-03-31T16:00:00.000Z</published>
    <updated>2025-09-03T16:10:24.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis-一-认识Redis"><a href="#Redis-一-认识Redis" class="headerlink" title="Redis(一)认识Redis"></a>Redis(一)认识Redis</h2><h3 id="1-Redis-是什么？"><a href="#1-Redis-是什么？" class="headerlink" title="1. Redis 是什么？"></a>1. Redis 是什么？</h3><p>Redis（Remote Dictionary Server )，即远程字典服务 !<br>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。免费和开源！是当下最热门的 NoSQL 技术之一！也被人们称之为结构化数据库！</p><p><img src="/images/redis_basics_beginners/chapter1/image.png" alt="Untitled"></p><h3 id="2-Redis-能干嘛？"><a href="#2-Redis-能干嘛？" class="headerlink" title="2. Redis 能干嘛？"></a>2. Redis 能干嘛？</h3><p>google guava提供两种方式：</p><ul><li>内存存储、持久化，内存中是断电即失、所以说持久化很重要（rdb、aof）</li><li>效率高，可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器（浏览量！）<br>……..</li></ul><h3 id="3-特性"><a href="#3-特性" class="headerlink" title="3. 特性"></a>3. 特性</h3><ul><li>多样的数据类型</li><li>持久化</li><li>集群</li><li>事务</li></ul><h3 id="4-Redis安装"><a href="#4-Redis安装" class="headerlink" title="4. Redis安装"></a>4. Redis安装</h3><ul><li><p><strong>Windows安装</strong></p><ol><li>下载安装包：<a href="https://github.com/microsoftarchive/redis/releases/">Releases · microsoftarchive&#x2F;redis · GitHub</a></li><li>下载完毕得到压缩包：</li></ol><p>  <img src="/images/redis_basics_beginners/chapter1/image1.png" alt="Untitled"></p><ol><li>解压到自己电脑上的环境目录下的就可以的！Redis 十分的小，只有5M</li></ol><p>  <img src="/images/redis_basics_beginners/chapter1/image2.png" alt="Untitled"></p><ol><li>开启Redis，双击运行服务即可！</li></ol><p>  <img src="/images/redis_basics_beginners/chapter1/image3.png" alt="Untitled"></p><ol><li>使用Redis客户单连接redis</li></ol><p>  <img src="/images/redis_basics_beginners/chapter1/image4.png" alt="Untitled"></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name yuanxw</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;yuanxw&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>  <img src="/images/redis_basics_beginners/chapter1/image5.png" alt="Untitled"></p></li></ul><p><strong>4.2 Linux安装</strong></p><ol><li>下载安装包：wget <a href="https://download.redis.io/releases/redis-6.2.6.tar.gz">https://download.redis.io/releases/redis-6.2.6.tar.gz</a></li><li>解压Redis的安装包</li></ol><p><img src="/images/redis_basics_beginners/chapter1/image6.png" alt="Untitled"></p><ol><li>进入解压后的文件，可以看到我们redis的配置文件</li></ol><p><img src="/images/redis_basics_beginners/chapter1/image7.png" alt="Untitled"></p><ol><li>基本的环境安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><img src="/images/redis_basics_beginners/chapter1/image8.png" alt="Untitled"></p><p><img src="/images/redis_basics_beginners/chapter1/image9.png" alt="Untitled"></p><ol><li>Redis的默认安装路径</li></ol><p> 目录：&#x2F;usr&#x2F;local&#x2F;bin</p><p><img src="/images/redis_basics_beginners/chapter1/image10.png" alt="Untitled"></p><ol><li>将Redis配置文件。复制到我们当前目录下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/bin/config</span><br><span class="line"><span class="built_in">cp</span> /usr/local/software/redis-6.2.6/redis.conf /usr/local/bin/config</span><br></pre></td></tr></table></figure><ol><li>Redis默认不是后台启动的，修改配置文件！</li></ol><p><img src="/images/redis_basics_beginners/chapter1/image11.png" alt="Untitled"></p><p><img src="/images/redis_basics_beginners/chapter1/image12.png" alt="Untitled"></p><ol><li>启动Redis服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server config/redis.conf</span><br></pre></td></tr></table></figure><ol><li>验证服务</li></ol><p><img src="/images/redis_basics_beginners/chapter1/image13.png" alt="Untitled"></p><ol><li>使用redis-cli 进行连接测试</li></ol><p><img src="/images/redis_basics_beginners/chapter1/image14.png" alt="Untitled"></p><ol><li>如何关闭Redis服务呢</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# redis-cli </span><br><span class="line">127.0.0.1:6379&gt; SHUTDOWN</span><br></pre></td></tr></table></figure><p><img src="/images/redis_basics_beginners/chapter1/image15.png" alt="Untitled"></p><h3 id="5-Redis默认有16个数据库"><a href="#5-Redis默认有16个数据库" class="headerlink" title="5. Redis默认有16个数据库"></a>5. Redis默认有16个数据库</h3><p>Redis默认数据库有16个，默认使用database：0</p><p><img src="/images/redis_basics_beginners/chapter1/image16.png" alt="Untitled"></p><p>可以使用 select 进行切换数据库！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="keyword">select</span> 3 <span class="comment"># 切换数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; DBSIZE <span class="comment"># 查看DB大小！</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p><img src="/images/redis_basics_beginners/chapter1/image17.png" alt="Untitled"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; keys * <span class="comment"># 查看数据库所有的key</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6-清除当前数据库"><a href="#6-清除当前数据库" class="headerlink" title="6. 清除当前数据库"></a>6. 清除当前数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure><h3 id="7-清除全部数据库的内容"><a href="#7-清除全部数据库的内容" class="headerlink" title="7. 清除全部数据库的内容"></a>7. 清除全部数据库的内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSHALL</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure><h3 id="8-Redis-是单线程的"><a href="#8-Redis-是单线程的" class="headerlink" title="8. Redis 是单线程的"></a>8. Redis 是单线程的</h3><p>明白Redis是很快的，官方表示，Redis是基于内存操作，CPU不是Redis性能瓶颈，Redis的瓶颈是根据机器的内存和网络带宽，既然可以使用单线程来实现，就使用单线程了！所有就使用了单线程了！<br>Redis 是C 语言写的，官方提供的数据为 100000+ 的QPS，完全不比同样是使用 key-vale的Memecache差！</p><ul><li>Redis 为什么单线程还这么快？<ul><li><p>误区1：高性能的服务器一定是多线程的？</p></li><li><p>误区2：多线程（CPU上下文会切换！）一定比单线程效率高！</p><p>  先去CPU&gt;内存&gt;硬盘的速度要有所了解！<br>  核心：redis 是将所有的数据全部放在内存中的，所以说使用单线程去操作效率就是最高的，多线程<br>  （CPU上下文会切换：耗时的操作！！！），对于内存系统来说，如果没有上下文切换效率就是最高<br>  的！多次读写都是在一个CPU上的，在内存情况下，这个就是最佳的方案！</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">Redis（Remote Dictionary Server )，即远程字典服务 !是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。免费和开源！是当下最热门的 NoSQL 技术之一！也被人们称之为结构化数据库！</summary>
    
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://yuanxw.github.io/tags/Redis/"/>
    
    <category term="Redis基础入门" scheme="https://yuanxw.github.io/tags/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Arthas诊断工具(七)Arthas（阿尔萨斯）profiler命令生成火焰图</title>
    <link href="https://yuanxw.github.io/Arthas%E5%BA%94%E7%94%A8(Java)%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7(%E4%B8%83)Arthas%EF%BC%88%E9%98%BF%E5%B0%94%E8%90%A8%E6%96%AF%EF%BC%89profiler%E5%91%BD%E4%BB%A4%E7%94%9F%E6%88%90%E7%81%AB%E7%84%B0%E5%9B%BE/"/>
    <id>https://yuanxw.github.io/Arthas%E5%BA%94%E7%94%A8(Java)%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7(%E4%B8%83)Arthas%EF%BC%88%E9%98%BF%E5%B0%94%E8%90%A8%E6%96%AF%EF%BC%89profiler%E5%91%BD%E4%BB%A4%E7%94%9F%E6%88%90%E7%81%AB%E7%84%B0%E5%9B%BE/</id>
    <published>2023-03-06T16:00:00.000Z</published>
    <updated>2025-09-03T15:50:23.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arthas诊断工具-七-Arthas（阿尔萨斯）profiler命令生成火焰图"><a href="#Arthas诊断工具-七-Arthas（阿尔萨斯）profiler命令生成火焰图" class="headerlink" title="Arthas诊断工具(七)Arthas（阿尔萨斯）profiler命令生成火焰图"></a>Arthas诊断工具(七)Arthas（阿尔萨斯）profiler命令生成火焰图</h1><h2 id="1-profiler命令"><a href="#1-profiler命令" class="headerlink" title="1. profiler命令"></a>1. <strong>profiler命令</strong></h2><p><code>profiler</code> 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。</p><p><code>profiler</code> 命令基本运行结构是 <code>profiler action [actionArg]</code></p><p><code>profiler</code> 命令的格式基本与上游项目 <a href="https://github.com/async-profiler/async-profiler"><strong>async-profiler在新窗口打开</strong></a> 保持一致，详细的使用方式可参考上游项目的 README、Github Disscussions 以及其他文档资料</p><aside>💡<p>使用<a href="https://github.com/jvm-profiling-tools/async-profiler"><strong>async-profiler在新窗口打开</strong></a>生成火焰图</p></aside><ul><li><strong>参数说明</strong></li></ul><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>action</em></td><td>要执行的操作</td></tr><tr><td><em>actionArg</em></td><td>属性名模式</td></tr><tr><td>[i:]</td><td>采样间隔（单位：ns）（默认值：10’000’000，即 10 ms）</td></tr><tr><td>[f:]</td><td>将输出转储到指定路径</td></tr><tr><td>[d:]</td><td>运行评测指定秒</td></tr><tr><td>[e:]</td><td>要跟踪哪个事件（cpu, alloc, lock, cache-misses 等），默认是 cpu</td></tr></tbody></table><h2 id="2-启动-profiler-命令"><a href="#2-启动-profiler-命令" class="headerlink" title="2. 启动 profiler 命令"></a><strong>2. 启动 profiler 命令</strong></h2><aside>💡<p>默认情况下，生成的是 cpu 的火焰图，即 event 为<code>cpu</code>。可以用<code>--event</code>参数指定其他性能分析模式，见下文</p></aside><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ profiler start</span><br><span class="line">Profiling started</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-获取已采集的-sample-的数量"><a href="#3-获取已采集的-sample-的数量" class="headerlink" title="3. 获取已采集的 sample 的数量"></a><strong>3. 获取已采集的 sample 的数量</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ profiler getSamples </span><br><span class="line">34</span><br></pre></td></tr></table></figure><h2 id="4-查看-profiling-状态"><a href="#4-查看-profiling-状态" class="headerlink" title="4. 查看 profiling 状态"></a><strong>4. 查看 profiling 状态</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ profiler status</span><br><span class="line">Profiling is running <span class="keyword">for</span> 230 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-查看-profiler-自身的内存占用"><a href="#5-查看-profiler-自身的内存占用" class="headerlink" title="5. 查看 profiler 自身的内存占用"></a><strong>5. 查看 profiler 自身的内存占用</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ profiler meminfo </span><br><span class="line">Call trace storage:   10244 KB</span><br><span class="line">  Flight recording:       0 KB</span><br><span class="line">      Dictionaries:      72 KB</span><br><span class="line">        Code cache:   12685 KB</span><br><span class="line">------------------------------</span><br><span class="line">             Total:   23001 KB</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-停止-profiler"><a href="#6-停止-profiler" class="headerlink" title="6. 停止 profiler"></a><strong>6. 停止 profiler</strong></h2><ul><li><strong>生成火焰图格式结果</strong></li></ul><p>默认情况下，结果是 <a href="https://github.com/BrendanGregg/FlameGraph"><strong>Flame Graph在新窗口打开</strong></a> 格式的 <code>html</code> 文件，也可以用 <code>-o</code> 或 <code>--format</code> 参数指定其他内容格式，包括 flat、traces、collapsed、flamegraph、tree、jfr。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 停止采集数据，并生成火焰图</span></span><br><span class="line">[arthas@8161]$ profiler stop --format flamegraph</span><br><span class="line">OK</span><br><span class="line">profiler output file: /usr/local/software/arthas/arthas-output/20250607-110904.html</span><br><span class="line"></span><br><span class="line"><span class="comment">## 退出arthas</span></span><br><span class="line">[arthas@8161]$ stop</span><br><span class="line">Resetting all enhanced classes ...</span><br><span class="line">Affect(class count: 1 , method count: 0) cost <span class="keyword">in</span> 74 ms, listenerId: 0</span><br><span class="line">Arthas Server is going to shutdown...</span><br><span class="line">[arthas@8161]$ session (95b458b7-9c4b-4201-a619-de2dae2e85a7) is closed because server is going to shutdown.</span><br><span class="line"></span><br><span class="line"><span class="comment">## 下载火焰图</span></span><br><span class="line">[root@localhost arthas]# sz /usr/local/software/arthas/arthas-output/20250607-110904.html</span><br></pre></td></tr></table></figure><p><img src="/images/arthas/chapter7/image.png" alt="image.png"></p><p><img src="/images/arthas/chapter7/image1.png" alt="image.png"></p><ol><li>arthas 火焰图颜色说明：<ul><li>绿色： java 代码</li><li>黄色： jvm c++ 代码</li><li>红色： 用户态 c 代码</li><li>橙色： 内核态 c 代码</li></ul></li><li>arthas 火焰图x-y轴<ul><li>x轴代表的不是时间，而是采样总量</li><li>y轴代表方法的调用栈深度，倘若方法调用得越多，火焰越高，顶部的栈就是当前正在执行的方法</li></ul></li><li>栈宽含义（CPU时间）<ul><li>宽度可以理解为CPU采样率的占比，越宽代表当前栈在采样数中占比高，其可能为三种含义<br> 该函数运行时间长<br> 该函数被调用次数多</li></ul></li><li>平顶现象（一定要格外注意）<ul><li>平顶现象是由于当前程序的采样数在总采样数中占用过高导致的，出现这种现象需要特意关注一下程序具体的调用栈，采样比例占用率过高，即代表方法在CPU中的占用率过高</li></ul></li></ol><p><strong>总结</strong>：</p><p>火焰图只是用于辅助程序分析定位问题，查看程序在采样期间的大致情况，实际场景还需结合CPU占用率、查看JVM的DUMP快照等方式进行定位</p><ul><li>火焰图的顶部代表CPU消耗最高的方法，越往下方法的消耗越低。宽度过宽的方法表示其被调用频繁或自身执行时间长，是性能瓶颈的候选点。</li><li>通过观察火焰图，你可以识别出哪些方法占用CPU最多，进而针对性地优化这些“热点”方法，提升程序性能。</li></ul><h2 id="7-profiler-支持的-events"><a href="#7-profiler-支持的-events" class="headerlink" title="7. profiler 支持的 events"></a><strong>7. profiler 支持的 events</strong></h2><p>在不同的平台，不同的 OS 下面，支持的 events 各有不同。比如在 centos下面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ profiler list</span><br><span class="line">Basic events:</span><br><span class="line">  cpu</span><br><span class="line">  alloc</span><br><span class="line">  nativemem</span><br><span class="line">  lock</span><br><span class="line">  wall</span><br><span class="line">  itimer</span><br><span class="line">  ctimer</span><br><span class="line">Java method calls:</span><br><span class="line">  ClassName.methodName</span><br><span class="line">Perf events:</span><br><span class="line">  cpu-clock</span><br><span class="line">  page-faults</span><br><span class="line">  context-switches</span><br><span class="line">  cycles</span><br><span class="line">  instructions</span><br><span class="line">  cache-references</span><br><span class="line">  cache-misses</span><br><span class="line">  branch-instructions</span><br><span class="line">  branch-misses</span><br><span class="line">  bus-cycles</span><br><span class="line">  L1-dcache-load-misses</span><br><span class="line">  LLC-load-misses</span><br><span class="line">  dTLB-load-misses</span><br><span class="line">  rNNN</span><br><span class="line">  pmu/event-descriptor/</span><br><span class="line">  mem:breakpoint</span><br><span class="line">  trace:tracepoint</span><br><span class="line">  kprobe:func</span><br><span class="line">  uprobe:path</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">profiler命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。</summary>
    
    
    
    <category term="Arthas" scheme="https://yuanxw.github.io/categories/Arthas/"/>
    
    
    <category term="Arthas" scheme="https://yuanxw.github.io/tags/Arthas/"/>
    
    <category term="Arthas诊断工具" scheme="https://yuanxw.github.io/tags/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Arthas诊断工具(六)Arthas（阿尔萨斯）options全局开关</title>
    <link href="https://yuanxw.github.io/Arthas%E5%BA%94%E7%94%A8(Java)%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7(%E5%85%AD)Arthas%EF%BC%88%E9%98%BF%E5%B0%94%E8%90%A8%E6%96%AF%EF%BC%89options%E5%85%A8%E5%B1%80%E5%BC%80%E5%85%B3/"/>
    <id>https://yuanxw.github.io/Arthas%E5%BA%94%E7%94%A8(Java)%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7(%E5%85%AD)Arthas%EF%BC%88%E9%98%BF%E5%B0%94%E8%90%A8%E6%96%AF%EF%BC%89options%E5%85%A8%E5%B1%80%E5%BC%80%E5%85%B3/</id>
    <published>2023-03-05T16:00:00.000Z</published>
    <updated>2025-09-03T15:50:23.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arthas诊断工具-六-Arthas（阿尔萨斯）options全局开关"><a href="#Arthas诊断工具-六-Arthas（阿尔萨斯）options全局开关" class="headerlink" title="Arthas诊断工具(六)Arthas（阿尔萨斯）options全局开关"></a>Arthas诊断工具(六)Arthas（阿尔萨斯）options全局开关</h1><h2 id="1-options命令"><a href="#1-options命令" class="headerlink" title="1. options命令"></a>1. options<strong>命令</strong></h2><p>全局开关</p><table><thead><tr><th>名称</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>unsafe</td><td>false</td><td>是否支持对系统级别的类进行增强，打开该开关可能导致把 JVM 搞挂，请慎重选择！</td></tr><tr><td>dump</td><td>false</td><td>是否支持被增强了的类 dump 到外部文件中，如果打开开关，class 文件会被 dump 到<code>/$&#123;application working dir&#125;/arthas-class-dump/</code>目录下，具体位置详见控制台输出</td></tr><tr><td>batch-re-transform</td><td>true</td><td>是否支持批量对匹配到的类执行 retransform 操作</td></tr><tr><td>json-format</td><td>false</td><td>是否支持 json 化的输出</td></tr><tr><td>disable-sub-class</td><td>false</td><td>是否禁用子类匹配，默认在匹配目标类的时候会默认匹配到其子类，如果想精确匹配，可以关闭此开关</td></tr><tr><td>support-default-method</td><td>true</td><td>是否支持匹配到 default method， 默认会查找 interface，匹配里面的 default method。参考 <a href="https://github.com/alibaba/arthas/issues/1105"><strong>#1105在新窗口打开</strong></a></td></tr><tr><td>save-result</td><td>false</td><td>是否打开执行结果存日志功能，打开之后所有命令的运行结果都将保存到<code>~/logs/arthas-cache/result.log</code>中</td></tr><tr><td>job-timeout</td><td>1d</td><td>异步后台任务的默认超时时间，超过这个时间，任务自动停止；比如设置 1d, 2h, 3m, 25s，分别代表天、小时、分、秒</td></tr><tr><td>print-parent-fields</td><td>true</td><td>是否打印在 parent class 里的 filed</td></tr><tr><td>verbose</td><td>false</td><td>是否打印更多详细信息</td></tr><tr><td>strict</td><td>true</td><td>是否启用 strict 模式</td></tr></tbody></table><ul><li><strong>查看所有的 options</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ options</span><br><span class="line"> LEVEL              TYPE                NAME                                  VALUE              SUMMARY                                                   DESCRIPTION                                                                                                        </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 0                  boolean             unsafe                                <span class="literal">false</span>              Option to support system-level class                      This option enables to proxy functionality of JVM classes. Due to serious security risk a JVM crash is possibly be </span><br><span class="line">                                                                                                                                                            introduced. Do not activate it unless you are able to manage.                                                     </span><br><span class="line"> 1                  boolean             dump                                  <span class="literal">false</span>              Option to dump the enhanced classes                       This option enables the enhanced classes to be dumped to external file <span class="keyword">for</span> further de-compilation and analysis.    </span><br><span class="line"> 1                  boolean             batch-re-transform                    <span class="literal">true</span>               Option to support batch reTransform Class                 This options enables to reTransform classes with batch mode.                                                       </span><br><span class="line"> 2                  boolean             json-format                           <span class="literal">false</span>              Option to support JSON format of object output            This option enables to format object output with JSON when -x option selected.                                     </span><br><span class="line"> 1                  boolean             disable-sub-class                     <span class="literal">false</span>              Option to control include sub class when class matching   This option <span class="built_in">disable</span> to include sub class when matching class.                                                      </span><br><span class="line"> 1                  boolean             support-default-method                <span class="literal">true</span>               Option to control include default method <span class="keyword">in</span> interface wh  This option <span class="built_in">disable</span> to include default method <span class="keyword">in</span> interface when matching class.                                    </span><br><span class="line">                                                                                                 en class matching                                                                                                                                                            </span><br><span class="line"> 1                  boolean             save-result                           <span class="literal">false</span>              Option to <span class="built_in">print</span> <span class="built_in">command</span><span class="string">&#x27;s result to log file              This option enables to save each command&#x27;</span>s result to <span class="built_in">log</span> file, <span class="built_in">which</span> path is <span class="variable">$&#123;user.home&#125;</span>/logs/arthas-cache/result </span><br><span class="line">                                                                                                                                                           .<span class="built_in">log</span>.                                                                                                              </span><br><span class="line"> 2                  String              job-timeout                           1d                 Option to job <span class="built_in">timeout</span>                                     This option setting job <span class="built_in">timeout</span>,The unit can be d, h, m, s <span class="keyword">for</span> day, hour, minute, second. 1d is one day <span class="keyword">in</span> default </span><br><span class="line"> 1                  boolean             print-parent-fields                   <span class="literal">true</span>               Option to <span class="built_in">print</span> all fileds <span class="keyword">in</span> parent class                This option enables <span class="built_in">print</span> files <span class="keyword">in</span> parent class, default value <span class="literal">true</span>.                                               </span><br><span class="line"> 1                  boolean             verbose                               <span class="literal">false</span>              Option to <span class="built_in">print</span> verbose information                       This option enables <span class="built_in">print</span> verbose information, default value <span class="literal">false</span>.                                                </span><br><span class="line"> 1                  boolean             strict                                <span class="literal">true</span>               Option to strict mode                                     By default, strict mode is <span class="literal">true</span>, not allowed to <span class="built_in">set</span> object properties. Want to <span class="built_in">set</span> object properties, execute `opt </span><br><span class="line">                                                                                                                                                           ions strict <span class="literal">false</span>`  </span><br></pre></td></tr></table></figure><ul><li><strong>获取 option 的值</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">json-format job-timeout </span><br><span class="line">[arthas@8161]$ options json-format </span><br><span class="line"> LEVEL              TYPE                NAME                                  VALUE              SUMMARY                                                   DESCRIPTION                                                                                                        </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 2                  boolean             json-format                           <span class="literal">false</span>              Option to support JSON format of object output            This option enables to format object output with JSON when -x option selected.                                     </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">options全局开关</summary>
    
    
    
    <category term="Arthas" scheme="https://yuanxw.github.io/categories/Arthas/"/>
    
    
    <category term="Arthas" scheme="https://yuanxw.github.io/tags/Arthas/"/>
    
    <category term="Arthas诊断工具" scheme="https://yuanxw.github.io/tags/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Arthas诊断工具(五)Arthas（阿尔萨斯）monitor/watch/trace/stack/tt相关命令</title>
    <link href="https://yuanxw.github.io/Arthas%E5%BA%94%E7%94%A8(Java)%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7(%E4%BA%94)Arthas%EF%BC%88%E9%98%BF%E5%B0%94%E8%90%A8%E6%96%AF%EF%BC%89monitor%20watch%20trace%20stack/"/>
    <id>https://yuanxw.github.io/Arthas%E5%BA%94%E7%94%A8(Java)%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7(%E4%BA%94)Arthas%EF%BC%88%E9%98%BF%E5%B0%94%E8%90%A8%E6%96%AF%EF%BC%89monitor%20watch%20trace%20stack/</id>
    <published>2023-03-04T16:00:00.000Z</published>
    <updated>2025-09-03T15:50:23.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arthas诊断工具-五-Arthas（阿尔萨斯）monitor-watch-trace-stack-tt相关命令"><a href="#Arthas诊断工具-五-Arthas（阿尔萨斯）monitor-watch-trace-stack-tt相关命令" class="headerlink" title="Arthas诊断工具(五)Arthas（阿尔萨斯）monitor&#x2F;watch&#x2F;trace&#x2F;stack&#x2F;tt相关命令"></a>Arthas诊断工具(五)Arthas（阿尔萨斯）monitor&#x2F;watch&#x2F;trace&#x2F;stack&#x2F;tt相关命令</h1><h2 id="1-monitor命令"><a href="#1-monitor命令" class="headerlink" title="1. monitor命令"></a>1. <strong>monitor命令</strong></h2><p>方法执行监控</p><p>对匹配 <code>class-pattern</code>／<code>method-pattern</code>／<code>condition-express</code>的类、方法的调用进行监控。</p><p><code>monitor</code> 命令是一个非实时返回命令.</p><p>实时返回命令是输入之后立即返回，而非实时返回的命令，则是不断的等待目标 Java 进程返回信息，直到用户输入 <code>Ctrl+C</code> 为止。</p><p>服务端是以任务的形式在后台跑任务，植入的代码随着任务的中止而不会被执行，所以任务关闭后，不会对原有性能产生太大影响，而且原则上，任何 Arthas 命令不会引起原有业务逻辑的改变。</p><ul><li><strong>参数说明</strong></li></ul><p>方法拥有一个命名参数 <code>[c:]</code>，意思是统计周期（cycle of output），拥有一个整型的参数值</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td><em>condition-express</em></td><td>条件表达式</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[c:]</code></td><td>统计周期，默认值为 120 秒</td></tr><tr><td>[b]</td><td>在<strong>方法调用之前</strong>计算 condition-express</td></tr><tr><td><code>[m &lt;arg&gt;]</code></td><td>指定 Class 最大匹配数量，默认值为 50。长格式为<code>[maxMatch &lt;arg&gt;]</code></td></tr></tbody></table><ul><li><strong>监控的维度说明</strong></li></ul><table><thead><tr><th>监控项</th><th>说明</th></tr></thead><tbody><tr><td>timestamp</td><td>时间戳</td></tr><tr><td>class</td><td>Java 类</td></tr><tr><td>method</td><td>方法（构造方法、普通方法）</td></tr><tr><td>total</td><td>调用次数</td></tr><tr><td>success</td><td>成功次数</td></tr><tr><td>fail</td><td>失败次数</td></tr><tr><td>rt</td><td>平均 RT</td></tr><tr><td>fail-rate</td><td>失败率</td></tr></tbody></table><ul><li>监控<code>demo.MathGame primeFactors</code>，每5秒返回一个结果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ monitor demo.MathGame primeFactors -c 5</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 204 ms, listenerId: 1</span><br><span class="line"> timestamp                                 class                                                         method                                                        total                success              fail                avg-rt(ms)           fail-rate           </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 2025-06-07 05:32:53.378                   demo.MathGame                                                 primeFactors                                                  5                    1                    4                   3.12                 80.00%              </span><br><span class="line"></span><br><span class="line"> timestamp                                 class                                                         method                                                        total                success              fail                avg-rt(ms)           fail-rate           </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 2025-06-07 05:32:58.441                   demo.MathGame                                                 primeFactors                                                  5                    0                    5                   0.17                 100.00%             </span><br><span class="line"></span><br><span class="line"> timestamp                                 class                                                         method                                                        total                success              fail                avg-rt(ms)           fail-rate           </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 2025-06-07 05:33:02.655                   demo.MathGame                                                 primeFactors                                                  4                    3                    1                   0.16                 25.00%              </span><br><span class="line"></span><br><span class="line"> timestamp                                 class                                                         method                                                        total                success              fail                avg-rt(ms)           fail-rate           </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 2025-06-07 05:33:07.664                   demo.MathGame                                                 primeFactors                                                  5                    2                    3                   0.96                 60.00%              </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-watch命令"><a href="#2-watch命令" class="headerlink" title="2. watch命令"></a>2. <strong>watch命令</strong></h2><p>函数执行数据观测</p><p>让你能方便的观察到指定函数的调用情况。能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 OGNL 表达式进行对应变量的查看。</p><ul><li><strong>参数说明</strong></li></ul><p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>函数名表达式匹配</td></tr><tr><td><em>express</em></td><td>观察表达式，默认值：<code>&#123;params, target, returnObj&#125;</code></td></tr><tr><td><em>condition-express</em></td><td>条件表达式</td></tr><tr><td>[b]</td><td>在<strong>函数调用之前</strong>观察</td></tr><tr><td>[e]</td><td>在<strong>函数异常之后</strong>观察</td></tr><tr><td>[s]</td><td>在<strong>函数返回之后</strong>观察</td></tr><tr><td>[f]</td><td>在<strong>函数结束之后</strong>(正常返回和异常返回)观察</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td>[x:]</td><td>指定输出结果的属性遍历深度，默认为 1，最大值是 4</td></tr><tr><td><code>[m &lt;arg&gt;]</code></td><td>指定 Class 最大匹配数量，默认值为 50。长格式为<code>[maxMatch &lt;arg&gt;]</code>。</td></tr></tbody></table><p>这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写<code>&quot;&#123;params,returnObj&#125;&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p><p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。请参考<a href="https://arthas.aliyun.com/doc/advice-class.html"><strong>表达式核心变量</strong></a>中关于该节点的描述。</p><ul><li>特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71"><strong>https://github.com/alibaba/arthas/issues/71</strong></a></li><li>OGNL 表达式官网：<a href="https://commons.apache.org/dormant/commons-ognl/language-guide.html"><strong>https://commons.apache.org/dormant/commons-ognl/language-guide.html</strong></a></li></ul><p><strong>特别说明</strong>：</p><ul><li>watch 命令定义了 4 个观察事件点，即 <code>b</code> 函数调用前，<code>e</code> 函数异常后，<code>s</code> 函数返回后，<code>f</code> 函数结束后</li><li>4 个观察事件点 <code>b</code>、<code>e</code>、<code>s</code> 默认关闭，<code>f</code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出</li><li>这里要注意<code>函数入参</code>和<code>函数出参</code>的区别，有可能在中间被修改导致前后不一致，除了 <code>b</code> 事件点 <code>params</code> 代表函数入参外，其余事件都代表函数出参</li><li>当使用 <code>b</code> 时，由于观察事件点是在函数调用前，此时返回值或异常均不存在</li><li>在 watch 命令的结果里，会打印出<code>location</code>信息。<code>location</code>有三种可能值：<code>AtEnter</code>，<code>AtExit</code>，<code>AtExceptionExit</code>。对应函数入口，函数正常 return，函数抛出异常。</li></ul><h3 id="2-1-观察函数调用返回时的参数、this-对象和返回值"><a href="#2-1-观察函数调用返回时的参数、this-对象和返回值" class="headerlink" title="2.1 观察函数调用返回时的参数、this 对象和返回值"></a><strong>2.1 观察函数调用返回时的参数、this 对象和返回值</strong></h3><p>观察表达式，默认值是<code>&#123;params, target, returnObj&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">8161</span>]$ watch demo.MathGame primeFactors -x <span class="number">2</span></span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(<span class="keyword">class</span> <span class="title class_">count</span>: <span class="number">1</span> , method count: <span class="number">1</span>) cost in <span class="number">73</span> ms, listenerId: <span class="number">2</span></span><br><span class="line">method=demo.MathGame.primeFactors location=AtExceptionExit</span><br><span class="line">ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> <span class="number">05</span>:<span class="number">51</span>:<span class="number">10.663</span>; [cost=<span class="number">1.</span>015159ms] result=<span class="meta">@ArrayList</span>[</span><br><span class="line">    <span class="meta">@Object</span>[][</span><br><span class="line">        <span class="meta">@Integer</span>[-<span class="number">93162</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="meta">@MathGame</span>[</span><br><span class="line">        random=<span class="meta">@Random</span>[java.util.Random@51efea79],</span><br><span class="line">        illegalArgumentCount=<span class="meta">@Integer</span>[<span class="number">2327</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">]</span><br><span class="line">method=demo.MathGame.primeFactors location=AtExit</span><br><span class="line">ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> <span class="number">05</span>:<span class="number">48</span>:<span class="number">55.377</span>; [cost=<span class="number">0.</span>064295ms] result=<span class="meta">@ArrayList</span>[</span><br><span class="line">    <span class="meta">@Object</span>[][</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">1</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="meta">@MathGame</span>[</span><br><span class="line">        random=<span class="meta">@Random</span>[java.util.Random@51efea79],</span><br><span class="line">        illegalArgumentCount=<span class="meta">@Integer</span>[<span class="number">2256</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="meta">@ArrayList</span>[</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">2</span>],</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">2</span>],</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">2</span>],</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">2</span>],</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">2</span>],</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">2</span>],</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">2</span>],</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">3</span>],</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">13</span>],</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">41</span>],</span><br><span class="line">    ],</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>上面的结果里，说明函数被执行了两次，第一次结果是<code>location=AtExceptionExit</code>，说明函数抛出异常了，因此<code>returnObj</code>是 null</li><li>在第二次结果里是<code>location=AtExit</code>，说明函数正常返回，因此可以看到<code>returnObj</code>结果是一个 ArrayList</li></ul><h3 id="2-2-调整-x的值，观察具体的函数参数值"><a href="#2-2-调整-x的值，观察具体的函数参数值" class="headerlink" title="2.2 调整-x的值，观察具体的函数参数值"></a><strong>2.2 调整<code>-x</code>的值，观察具体的函数参数值</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">8161</span>]$ watch demo.MathGame primeFactors <span class="string">&quot;&#123;params,target&#125;&quot;</span> -x <span class="number">3</span></span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(<span class="keyword">class</span> <span class="title class_">count</span>: <span class="number">1</span> , method count: <span class="number">1</span>) cost in <span class="number">69</span> ms, listenerId: <span class="number">4</span></span><br><span class="line">method=demo.MathGame.primeFactors location=AtExceptionExit</span><br><span class="line">ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> <span class="number">05</span>:<span class="number">52</span>:<span class="number">36.258</span>; [cost=<span class="number">0.</span>313869ms] result=<span class="meta">@ArrayList</span>[</span><br><span class="line">    <span class="meta">@Object</span>[][</span><br><span class="line">        <span class="meta">@Integer</span>[-<span class="number">162367</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="meta">@MathGame</span>[</span><br><span class="line">        random=<span class="meta">@Random</span>[</span><br><span class="line">            serialVersionUID=<span class="meta">@Long</span>[<span class="number">3905348978240129619</span>],</span><br><span class="line">            seed=<span class="meta">@AtomicLong</span>[<span class="number">175065596875740</span>],</span><br><span class="line">            multiplier=<span class="meta">@Long</span>[<span class="number">25214903917</span>],</span><br><span class="line">            addend=<span class="meta">@Long</span>[<span class="number">11</span>],</span><br><span class="line">            mask=<span class="meta">@Long</span>[<span class="number">281474976710655</span>],</span><br><span class="line">            DOUBLE_UNIT=<span class="meta">@Double</span>[<span class="number">1.1102230246251565E-16</span>],</span><br><span class="line">            BadBound=<span class="meta">@String</span>[bound must be positive],</span><br><span class="line">            BadRange=<span class="meta">@String</span>[bound must be greater than origin],</span><br><span class="line">            BadSize=<span class="meta">@String</span>[size must be non-negative],</span><br><span class="line">            seedUniquifier=<span class="meta">@AtomicLong</span>[-<span class="number">2942033378085796212</span>],</span><br><span class="line">            nextNextGaussian=<span class="meta">@Double</span>[<span class="number">0.0</span>],</span><br><span class="line">            haveNextNextGaussian=<span class="meta">@Boolean</span>[<span class="literal">false</span>],</span><br><span class="line">            serialPersistentFields=<span class="meta">@ObjectStreamField</span>[][isEmpty=<span class="literal">false</span>;size=<span class="number">3</span>],</span><br><span class="line">            unsafe=<span class="meta">@Unsafe</span>[jdk.internal.misc.Unsafe@5419f379],</span><br><span class="line">            seedOffset=<span class="meta">@Long</span>[<span class="number">24</span>],</span><br><span class="line">        ],</span><br><span class="line">        illegalArgumentCount=<span class="meta">@Integer</span>[<span class="number">2371</span>],</span><br><span class="line">    ],</span><br><span class="line">]</span><br><span class="line">method=demo.MathGame.primeFactors location=AtExit</span><br><span class="line">ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> <span class="number">05</span>:<span class="number">52</span>:<span class="number">37.298</span>; [cost=<span class="number">0.</span>214619ms] result=<span class="meta">@ArrayList</span>[</span><br><span class="line">    <span class="meta">@Object</span>[][</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">1</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="meta">@MathGame</span>[</span><br><span class="line">        random=<span class="meta">@Random</span>[</span><br><span class="line">            serialVersionUID=<span class="meta">@Long</span>[<span class="number">3905348978240129619</span>],</span><br><span class="line">            seed=<span class="meta">@AtomicLong</span>[<span class="number">102106958650551</span>],</span><br><span class="line">            multiplier=<span class="meta">@Long</span>[<span class="number">25214903917</span>],</span><br><span class="line">            addend=<span class="meta">@Long</span>[<span class="number">11</span>],</span><br><span class="line">            mask=<span class="meta">@Long</span>[<span class="number">281474976710655</span>],</span><br><span class="line">            DOUBLE_UNIT=<span class="meta">@Double</span>[<span class="number">1.1102230246251565E-16</span>],</span><br><span class="line">            BadBound=<span class="meta">@String</span>[bound must be positive],</span><br><span class="line">            BadRange=<span class="meta">@String</span>[bound must be greater than origin],</span><br><span class="line">            BadSize=<span class="meta">@String</span>[size must be non-negative],</span><br><span class="line">            seedUniquifier=<span class="meta">@AtomicLong</span>[-<span class="number">2942033378085796212</span>],</span><br><span class="line">            nextNextGaussian=<span class="meta">@Double</span>[<span class="number">0.0</span>],</span><br><span class="line">            haveNextNextGaussian=<span class="meta">@Boolean</span>[<span class="literal">false</span>],</span><br><span class="line">            serialPersistentFields=<span class="meta">@ObjectStreamField</span>[][isEmpty=<span class="literal">false</span>;size=<span class="number">3</span>],</span><br><span class="line">            unsafe=<span class="meta">@Unsafe</span>[jdk.internal.misc.Unsafe@5419f379],</span><br><span class="line">            seedOffset=<span class="meta">@Long</span>[<span class="number">24</span>],</span><br><span class="line">        ],</span><br><span class="line">        illegalArgumentCount=<span class="meta">@Integer</span>[<span class="number">2371</span>],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-3-条件表达式的例子"><a href="#2-3-条件表达式的例子" class="headerlink" title="2.3 条件表达式的例子"></a><strong>2.3 条件表达式的例子</strong></h3><ul><li>只有满足条件的调用，才会有响应。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">8161</span>]$ watch demo.MathGame primeFactors <span class="string">&quot;&#123;params[0],target&#125;&quot;</span> <span class="string">&quot;params[0]&lt;0&quot;</span></span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(<span class="keyword">class</span> <span class="title class_">count</span>: <span class="number">1</span> , method count: <span class="number">1</span>) cost in <span class="number">70</span> ms, listenerId: <span class="number">5</span></span><br><span class="line">method=demo.MathGame.primeFactors location=AtExceptionExit</span><br><span class="line">ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> <span class="number">05</span>:<span class="number">57</span>:<span class="number">45.251</span>; [cost=<span class="number">0.</span>640813ms] result=<span class="meta">@ArrayList</span>[</span><br><span class="line">    <span class="meta">@Integer</span>[-<span class="number">152032</span>],</span><br><span class="line">    <span class="meta">@MathGame</span>[demo.MathGame@589838eb],</span><br><span class="line">]</span><br><span class="line">method=demo.MathGame.primeFactors location=AtExceptionExit</span><br><span class="line">ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> <span class="number">05</span>:<span class="number">57</span>:<span class="number">49.265</span>; [cost=<span class="number">0.</span>09171ms] result=<span class="meta">@ArrayList</span>[</span><br><span class="line">    <span class="meta">@Integer</span>[-<span class="number">106952</span>],</span><br><span class="line">    <span class="meta">@MathGame</span>[demo.MathGame@589838eb],</span><br><span class="line">]</span><br><span class="line">method=demo.MathGame.primeFactors location=AtExceptionExit</span><br><span class="line">ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> <span class="number">05</span>:<span class="number">57</span>:<span class="number">50.271</span>; [cost=<span class="number">0.</span>058582ms] result=<span class="meta">@ArrayList</span>[</span><br><span class="line">    <span class="meta">@Integer</span>[-<span class="number">181262</span>],</span><br><span class="line">    <span class="meta">@MathGame</span>[demo.MathGame@589838eb],</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-trace命令"><a href="#3-trace命令" class="headerlink" title="3. trace命令"></a>3. <strong>trace命令</strong></h2><p>方法内部调用路径，并输出方法路径上的每个节点上耗时</p><p><code>trace</code> 命令能主动搜索 <code>class-pattern</code>／<code>method-pattern</code> 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。</p><ul><li><strong>参数说明</strong></li></ul><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td><em>condition-express</em></td><td>条件表达式</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[n:]</code></td><td>命令执行次数，默认值为 100。</td></tr><tr><td><code>#cost</code></td><td>方法执行耗时，单位毫秒</td></tr><tr><td><code>[m &lt;arg&gt;]</code></td><td>指定 Class 最大匹配数量，默认值为 50。长格式为<code>[maxMatch &lt;arg&gt;]</code>。</td></tr></tbody></table><p>这里重点要说明的是<code>条件表达式</code>，<code>条件表达式</code>的构成主要由 ognl 表达式组成，所以你可以这样写<code>&quot;params[0]&lt;0&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p><p>请参考<a href="https://arthas.aliyun.com/doc/advice-class.html"><strong>表达式核心变量</strong></a>中关于该节点的描述。</p><ul><li>特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71"><strong>https://github.com/alibaba/arthas/issues/71</strong></a></li><li>OGNL 表达式官网：<a href="https://commons.apache.org/dormant/commons-ognl/language-guide.html"><strong>https://commons.apache.org/dormant/commons-ognl/language-guide.html</strong></a></li></ul><p>很多时候我们只想看到某个方法的 rt 大于某个时间之后的 trace 结果，现在 Arthas 可以按照方法执行的耗时来进行过滤了，例如<code>trace *StringUtils isBlank &#39;#cost&gt;100&#39;</code>表示当执行时间超过 100ms 的时候，才会输出 trace 的结果。</p><p>watch&#x2F;stack&#x2F;trace 这个三个命令都支持<code>#cost</code></p><aside>💡<ul><li><strong>注意事项</strong><ol><li><p><code>trace</code> 能方便的帮助你定位和发现因 RT 高而导致的性能问题缺陷，但其每次只能跟踪一级方法的调用链路。</p><p> 参考：<a href="https://github.com/alibaba/arthas/issues/597"><strong>Trace 命令的实现原理在新窗口打开</strong></a></p></li><li><p>3.3.0 版本后，可以使用动态 Trace 功能，不断增加新的匹配类，参考下面的示例。</p></li><li><p>目前不支持 <code>trace java.lang.Thread getName</code>，参考 issue: <a href="https://github.com/alibaba/arthas/issues/1610"><strong>#1610在新窗口打开</strong></a> ，考虑到不是非常必要场景，且修复有一定难度，因此当前暂不修复</p></li></ol></li></ul></aside><h3 id="3-1-trace不带参数命令"><a href="#3-1-trace不带参数命令" class="headerlink" title="3.1 trace不带参数命令"></a><strong>3.1 trace不带参数命令</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">8161</span>]$ trace demo.MathGame run</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(<span class="keyword">class</span> <span class="title class_">count</span>: <span class="number">1</span> , method count: <span class="number">1</span>) cost in <span class="number">100</span> ms, listenerId: <span class="number">6</span></span><br><span class="line">`---ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> <span class="number">06</span>:<span class="number">02</span>:<span class="number">53.872</span>;thread_name=main;id=<span class="number">1</span>;is_daemon=<span class="literal">false</span>;priority=<span class="number">5</span>;TCCL=jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c</span><br><span class="line">    `---[<span class="number">1.</span>431047ms] demo.MathGame:run()</span><br><span class="line">        +---[<span class="number">17.69</span>% <span class="number">0.</span>25315ms ] demo.MathGame:primeFactors() #<span class="number">24</span></span><br><span class="line">        `---[<span class="number">38.56</span>% <span class="number">0.</span>551755ms ] demo.MathGame:print() #<span class="number">25</span></span><br><span class="line"></span><br><span class="line">`---ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> <span class="number">06</span>:<span class="number">02</span>:<span class="number">54.895</span>;thread_name=main;id=<span class="number">1</span>;is_daemon=<span class="literal">false</span>;priority=<span class="number">5</span>;TCCL=jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c</span><br><span class="line">    `---[<span class="number">0.</span>421141ms] demo.MathGame:run()</span><br><span class="line">        `---[<span class="number">42.03</span>% <span class="number">0.</span>177003ms ] demo.MathGame:primeFactors() #<span class="number">24</span> [<span class="keyword">throws</span> Exception]</span><br><span class="line"></span><br><span class="line">`---ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> <span class="number">06</span>:<span class="number">02</span>:<span class="number">55.897</span>;thread_name=main;id=<span class="number">1</span>;is_daemon=<span class="literal">false</span>;priority=<span class="number">5</span>;TCCL=jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c</span><br><span class="line">    `---[<span class="number">0.</span>108631ms] demo.MathGame:run()</span><br><span class="line">        +---[<span class="number">21.72</span>% <span class="number">0.</span>023592ms ] demo.MathGame:primeFactors() #<span class="number">24</span></span><br><span class="line">        `---[<span class="number">49.07</span>% <span class="number">0.</span>053301ms ] demo.MathGame:print() #<span class="number">25</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果里的 <code>#24</code>，表示在 run 函数里，在源文件的第<code>24</code>行调用了<code>primeFactors()</code>函数。</p><h3 id="3-2-trace带参数命令"><a href="#3-2-trace带参数命令" class="headerlink" title="3.2 trace带参数命令"></a><strong>3.2 trace带参数命令</strong></h3><ul><li><code>-skipJDKMethod &lt;value&gt;</code> skip jdk method trace, default value true.</li></ul><p>默认情况下，trace 不会包含 jdk 里的函数调用，如果希望 trace jdk 里的函数，需要显式设置<code>--skipJDKMethod false</code>。</p><ul><li>如果方法调用的次数很多，那么可以用-n参数指定捕捉结果的次数。比如下面的例子里，捕捉到一次调用就退出命令。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[arthas@<span class="number">8161</span>]$ trace --skipJDKMethod <span class="literal">false</span> demo.MathGame run -n <span class="number">3</span></span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(<span class="keyword">class</span> <span class="title class_">count</span>: <span class="number">1</span> , method count: <span class="number">1</span>) cost in <span class="number">108</span> ms, listenerId: <span class="number">9</span></span><br><span class="line">`---ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> 09:<span class="number">33</span>:<span class="number">22.964</span>;thread_name=main;id=<span class="number">1</span>;is_daemon=<span class="literal">false</span>;priority=<span class="number">5</span>;TCCL=jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c</span><br><span class="line">    +---[<span class="number">0.</span>040626ms] java.util.Random:nextInt() #<span class="number">23</span></span><br><span class="line">    +---[<span class="number">0.</span>152629ms] demo.MathGame:primeFactors() #<span class="number">24</span></span><br><span class="line">    +---[<span class="number">0.</span>032551ms] demo.MathGame:print() #<span class="number">25</span></span><br><span class="line">    `---[<span class="number">3.</span>440639ms] demo.MathGame:run()</span><br><span class="line">        +---[<span class="number">9.98</span>% <span class="number">0.</span>343288ms ] java.util.Random:nextInt() #<span class="number">23</span></span><br><span class="line">        +---[<span class="number">17.64</span>% <span class="number">0.</span>607089ms ] demo.MathGame:primeFactors() #<span class="number">24</span> [<span class="keyword">throws</span> Exception]</span><br><span class="line">        +---[<span class="number">0.64</span>% <span class="number">0.</span>021935ms ] java.lang.StringBuilder:&lt;init&gt;() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">7.40</span>% <span class="number">0.</span>254695ms ] java.lang.String:format() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">1.37</span>% min=<span class="number">0.</span>01411ms,max=<span class="number">0.</span>03298ms,total=<span class="number">0.</span>04709ms,count=<span class="number">2</span>] java.lang.StringBuilder:append() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">1.20</span>% <span class="number">0.</span>041169ms ] java.lang.Exception:getMessage() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">0.64</span>% <span class="number">0.</span>022185ms ] java.lang.StringBuilder:toString() #<span class="number">28</span></span><br><span class="line">        `---[<span class="number">16.69</span>% <span class="number">0.</span>574324ms ] java.io.PrintStream:println() #<span class="number">28</span></span><br><span class="line"></span><br><span class="line">`---ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> 09:<span class="number">33</span>:<span class="number">25.119</span>;thread_name=main;id=<span class="number">1</span>;is_daemon=<span class="literal">false</span>;priority=<span class="number">5</span>;TCCL=jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c</span><br><span class="line">    `---[<span class="number">1.</span>504503ms] demo.MathGame:run()</span><br><span class="line">        +---[<span class="number">1.70</span>% <span class="number">0.</span>025535ms ] java.util.Random:nextInt() #<span class="number">23</span></span><br><span class="line">        +---[<span class="number">5.34</span>% <span class="number">0.</span>080385ms ] demo.MathGame:primeFactors() #<span class="number">24</span> [<span class="keyword">throws</span> Exception]</span><br><span class="line">        +---[<span class="number">0.97</span>% <span class="number">0.</span>01455ms ] java.lang.StringBuilder:&lt;init&gt;() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">3.14</span>% <span class="number">0.</span>04719ms ] java.lang.String:format() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">1.90</span>% min=<span class="number">0.</span>014215ms,max=<span class="number">0.</span>01436ms,total=<span class="number">0.</span>028575ms,count=<span class="number">2</span>] java.lang.StringBuilder:append() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">7.98</span>% <span class="number">0.</span>12012ms ] java.lang.Exception:getMessage() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">0.88</span>% <span class="number">0.</span>013255ms ] java.lang.StringBuilder:toString() #<span class="number">28</span></span><br><span class="line">        `---[<span class="number">25.35</span>% <span class="number">0.</span>381384ms ] java.io.PrintStream:println() #<span class="number">28</span></span><br><span class="line"></span><br><span class="line">`---ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> 09:<span class="number">33</span>:<span class="number">26.136</span>;thread_name=main;id=<span class="number">1</span>;is_daemon=<span class="literal">false</span>;priority=<span class="number">5</span>;TCCL=jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c</span><br><span class="line">    `---[<span class="number">0.</span>357443ms] demo.MathGame:run()</span><br><span class="line">        +---[<span class="number">2.92</span>% <span class="number">0.</span>01043ms ] java.util.Random:nextInt() #<span class="number">23</span></span><br><span class="line">        +---[<span class="number">12.37</span>% <span class="number">0.</span>044215ms ] demo.MathGame:primeFactors() #<span class="number">24</span> [<span class="keyword">throws</span> Exception]</span><br><span class="line">        +---[<span class="number">1.46</span>% <span class="number">0.</span>00521ms ] java.lang.StringBuilder:&lt;init&gt;() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">9.13</span>% <span class="number">0.</span>032649ms ] java.lang.String:format() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">2.90</span>% min=<span class="number">0.</span>004825ms,max=<span class="number">0.</span>00555ms,total=<span class="number">0.</span>010375ms,count=<span class="number">2</span>] java.lang.StringBuilder:append() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">1.49</span>% <span class="number">0.</span>00532ms ] java.lang.Exception:getMessage() #<span class="number">28</span></span><br><span class="line">        +---[<span class="number">1.34</span>% <span class="number">0.</span>004785ms ] java.lang.StringBuilder:toString() #<span class="number">28</span></span><br><span class="line">        `---[<span class="number">18.75</span>% <span class="number">0.</span>067035ms ] java.io.PrintStream:println() #<span class="number">28</span></span><br><span class="line"></span><br><span class="line">Command execution times exceed limit: <span class="number">3</span>, so command will exit. You can set it with -n option.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-根据调用耗时过滤"><a href="#3-3-根据调用耗时过滤" class="headerlink" title="3.3 根据调用耗时过滤"></a><strong>3.3 根据调用耗时过滤</strong></h3><p>只会展示耗时大于 2ms 的调用路径，有助于在排查问题的时候，只关注异常情况</p><aside>💡<ul><li>是不是很眼熟，没错，在 JProfiler 等收费软件中你曾经见识类似的功能，这里你将可以通过命令就能打印出指定调用路径。 友情提醒下，<code>trace</code> 在执行的过程中本身是会有一定的性能开销，在统计的报告中并未像 JProfiler 一样预先减去其自身的统计开销。所以这统计出来有些许的不准，渲染路径上调用的类、方法越多，性能偏差越大。但还是能让你看清一些事情的。</li><li>[12.033735ms] 的含义，<code>12.033735</code> 的含义是：当前节点在当前步骤的耗时，单位为毫秒</li><li>[0,0,0ms,11]xxx:yyy() [throws Exception]，对该方法中相同的方法调用进行了合并，<code>0,0,0ms,11</code> 表示方法调用耗时，<code>min,max,total,count</code>；<code>throws Exception</code> 表明该方法调用中存在异常返回</li><li>这里存在一个统计不准确的问题，就是所有方法耗时加起来可能会小于该监测方法的总耗时，这个是由于 Arthas 本身的逻辑会有一定的耗时</aside></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">8161</span>]$ trace demo.MathGame run <span class="string">&#x27;#cost &gt; 0.5&#x27;</span> -n <span class="number">3</span></span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(<span class="keyword">class</span> <span class="title class_">count</span>: <span class="number">1</span> , method count: <span class="number">1</span>) cost in <span class="number">87</span> ms, listenerId: <span class="number">12</span></span><br><span class="line">`---ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> 09:<span class="number">36</span>:<span class="number">31.428</span>;thread_name=main;id=<span class="number">1</span>;is_daemon=<span class="literal">false</span>;priority=<span class="number">5</span>;TCCL=jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c</span><br><span class="line">    `---[<span class="number">0.</span>575073ms] demo.MathGame:run()</span><br><span class="line">        `---[<span class="number">56.12</span>% <span class="number">0.</span>322722ms ] demo.MathGame:primeFactors() #<span class="number">24</span> [<span class="keyword">throws</span> Exception]</span><br><span class="line"></span><br><span class="line">`---ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> 09:<span class="number">36</span>:<span class="number">33.467</span>;thread_name=main;id=<span class="number">1</span>;is_daemon=<span class="literal">false</span>;priority=<span class="number">5</span>;TCCL=jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c</span><br><span class="line">    `---[<span class="number">2.</span>125056ms] demo.MathGame:run()</span><br><span class="line">        +---[<span class="number">65.45</span>% <span class="number">1.</span>390877ms ] demo.MathGame:primeFactors() #<span class="number">24</span></span><br><span class="line">        `---[<span class="number">23.98</span>% <span class="number">0.</span>509524ms ] demo.MathGame:print() #<span class="number">25</span></span><br><span class="line"></span><br><span class="line">`---ts=<span class="number">2025</span>-<span class="number">06</span>-<span class="number">07</span> 09:<span class="number">36</span>:<span class="number">37.491</span>;thread_name=main;id=<span class="number">1</span>;is_daemon=<span class="literal">false</span>;priority=<span class="number">5</span>;TCCL=jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c</span><br><span class="line">    `---[<span class="number">7.</span>300126ms] demo.MathGame:run()</span><br><span class="line">        +---[<span class="number">99.21</span>% <span class="number">7.</span>242667ms ] demo.MathGame:primeFactors() #<span class="number">24</span></span><br><span class="line">        `---[<span class="number">0.44</span>% <span class="number">0.</span>031904ms ] demo.MathGame:print() #<span class="number">25</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-stack命令"><a href="#4-stack命令" class="headerlink" title="4. stack命令"></a>4. <strong>stack命令</strong></h2><p>输出当前方法被调用的调用路径</p><p>很多时候我们都知道一个方法被执行，但这个方法被执行的路径非常多，或者你根本就不知道这个方法是从那里被执行了，此时你需要的是 stack 命令。</p><ul><li><strong>参数说明</strong></li></ul><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td><em>condition-express</em></td><td>条件表达式</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[n:]</code></td><td>执行次数限制</td></tr><tr><td><code>[m &lt;arg&gt;]</code></td><td>指定 Class 最大匹配数量，默认值为 50。长格式为<code>[maxMatch &lt;arg&gt;]</code>。</td></tr></tbody></table><aside>💡<p>这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写<code>&quot;&#123;params,returnObj&#125;&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p><p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。</p><p>请参考<a href="https://arthas.aliyun.com/doc/advice-class.html"><strong>表达式核心变量</strong></a>中关于该节点的描述。</p><ul><li><p>特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71"><strong>https://github.com/alibaba/arthas/issues/71</strong></a></p></li><li><p>OGNL 表达式官网：<a href="https://commons.apache.org/dormant/commons-ognl/language-guide.html"><strong>https://commons.apache.org/dormant/commons-ognl/language-guide.html</strong></a></p></aside></li><li><p><strong>使用案例</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 使用stack命令跟踪primeFactors方法</span></span><br><span class="line">[arthas@8161]$ stack demo.MathGame primeFactors</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 88 ms, listenerId: 14</span><br><span class="line">ts=2025-06-07 09:53:24.073;thread_name=main;<span class="built_in">id</span>=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c</span><br><span class="line">    @demo.MathGame.primeFactors()</span><br><span class="line">        at demo.MathGame.run(MathGame.java:24)</span><br><span class="line">        at demo.MathGame.main(null:16)</span><br><span class="line"></span><br><span class="line">ts=2025-06-07 09:53:25.077;thread_name=main;<span class="built_in">id</span>=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c</span><br><span class="line">    @demo.MathGame.primeFactors()</span><br><span class="line">        at demo.MathGame.run(MathGame.java:24)</span><br><span class="line">        at demo.MathGame.main(null:16)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用OGNL表达式，过滤第一个参数值小于0的方法调用情况，并且只打印两个信息数据</span></span><br><span class="line">[arthas@8161]$ stack demo.MathGame primeFactors <span class="string">&#x27;params[0]&lt;0&#x27;</span> -n 2</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 85 ms, listenerId: 15</span><br><span class="line">ts=2025-06-07 09:53:57.220;thread_name=main;<span class="built_in">id</span>=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c</span><br><span class="line">    @demo.MathGame.primeFactors()</span><br><span class="line">        at demo.MathGame.run(MathGame.java:24)</span><br><span class="line">        at demo.MathGame.main(null:16)</span><br><span class="line"></span><br><span class="line">ts=2025-06-07 09:53:58.223;thread_name=main;<span class="built_in">id</span>=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c</span><br><span class="line">    @demo.MathGame.primeFactors()</span><br><span class="line">        at demo.MathGame.run(MathGame.java:24)</span><br><span class="line">        at demo.MathGame.main(null:16)</span><br><span class="line"></span><br><span class="line">Command execution <span class="built_in">times</span> exceed <span class="built_in">limit</span>: 2, so <span class="built_in">command</span> will <span class="built_in">exit</span>. You can <span class="built_in">set</span> it with -n option.</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用OGNL表达式，过滤耗时大于2毫秒的信息</span></span><br><span class="line">[arthas@8161]$ stack demo.MathGame primeFactors <span class="string">&#x27;#cost&gt;2&#x27;</span></span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 84 ms, listenerId: 17</span><br><span class="line">ts=2025-06-07 09:56:40.903;thread_name=main;<span class="built_in">id</span>=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c</span><br><span class="line">    @demo.MathGame.primeFactors()</span><br><span class="line">        at demo.MathGame.run(MathGame.java:24)</span><br><span class="line">        at demo.MathGame.main(null:16)</span><br><span class="line"></span><br><span class="line">ts=2025-06-07 09:56:44.919;thread_name=main;<span class="built_in">id</span>=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c</span><br><span class="line">    @demo.MathGame.primeFactors()</span><br><span class="line">        at demo.MathGame.run(MathGame.java:24)</span><br><span class="line">        at demo.MathGame.main(null:16)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-tt命令"><a href="#5-tt命令" class="headerlink" title="5. tt命令"></a>5. <strong>tt命令</strong></h2><p>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</p><p><code>watch</code> 虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测。</p><p>这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。</p><p>于是乎，TimeTunnel 命令就诞生了。</p><aside>💡<ol><li>tt 命令的实现是：把函数的入参&#x2F;返回值等，保存到一个<code>Map&lt;Integer, TimeFragment&gt;</code>里，默认的大小是 100。</li><li>tt 相关功能在使用完之后，需要手动释放内存，否则长时间可能导致OOM。退出 arthas 不会自动清除 tt 的缓存 map</aside></li></ol><ul><li>命令参数解析<ul><li><p><code>t</code></p><p>  tt 命令有很多个主参数，<code>-t</code> 就是其中之一。这个参数的表明希望记录下类 <code>*Test</code> 的 <code>print</code> 方法的每次执行情况。</p></li><li><p><code>n 3</code></p><p>  当你执行一个调用量不高的方法时可能你还能有足够的时间用 <code>CTRL+C</code> 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。</p><p>  此时你可以通过 <code>-n</code> 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断 tt 命令的记录过程，避免人工操作无法停止的情况。</p></li><li><p><code>m 1</code></p><p>  通过 <code>-m</code> 参数指定 Class 匹配的最大数量，防止匹配到的 Class 数量太多导致 JVM 挂起，默认值是 50。</p></li></ul></li></ul><h3 id="5-1-执行命令：tt-t-demo-MathGame-primeFactors"><a href="#5-1-执行命令：tt-t-demo-MathGame-primeFactors" class="headerlink" title="5.1 执行命令：tt -t demo.MathGame primeFactors"></a>5.1 执行命令：tt -t demo.MathGame primeFactors</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ tt -t demo.MathGame primeFactors</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 85 ms, listenerId: 18</span><br><span class="line"> INDEX            TIMESTAMP                                 COST(ms)             IS-RET          IS-EXP           OBJECT                         CLASS                                                          METHOD                                                        </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 1000             2025-06-07 10:07:44.617                   0.227622             <span class="literal">false</span>           <span class="literal">true</span>             0x589838eb                     MathGame                                                       primeFactors                                                  </span><br><span class="line"> 1001             2025-06-07 10:07:45.621                   0.07812              <span class="literal">false</span>           <span class="literal">true</span>             0x589838eb                     MathGame                                                       primeFactors                                                  </span><br><span class="line"> 1002             2025-06-07 10:07:46.623                   0.091644             <span class="literal">false</span>           <span class="literal">true</span>             0x589838eb                     MathGame                                                       primeFactors                                                  </span><br><span class="line"> 1003             2025-06-07 10:07:47.628                   3.676343             <span class="literal">true</span>            <span class="literal">false</span>            0x589838eb                     MathGame                                                       primeFactors                                                  </span><br><span class="line"> 1004             2025-06-07 10:07:48.631                   0.05122              <span class="literal">false</span>           <span class="literal">true</span>             0x589838eb                     MathGame                                                       primeFactors  </span><br></pre></td></tr></table></figure><ul><li>表格字段说明</li></ul><table><thead><tr><th>表格字段</th><th>字段解释</th></tr></thead><tbody><tr><td>INDEX</td><td>时间片段记录编号，每一个编号代表着一次调用，后续 tt 还有很多命令都是基于此编号指定记录操作，非常重要。</td></tr><tr><td>TIMESTAMP</td><td>方法执行的本机时间，记录了这个时间片段所发生的本机时间</td></tr><tr><td>COST(ms)</td><td>方法执行的耗时</td></tr><tr><td>IS-RET</td><td>方法是否以正常返回的形式结束</td></tr><tr><td>IS-EXP</td><td>方法是否以抛异常的形式结束</td></tr><tr><td>OBJECT</td><td>执行对象的<code>hashCode()</code>，注意，曾经有人误认为是对象在 JVM 中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体</td></tr><tr><td>CLASS</td><td>执行的类名</td></tr><tr><td>METHOD</td><td>执行的方法名</td></tr></tbody></table><ul><li><p>条件表达式</p><p>  不知道大家是否有在使用过程中遇到以下困惑</p><ul><li>Arthas 似乎很难区分出重载的方法</li><li>我只需要观察特定参数，但是 tt 却全部都给我记录了下来</li></ul><p>  条件表达式也是用 <code>OGNL</code> 来编写，核心的判断对象依然是 <code>Advice</code> 对象。除了 <code>tt</code> 命令之外，<code>watch</code>、<code>trace</code>、<code>stack</code> 命令也都支持条件表达式。  </p></li><li><p>解决方法重载</p><p>  <code>tt -t *Test print params.length==1</code></p><p>  通过制定参数个数的形式解决不同的方法签名，如果参数个数一样，你还可以这样写</p><p>  <code>tt -t *Test print &#39;params[1] instanceof Integer&#39;</code></p></li><li><p>解决指定参数</p><p>  <code>tt -t *Test print params[0].mobile==&quot;13989838402&quot;</code></p></li><li><p>构成条件表达式的 <code>Advice</code> 对象</p><p>  前边看到了很多条件表达式中，都使用了 <code>params[0]</code>，有关这个变量的介绍，请参考<a href="https://arthas.aliyun.com/doc/advice-class.html"><strong>表达式核心变量</strong></a></p></li></ul><h3 id="5-2-查看调用信息"><a href="#5-2-查看调用信息" class="headerlink" title="5.2 查看调用信息"></a>5.2 <strong>查看调用信息</strong></h3><p>对于具体一个时间片的信息而言，你可以通过 <code>-i</code> 参数后边跟着对应的 <code>INDEX</code> 编号查看到他的详细信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ tt -i 1004</span><br><span class="line"> INDEX            1004                                                                                                                                                                                                                                                        </span><br><span class="line"> GMT-CREATE       2025-06-07 10:07:48.631                                                                                                                                                                                                                                     </span><br><span class="line"> COST(ms)         0.05122                                                                                                                                                                                                                                                     </span><br><span class="line"> OBJECT           0x589838eb                                                                                                                                                                                                                                                  </span><br><span class="line"> CLASS            demo.MathGame                                                                                                                                                                                                                                               </span><br><span class="line"> METHOD           primeFactors                                                                                                                                                                                                                                                </span><br><span class="line"> IS-RETURN        <span class="literal">false</span>                                                                                                                                                                                                                                                       </span><br><span class="line"> IS-EXCEPTION     <span class="literal">true</span>                                                                                                                                                                                                                                                        </span><br><span class="line"> PARAMETERS[0]    @Integer[-67793]                                                                                                                                                                                                                                            </span><br><span class="line"> THROW-EXCEPTION  java.lang.IllegalArgumentException: number is: -67793, need &gt;= 2                                                                                                                                                                                            </span><br><span class="line">                  at demo.MathGame.primeFactors(MathGame.java:46)                                                                                                                                                                                                            </span><br><span class="line">                  at demo.MathGame.run(MathGame.java:24)                                                                                                                                                                                                                     </span><br><span class="line">                  at demo.MathGame.main(Unknown Source)                                                                                                                                                                                                                      </span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 3 ms.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-3-重做一次调用"><a href="#5-3-重做一次调用" class="headerlink" title="5.3 重做一次调用"></a><strong>5.3 重做一次调用</strong></h3><p>当你稍稍做了一些调整之后，你可能需要前端系统重新触发一次你的调用，此时得求爷爷告奶奶的需要前端配合联调的同学再次发起一次调用。而有些场景下，这个调用不是这么好触发的。</p><p><code>tt</code> 命令由于保存了当时调用的所有现场信息，所以我们可以自己主动对一个 <code>INDEX</code> 编号的时间片自主发起一次调用，从而解放你的沟通成本。此时你需要 <code>-p</code> 参数。通过 <code>--replay-times</code> 指定 调用次数，通过 <code>--replay-interval</code> 指定多次调用间隔(单位 ms, 默认 1000ms)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ tt -i 1004 -p</span><br><span class="line"> RE-INDEX         1004                                                                                                                                                                                                                                                        </span><br><span class="line"> GMT-REPLAY       2025-06-07 10:15:36.439                                                                                                                                                                                                                                     </span><br><span class="line"> OBJECT           0x589838eb                                                                                                                                                                                                                                                  </span><br><span class="line"> CLASS            demo.MathGame                                                                                                                                                                                                                                               </span><br><span class="line"> METHOD           primeFactors                                                                                                                                                                                                                                                </span><br><span class="line"> PARAMETERS[0]    @Integer[-67793]                                                                                                                                                                                                                                            </span><br><span class="line"> IS-RETURN        <span class="literal">false</span>                                                                                                                                                                                                                                                       </span><br><span class="line"> IS-EXCEPTION     <span class="literal">true</span>                                                                                                                                                                                                                                                        </span><br><span class="line"> THROW-EXCEPTION  java.lang.IllegalArgumentException: number is: -67793, need &gt;= 2                                                                                                                                                                                            </span><br><span class="line">                  at demo.MathGame.primeFactors(MathGame.java:46)                                                                                                                                                                                                            </span><br><span class="line">                  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)                                                                                                                                                                          </span><br><span class="line">                  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)                                                                                                                                                        </span><br><span class="line">                  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)                                                                                                                                                </span><br><span class="line">                  at java.base/java.lang.reflect.Method.invoke(Method.java:566)                                                                                                                                                                                              </span><br><span class="line">                  at com.taobao.arthas.core.advisor.ArthasMethod.invoke(ArthasMethod.java:155)                                                                                                                                                                               </span><br><span class="line">                  at com.taobao.arthas.core.command.monitor200.TimeTunnelCommand.processPlay(TimeTunnelCommand.java:517)                                                                                                                                                     </span><br><span class="line">                  at com.taobao.arthas.core.command.monitor200.TimeTunnelCommand.process(TimeTunnelCommand.java:278)                                                                                                                                                         </span><br><span class="line">                  at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.process(AnnotatedCommandImpl.java:82)                                                                                                                                                    </span><br><span class="line">                  at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.access<span class="variable">$100</span>(AnnotatedCommandImpl.java:18)                                                                                                                                                 </span><br><span class="line">                  at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl<span class="variable">$ProcessHandler</span>.handle(AnnotatedCommandImpl.java:111)                                                                                                                                     </span><br><span class="line">                  at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl<span class="variable">$ProcessHandler</span>.handle(AnnotatedCommandImpl.java:108)                                                                                                                                     </span><br><span class="line">                  at com.taobao.arthas.core.shell.system.impl.ProcessImpl<span class="variable">$CommandProcessTask</span>.run(ProcessImpl.java:385)                                                                                                                                                       </span><br><span class="line">                  at java.base/java.util.concurrent.Executors<span class="variable">$RunnableAdapter</span>.call(Executors.java:515)                                                                                                                                                                       </span><br><span class="line">                  at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)                                                                                                                                                                                      </span><br><span class="line">                  at java.base/java.util.concurrent.ScheduledThreadPoolExecutor<span class="variable">$ScheduledFutureTask</span>.run(ScheduledThreadPoolExecutor.java:304)                                                                                                                                </span><br><span class="line">                  at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)                                                                                                                                                               </span><br><span class="line">                  at java.base/java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:628)                                                                                                                                                               </span><br><span class="line">                  at java.base/java.lang.Thread.run(Thread.java:834)                                                                                                                                                                                                         </span><br><span class="line">Time fragment[1004] successfully replayed 1 <span class="built_in">times</span>.</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">方法执行监控</summary>
    
    
    
    <category term="Arthas" scheme="https://yuanxw.github.io/categories/Arthas/"/>
    
    
    <category term="Arthas" scheme="https://yuanxw.github.io/tags/Arthas/"/>
    
    <category term="Arthas诊断工具" scheme="https://yuanxw.github.io/tags/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Arthas诊断工具(四)Arthas（阿尔萨斯）class/classloader相关命令</title>
    <link href="https://yuanxw.github.io/Arthas%E5%BA%94%E7%94%A8(Java)%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7(%E5%9B%9B)Arthas%EF%BC%88%E9%98%BF%E5%B0%94%E8%90%A8%E6%96%AF%EF%BC%89class%20classloader%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>https://yuanxw.github.io/Arthas%E5%BA%94%E7%94%A8(Java)%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7(%E5%9B%9B)Arthas%EF%BC%88%E9%98%BF%E5%B0%94%E8%90%A8%E6%96%AF%EF%BC%89class%20classloader%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</id>
    <published>2023-03-03T16:00:00.000Z</published>
    <updated>2025-09-03T15:50:11.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arthas诊断工具-四-Arthas（阿尔萨斯）class-classloader相关命令"><a href="#Arthas诊断工具-四-Arthas（阿尔萨斯）class-classloader相关命令" class="headerlink" title="Arthas诊断工具(四)Arthas（阿尔萨斯）class&#x2F;classloader相关命令"></a>Arthas诊断工具(四)Arthas（阿尔萨斯）class&#x2F;classloader相关命令</h1><h2 id="1-sc命令"><a href="#1-sc命令" class="headerlink" title="1. sc命令"></a>1. <strong>sc命令</strong></h2><p>查看 JVM 已加载的类信息，</p><p>“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息，这个命令支持的参数有 <code>[d]</code>、<code>[E]</code>、<code>[f]</code> 和 <code>[x:]</code>。</p><ul><li><strong>参数说明</strong></li></ul><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td>[d]</td><td>输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的 ClassLoader 等详细信息。如果一个类被多个 ClassLoader 所加载，则会出现多次</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td>[f]</td><td>输出当前类的成员变量信息（需要配合参数-d 一起使用）</td></tr><tr><td>[x:]</td><td>指定输出静态变量时属性的遍历深度，默认为 0，即直接使用 <code>toString</code> 输出</td></tr><tr><td><code>[c:]</code></td><td>指定 class 的 ClassLoader 的 hashcode</td></tr><tr><td><code>[classLoaderClass:]</code></td><td>指定执行表达式的 ClassLoader 的 class name</td></tr><tr><td><code>[n:]</code></td><td>具有详细信息的匹配类的最大数量（默认为 100）</td></tr><tr><td><code>[cs &lt;arg&gt;]</code></td><td>指定 class 的 ClassLoader#toString() 返回值。长格式<code>[classLoaderStr &lt;arg&gt;]</code></td></tr></tbody></table><ul><li><p><strong>提示</strong></p><ol><li>class-pattern 支持全限定名，如 com.taobao.test.AAA，也支持 com&#x2F;taobao&#x2F;test&#x2F;AAA 这样的格式，这样，我们从异常堆栈里面把类名拷贝过来的时候，不需要在手动把<code>/</code>替换为<code>.</code>啦。</li><li>sc 默认开启了子类匹配功能，也就是说所有当前类的子类也会被搜索出来，想要精确的匹配，请打开<code>options disable-sub-class true</code>开关</li></ol></li><li><p><strong>使用参考</strong></p><ul><li>模糊搜索</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7339]$ sc demo.*</span><br><span class="line">demo.MathGame</span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 17 ms.</span><br></pre></td></tr></table></figure><ul><li>打印类的详细信息</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7339]$ sc -d demo.MathGame</span><br><span class="line"> class-info        demo.MathGame                                                                                                                                                                                                                                              </span><br><span class="line"> code-source       /usr/local/software/arthas/math-game.jar                                                                                                                                                                                                                   </span><br><span class="line"> name              demo.MathGame                                                                                                                                                                                                                                              </span><br><span class="line"> isInterface       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isAnnotation      <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isEnum            <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isAnonymousClass  <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isArray           <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isLocalClass      <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isMemberClass     <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isPrimitive       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isSynthetic       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> simple-name       MathGame                                                                                                                                                                                                                                                   </span><br><span class="line"> modifier          public                                                                                                                                                                                                                                                     </span><br><span class="line"> annotation                                                                                                                                                                                                                                                                   </span><br><span class="line"> interfaces                                                                                                                                                                                                                                                                   </span><br><span class="line"> super-class       +-java.lang.Object                                                                                                                                                                                                                                         </span><br><span class="line"> class-loader      +-jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c                                                                                                                                                                                                 </span><br><span class="line">                     +-jdk.internal.loader.ClassLoaders<span class="variable">$PlatformClassLoader</span>@38755edd                                                                                                                                                                                          </span><br><span class="line"> classLoaderHash   4b85612c                                                                                                                                                                                                                                                   </span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 21 ms.</span><br></pre></td></tr></table></figure><ul><li>打印出类的 Field 信息</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7339]$ sc -d -f demo.MathGame</span><br><span class="line"> class-info        demo.MathGame                                                                                                                                                                                                                                              </span><br><span class="line"> code-source       /usr/local/software/arthas/math-game.jar                                                                                                                                                                                                                   </span><br><span class="line"> name              demo.MathGame                                                                                                                                                                                                                                              </span><br><span class="line"> isInterface       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isAnnotation      <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isEnum            <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isAnonymousClass  <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isArray           <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isLocalClass      <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isMemberClass     <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isPrimitive       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isSynthetic       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> simple-name       MathGame                                                                                                                                                                                                                                                   </span><br><span class="line"> modifier          public                                                                                                                                                                                                                                                     </span><br><span class="line"> annotation                                                                                                                                                                                                                                                                   </span><br><span class="line"> interfaces                                                                                                                                                                                                                                                                   </span><br><span class="line"> super-class       +-java.lang.Object                                                                                                                                                                                                                                         </span><br><span class="line"> class-loader      +-jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c                                                                                                                                                                                                 </span><br><span class="line">                     +-jdk.internal.loader.ClassLoaders<span class="variable">$PlatformClassLoader</span>@38755edd                                                                                                                                                                                          </span><br><span class="line"> classLoaderHash   4b85612c                                                                                                                                                                                                                                                   </span><br><span class="line"> fields            name     random                                                                                                                                                                                                                                            </span><br><span class="line">                   <span class="built_in">type</span>     java.util.Random                                                                                                                                                                                                                                  </span><br><span class="line">                   modifier private,static                                                                                                                                                                                                                                    </span><br><span class="line">                   value    java.util.Random@464dde8d                                                                                                                                                                                                                         </span><br><span class="line">                                                                                                                                                                                                                                                                              </span><br><span class="line">                   name     illegalArgumentCount                                                                                                                                                                                                                              </span><br><span class="line">                   <span class="built_in">type</span>     int                                                                                                                                                                                                                                               </span><br><span class="line">                   modifier private                                                                                                                                                                                                                                           </span><br><span class="line">                                                                                                                                                                                                                                                                              </span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 23 ms.</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-sm-命令"><a href="#2-sm-命令" class="headerlink" title="2. sm 命令"></a>2. <strong>sm 命令</strong></h2><p>查看已加载类的方法信息，“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息。</p><p><code>sm</code> 命令只能看到由当前类所声明 (declaring) 的方法，父类则无法看到。</p><ul><li><strong>参数说明</strong></li></ul><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td>[d]</td><td>展示每个方法的详细信息</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[c:]</code></td><td>指定 class 的 ClassLoader 的 hashcode</td></tr><tr><td><code>[classLoaderClass:]</code></td><td>指定执行表达式的 ClassLoader 的 class name</td></tr><tr><td><code>[n:]</code></td><td>具有详细信息的匹配类的最大数量（默认为 100）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">7339</span>]$ sm java.lang.String</span><br><span class="line">java.lang.String &lt;init&gt;([B)V</span><br><span class="line">java.lang.String &lt;init&gt;([BII)V</span><br><span class="line">java.lang.String &lt;init&gt;([BLjava/nio/charset/Charset;)V</span><br><span class="line">java.lang.String &lt;init&gt;([BLjava/lang/String;)V</span><br><span class="line">java.lang.String &lt;init&gt;([BIILjava/nio/charset/Charset;)V</span><br><span class="line">java.lang.String &lt;init&gt;([CIILjava/lang/Void;)V</span><br><span class="line">java.lang.String &lt;init&gt;(Ljava/lang/AbstractStringBuilder;Ljava/lang/Void;)V</span><br><span class="line">java.lang.String &lt;init&gt;(Ljava/lang/StringBuilder;)V</span><br><span class="line">java.lang.String &lt;init&gt;(Ljava/lang/StringBuffer;)V</span><br><span class="line">java.lang.String &lt;init&gt;([BB)V</span><br><span class="line">java.lang.String &lt;init&gt;([CII)V</span><br><span class="line">java.lang.String &lt;init&gt;([C)V</span><br><span class="line">java.lang.String &lt;init&gt;(Ljava/lang/String;)V</span><br><span class="line">java.lang.String &lt;init&gt;()V</span><br><span class="line">java.lang.String &lt;init&gt;([BIILjava/lang/String;)V</span><br><span class="line">java.lang.String &lt;init&gt;([BI)V</span><br><span class="line">java.lang.String &lt;init&gt;([BIII)V</span><br><span class="line">java.lang.String &lt;init&gt;([III)V</span><br><span class="line">java.lang.String <span class="title function_">value</span><span class="params">()</span>[B</span><br><span class="line">java.lang.String <span class="title function_">equals</span><span class="params">(Ljava/lang/Object;)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">length</span><span class="params">()</span>I</span><br><span class="line">java.lang.String <span class="title function_">toString</span><span class="params">()</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">hashCode</span><span class="params">()</span>I</span><br><span class="line">java.lang.String <span class="title function_">getChars</span><span class="params">(II[CI)</span>V</span><br><span class="line">java.lang.String <span class="title function_">compareTo</span><span class="params">(Ljava/lang/String;)</span>I</span><br><span class="line">java.lang.String <span class="title function_">compareTo</span><span class="params">(Ljava/lang/Object;)</span>I</span><br><span class="line">java.lang.String <span class="title function_">indexOf</span><span class="params">(Ljava/lang/String;I)</span>I</span><br><span class="line">java.lang.String <span class="title function_">indexOf</span><span class="params">(I)</span>I</span><br><span class="line">java.lang.String <span class="title function_">indexOf</span><span class="params">([BBILjava/lang/String;I)</span>I</span><br><span class="line">java.lang.String <span class="title function_">indexOf</span><span class="params">(II)</span>I</span><br><span class="line">java.lang.String <span class="title function_">indexOf</span><span class="params">(Ljava/lang/String;)</span>I</span><br><span class="line">java.lang.String <span class="title function_">checkIndex</span><span class="params">(II)</span>V</span><br><span class="line">java.lang.String <span class="title function_">valueOf</span><span class="params">(I)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">valueOf</span><span class="params">(F)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">valueOf</span><span class="params">(Z)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">valueOf</span><span class="params">(J)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">valueOf</span><span class="params">(D)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">valueOf</span><span class="params">(Ljava/lang/Object;)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">valueOf</span><span class="params">(C)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">valueOf</span><span class="params">([C)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">valueOf</span><span class="params">([CII)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">coder</span><span class="params">()</span>B</span><br><span class="line">java.lang.String <span class="title function_">rangeCheck</span><span class="params">([CII)</span>Ljava/lang/Void;</span><br><span class="line">java.lang.String <span class="title function_">codePoints</span><span class="params">()</span>Ljava/util/stream/IntStream;</span><br><span class="line">java.lang.String <span class="title function_">isEmpty</span><span class="params">()</span>Z</span><br><span class="line">java.lang.String <span class="title function_">charAt</span><span class="params">(I)</span>C</span><br><span class="line">java.lang.String <span class="title function_">codePointAt</span><span class="params">(I)</span>I</span><br><span class="line">java.lang.String <span class="title function_">codePointBefore</span><span class="params">(I)</span>I</span><br><span class="line">java.lang.String <span class="title function_">codePointCount</span><span class="params">(II)</span>I</span><br><span class="line">java.lang.String <span class="title function_">offsetByCodePoints</span><span class="params">(II)</span>I</span><br><span class="line">java.lang.String <span class="title function_">getBytes</span><span class="params">(Ljava/nio/charset/Charset;)</span>[B</span><br><span class="line">java.lang.String <span class="title function_">getBytes</span><span class="params">(II[BI)</span>V</span><br><span class="line">java.lang.String <span class="title function_">getBytes</span><span class="params">(Ljava/lang/String;)</span>[B</span><br><span class="line">java.lang.String <span class="title function_">getBytes</span><span class="params">()</span>[B</span><br><span class="line">java.lang.String <span class="title function_">getBytes</span><span class="params">([BIB)</span>V</span><br><span class="line">java.lang.String <span class="title function_">contentEquals</span><span class="params">(Ljava/lang/StringBuffer;)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">contentEquals</span><span class="params">(Ljava/lang/CharSequence;)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">nonSyncContentEquals</span><span class="params">(Ljava/lang/AbstractStringBuilder;)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">equalsIgnoreCase</span><span class="params">(Ljava/lang/String;)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">compareToIgnoreCase</span><span class="params">(Ljava/lang/String;)</span>I</span><br><span class="line">java.lang.String <span class="title function_">regionMatches</span><span class="params">(ZILjava/lang/String;II)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">regionMatches</span><span class="params">(ILjava/lang/String;II)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">startsWith</span><span class="params">(Ljava/lang/String;)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">startsWith</span><span class="params">(Ljava/lang/String;I)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">endsWith</span><span class="params">(Ljava/lang/String;)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">lastIndexOf</span><span class="params">(I)</span>I</span><br><span class="line">java.lang.String <span class="title function_">lastIndexOf</span><span class="params">([BBILjava/lang/String;I)</span>I</span><br><span class="line">java.lang.String <span class="title function_">lastIndexOf</span><span class="params">(Ljava/lang/String;I)</span>I</span><br><span class="line">java.lang.String <span class="title function_">lastIndexOf</span><span class="params">(Ljava/lang/String;)</span>I</span><br><span class="line">java.lang.String <span class="title function_">lastIndexOf</span><span class="params">(II)</span>I</span><br><span class="line">java.lang.String <span class="title function_">substring</span><span class="params">(II)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">substring</span><span class="params">(I)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">subSequence</span><span class="params">(II)</span>Ljava/lang/CharSequence;</span><br><span class="line">java.lang.String <span class="title function_">concat</span><span class="params">(Ljava/lang/String;)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">replace</span><span class="params">(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">replace</span><span class="params">(CC)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">matches</span><span class="params">(Ljava/lang/String;)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">contains</span><span class="params">(Ljava/lang/CharSequence;)</span>Z</span><br><span class="line">java.lang.String <span class="title function_">replaceFirst</span><span class="params">(Ljava/lang/String;Ljava/lang/String;)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">replaceAll</span><span class="params">(Ljava/lang/String;Ljava/lang/String;)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">split</span><span class="params">(Ljava/lang/String;)</span>[Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">split</span><span class="params">(Ljava/lang/String;I)</span>[Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">join</span><span class="params">(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">join</span><span class="params">(Ljava/lang/CharSequence;Ljava/lang/Iterable;)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">toLowerCase</span><span class="params">()</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">toLowerCase</span><span class="params">(Ljava/util/Locale;)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">toUpperCase</span><span class="params">(Ljava/util/Locale;)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">toUpperCase</span><span class="params">()</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">trim</span><span class="params">()</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">strip</span><span class="params">()</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">stripLeading</span><span class="params">()</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">stripTrailing</span><span class="params">()</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">isBlank</span><span class="params">()</span>Z</span><br><span class="line">java.lang.String <span class="title function_">indexOfNonWhitespace</span><span class="params">()</span>I</span><br><span class="line">java.lang.String <span class="title function_">lines</span><span class="params">()</span>Ljava/util/stream/Stream;</span><br><span class="line">java.lang.String <span class="title function_">chars</span><span class="params">()</span>Ljava/util/stream/IntStream;</span><br><span class="line">java.lang.String <span class="title function_">toCharArray</span><span class="params">()</span>[C</span><br><span class="line">java.lang.String <span class="title function_">format</span><span class="params">(Ljava/lang/String;[Ljava/lang/Object;)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">format</span><span class="params">(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">copyValueOf</span><span class="params">([CII)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">copyValueOf</span><span class="params">([C)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">intern</span><span class="params">()</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">repeat</span><span class="params">(I)</span>Ljava/lang/String;</span><br><span class="line">java.lang.String <span class="title function_">isLatin1</span><span class="params">()</span>Z</span><br><span class="line">java.lang.String <span class="title function_">checkOffset</span><span class="params">(II)</span>V</span><br><span class="line">java.lang.String <span class="title function_">checkBoundsOffCount</span><span class="params">(III)</span>V</span><br><span class="line">java.lang.String <span class="title function_">checkBoundsBeginEnd</span><span class="params">(III)</span>V</span><br><span class="line">java.lang.String <span class="title function_">valueOfCodePoint</span><span class="params">(I)</span>Ljava/lang/String;</span><br><span class="line">Affect(row-cnt:<span class="number">108</span>) cost in <span class="number">29</span> ms.</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>展示每个方法的详细信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7339]$ sm -d java.lang.String toString</span><br><span class="line"> declaring-class  java.lang.String                                                                                                                                                                                                                                            </span><br><span class="line"> method-name      toString                                                                                                                                                                                                                                                    </span><br><span class="line"> modifier         public                                                                                                                                                                                                                                                      </span><br><span class="line"> annotation                                                                                                                                                                                                                                                                   </span><br><span class="line"> parameters                                                                                                                                                                                                                                                                   </span><br><span class="line"> <span class="built_in">return</span>           java.lang.String                                                                                                                                                                                                                                            </span><br><span class="line"> exceptions                                                                                                                                                                                                                                                                   </span><br><span class="line"> classLoaderHash  null                                                                                                                                                                                                                                                        </span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 14 ms.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-jad-命令"><a href="#3-jad-命令" class="headerlink" title="3. jad 命令"></a>3. <strong>jad 命令</strong></h2><p>反编译指定已加载类的源码</p><p><code>jad</code> 命令将 JVM 中实际运行的 class 的 byte code 反编译成 java 代码，便于你理解业务逻辑；如需批量下载指定包的目录的 class 字节码可以参考 <a href="https://arthas.aliyun.com/doc/dump.html"><strong>dump</strong></a>。</p><ul><li>在 Arthas Console 上，反编译出来的源码是带语法高亮的，阅读更方便</li><li>当然，反编译出来的 java 代码可能会存在语法错误，但不影响你进行阅读理解</li><li><strong>参数说明</strong></li></ul><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><code>[c:]</code></td><td>类所属 ClassLoader 的 hashcode</td></tr><tr><td><code>[classLoaderClass:]</code></td><td>指定执行表达式的 ClassLoader 的 class name</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr></tbody></table><ul><li><strong>使用参考</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">5167</span>]$ jad demo.MathGame </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的类加载器</span></span><br><span class="line">ClassLoader:                                                                                                                                                                                                                                                                  </span><br><span class="line">+-jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c                                                                                                                                                                                                                    </span><br><span class="line">  +-jdk.internal.loader.ClassLoaders$PlatformClassLoader<span class="meta">@f98fa20</span>                                                                                                                                                                                                              </span><br><span class="line"></span><br><span class="line"><span class="comment">// Main Class的位置在math-game.jar文件中</span></span><br><span class="line">Location:                                                                                                                                                                                                                                                                     </span><br><span class="line">/usr/local/software/arthas/math-game.jar                                                                                                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Decompiled with CFR.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">package</span> demo;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line">       <span class="keyword">import</span> java.util.List;</span><br><span class="line">       <span class="keyword">import</span> java.util.Random;</span><br><span class="line">       <span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathGame</span> &#123;</span><br><span class="line">           <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">           <span class="keyword">private</span> <span class="type">int</span> <span class="variable">illegalArgumentCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line">           <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">primeFactors</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line"><span class="comment">/*44*/</span>         <span class="keyword">if</span> (number &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">/*45*/</span>             ++<span class="built_in">this</span>.illegalArgumentCount;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;number is: &quot;</span> + number + <span class="string">&quot;, need &gt;= 2&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="comment">/*50*/</span>         <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">/*51*/</span>         <span class="keyword">while</span> (i &lt;= number) &#123;</span><br><span class="line"><span class="comment">/*52*/</span>             <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/*53*/</span>                 result.add(i);</span><br><span class="line"><span class="comment">/*54*/</span>                 number /= i;</span><br><span class="line"><span class="comment">/*55*/</span>                 i = <span class="number">2</span>;</span><br><span class="line">                       <span class="keyword">continue</span>;</span><br><span class="line">                   &#125;</span><br><span class="line"><span class="comment">/*57*/</span>             ++i;</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">/*61*/</span>         <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">       </span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">               <span class="type">MathGame</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MathGame</span>();</span><br><span class="line">               <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">/*16*/</span>             game.run();</span><br><span class="line"><span class="comment">/*17*/</span>             TimeUnit.SECONDS.sleep(<span class="number">1L</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       </span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/*23*/</span>             <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> random.nextInt() / <span class="number">10000</span>;</span><br><span class="line"><span class="comment">/*24*/</span>             List&lt;Integer&gt; primeFactors = <span class="built_in">this</span>.primeFactors(number);</span><br><span class="line"><span class="comment">/*25*/</span>             MathGame.print(number, primeFactors);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">/*28*/</span>             System.out.println(String.format(<span class="string">&quot;illegalArgumentCount:%3d, &quot;</span>, <span class="built_in">this</span>.illegalArgumentCount) + e.getMessage());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       </span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> number, List&lt;Integer&gt; primeFactors)</span> &#123;</span><br><span class="line">               <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(number + <span class="string">&quot;=&quot;</span>);</span><br><span class="line"><span class="comment">/*34*/</span>         <span class="keyword">for</span> (<span class="type">int</span> factor : primeFactors) &#123;</span><br><span class="line"><span class="comment">/*35*/</span>             sb.append(factor).append(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">/*37*/</span>         <span class="keyword">if</span> (sb.charAt(sb.length() - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">/*38*/</span>             sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">/*40*/</span>         System.out.println(sb);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">// 耗时1238 ms.</span></span><br><span class="line">Affect(row-cnt:<span class="number">1</span>) cost in <span class="number">1238</span> ms.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-mc命令"><a href="#4-mc命令" class="headerlink" title="4. mc命令"></a>4. mc<strong>命令</strong></h2><p>Memory Compiler&#x2F;内存编译器，编译<code>.java</code>文件生成<code>.class</code>。默认位置在arthas位置</p><p>可以通过<code>-d</code>命令指定输出目录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看Hello.java的内容</span></span><br><span class="line">[arthas@<span class="number">7339</span>]$ cat /usr/local/software/arthas/Hello.java </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用mc命令编译文件</span></span><br><span class="line">[arthas@<span class="number">7339</span>]$ mc -d /usr/local/software/arthas/output /usr/local/software/arthas/Hello.java </span><br><span class="line">Memory compiler output:</span><br><span class="line">/usr/local/software/arthas/output/Hello.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Affect</span>(row-cnt:<span class="number">1</span>) cost in <span class="number">738</span> ms.</span><br></pre></td></tr></table></figure><h2 id="5-redefine命令"><a href="#5-redefine命令" class="headerlink" title="5.redefine命令"></a>5.<strong>redefine命令</strong></h2><p>加载外部的<code>.class</code>文件，redefine jvm 已加载的类。</p><ul><li>redefine 的 class 不能修改、添加、删除类的 field 和 method，包括方法参数、方法名称及返回值</li><li>如果 mc 失败，可以在本地开发环境编译好 class 文件，上传到目标系统，使用 redefine 热加载 class</li><li>目前 redefine 和 watch&#x2F;trace&#x2F;jad&#x2F;tt 等命令冲突，以后重新实现 redefine 功能会解决此问题</li></ul><aside>💡<p>注意， redefine 后的原来的类不能恢复，redefine 有可能失败（比如增加了新的 field），参考 jdk 本身的文档。</p><p><code>reset</code>命令对<code>redefine</code>的类无效。如果想重置，需要<code>redefine</code>原始的字节码。</p><p><code>redefine</code>命令和<code>jad</code>&#x2F;<code>watch</code>&#x2F;<code>trace</code>&#x2F;<code>monitor</code>&#x2F;<code>tt</code>等命令会冲突。执行完<code>redefine</code>之后，如果再执行上面提到的命令，则会把<code>redefine</code>的字节码重置。 原因是 jdk 本身 redefine 和 Retransform 是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。</p></aside><ul><li><strong>参数说明</strong></li></ul><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td>[c:]</td><td>ClassLoader 的 hashcode</td></tr><tr><td><code>[classLoaderClass:]</code></td><td>指定执行表达式的 ClassLoader 的 class name</td></tr></tbody></table><p>案例：</p><ul><li>使用jad反编译demo.MathGame输出到&#x2F;root&#x2F;MathGame.java</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## jad 命令反编译</span></span><br><span class="line">[arthas@7339]$ jad demo.MathGame --source-only &gt; /root/MathGame.java</span><br><span class="line">redirect output file will be: /root/MathGame.java</span><br></pre></td></tr></table></figure><ul><li>打开新的窗口，使用vim 来修改源码</li></ul><p>vim &#x2F;root&#x2F;MathGame.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Decompiled with CFR.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line">       <span class="keyword">import</span> java.util.List;</span><br><span class="line">       <span class="keyword">import</span> java.util.Random;</span><br><span class="line">       <span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathGame</span> &#123;</span><br><span class="line">           <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">           <span class="keyword">private</span> <span class="type">int</span> <span class="variable">illegalArgumentCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">primeFactors</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line"><span class="comment">/*44*/</span>         <span class="keyword">if</span> (number &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">/*45*/</span>             ++<span class="built_in">this</span>.illegalArgumentCount;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;number is: &quot;</span> + number + <span class="string">&quot;, need &gt;= 2&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="comment">/*50*/</span>         <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">/*51*/</span>         <span class="keyword">while</span> (i &lt;= number) &#123;</span><br><span class="line"><span class="comment">/*52*/</span>             <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/*53*/</span>                 result.add(i);</span><br><span class="line"><span class="comment">/*54*/</span>                 number /= i;</span><br><span class="line"><span class="comment">/*55*/</span>                 i = <span class="number">2</span>;</span><br><span class="line">                       <span class="keyword">continue</span>;</span><br><span class="line">                   &#125;</span><br><span class="line"><span class="comment">/*57*/</span>             ++i;</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">/*61*/</span>         <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">               <span class="type">MathGame</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MathGame</span>();</span><br><span class="line">               <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">/*16*/</span>             game.run();</span><br><span class="line"><span class="comment">/*17*/</span>             TimeUnit.SECONDS.sleep(<span class="number">1L</span>);</span><br><span class="line">                   System.out.println(<span class="string">&quot;在main方法循环体内执行&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;在run方法中执行&quot;</span>);</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/*23*/</span>             <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> random.nextInt() / <span class="number">10000</span>;</span><br><span class="line"><span class="comment">/*24*/</span>             List&lt;Integer&gt; primeFactors = <span class="built_in">this</span>.primeFactors(number);</span><br><span class="line"><span class="comment">/*25*/</span>             MathGame.print(number, primeFactors);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">/*28*/</span>             System.out.println(String.format(<span class="string">&quot;illegalArgumentCount:%3d, &quot;</span>, <span class="built_in">this</span>.illegalArgumentCount) + e.getMessage());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> number, List&lt;Integer&gt; primeFactors)</span> &#123;</span><br><span class="line">               <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(number + <span class="string">&quot;=&quot;</span>);</span><br><span class="line"><span class="comment">/*34*/</span>         <span class="keyword">for</span> (<span class="type">int</span> factor : primeFactors) &#123;</span><br><span class="line"><span class="comment">/*35*/</span>             sb.append(factor).append(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">/*37*/</span>         <span class="keyword">if</span> (sb.charAt(sb.length() - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">/*38*/</span>             sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">/*40*/</span>         System.out.println(sb);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li>mc 命令来内存编译修改过的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">7339</span>]$ mc /root/MathGame.java -d /root</span><br><span class="line">Memory compiler output:</span><br><span class="line">/root/demo/MathGame.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Affect</span>(row-cnt:<span class="number">1</span>) cost in <span class="number">253</span> ms.</span><br></pre></td></tr></table></figure><ul><li>使用redefine命令加载新字节码文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">7339</span>]$ redefine /root/demo/MathGame.<span class="keyword">class</span> </span><br><span class="line"><span class="title class_">redefine</span> success, size: <span class="number">1</span>, classes:</span><br><span class="line">demo.MathGame</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">190754</span>=<span class="number">2</span>*<span class="number">127</span>*<span class="number">751</span></span><br><span class="line"><span class="number">160050</span>=<span class="number">2</span>*<span class="number">3</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">11</span>*<span class="number">97</span></span><br><span class="line"><span class="number">171397</span>=<span class="number">101</span>*<span class="number">1697</span></span><br><span class="line"><span class="number">69692</span>=<span class="number">2</span>*<span class="number">2</span>*<span class="number">7</span>*<span class="number">19</span>*<span class="number">131</span></span><br><span class="line">illegalArgumentCount:<span class="number">8140</span>, number is: -<span class="number">77511</span>, need &gt;= <span class="number">2</span></span><br><span class="line">illegalArgumentCount:<span class="number">8141</span>, number is: -<span class="number">126748</span>, need &gt;= <span class="number">2</span></span><br><span class="line"><span class="number">75490</span>=<span class="number">2</span>*<span class="number">5</span>*<span class="number">7549</span></span><br><span class="line">illegalArgumentCount:<span class="number">8142</span>, number is: -<span class="number">125543</span>, need &gt;= <span class="number">2</span></span><br><span class="line">illegalArgumentCount:<span class="number">8143</span>, number is: -<span class="number">125902</span>, need &gt;= <span class="number">2</span></span><br><span class="line"><span class="number">87103</span>=<span class="number">87103</span></span><br><span class="line"><span class="number">73353</span>=<span class="number">3</span>*<span class="number">7</span>*<span class="number">7</span>*<span class="number">499</span></span><br><span class="line"><span class="number">189859</span>=<span class="number">189859</span></span><br><span class="line">在run方法中执行</span><br><span class="line"><span class="number">28098</span>=<span class="number">2</span>*<span class="number">3</span>*<span class="number">3</span>*<span class="number">7</span>*<span class="number">223</span></span><br><span class="line">在run方法中执行</span><br><span class="line">illegalArgumentCount:<span class="number">8144</span>, number is: -<span class="number">45234</span>, need &gt;= <span class="number">2</span></span><br><span class="line">在run方法中执行</span><br><span class="line"><span class="number">78004</span>=<span class="number">2</span>*<span class="number">2</span>*<span class="number">19501</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/source/images/arthas/chapter4/image.png" alt="image.png"></p><h2 id="6-dump命令"><a href="#6-dump命令" class="headerlink" title="6. dump命令"></a>6. <strong>dump命令</strong></h2><p>dump 已加载类的 bytecode 到特定目录，</p><p>dump 命令将 JVM 中实际运行的 class 的 byte code dump 到指定目录，适用场景批量下载指定包目录的 class 字节码；如需反编译单一类、实时查看类信息，可参考 <a href="https://arthas.aliyun.com/doc/jad.html"><strong>jad</strong></a>。</p><ul><li><strong>参数说明</strong></li></ul><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><code>[c:]</code></td><td>类所属 ClassLoader 的 hashcode</td></tr><tr><td><code>[classLoaderClass:]</code></td><td>指定执行表达式的 ClassLoader 的 class name</td></tr><tr><td><code>[d:]</code></td><td>设置类文件的目标目录</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹</td></tr></tbody></table><p>dump java.lang.String</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ dump java.lang.String</span><br><span class="line"> HASHCODE  CLASSLOADER  LOCATION                                                                                                                                                                                                                                              </span><br><span class="line"> null                   /root/logs/arthas/classdump/java/lang/String.class                                                                                                                                                                                                    </span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 45 ms.</span><br><span class="line"></span><br><span class="line">[arthas@8161]$ dump demo.*</span><br><span class="line"> HASHCODE  CLASSLOADER                                                       LOCATION                                                                                                                                                                                         </span><br><span class="line"> 4b85612c  +-jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c        /root/logs/arthas/classdump/jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>-4b85612c/demo/MathGame.class                                                                                         </span><br><span class="line">             +-jdk.internal.loader.ClassLoaders<span class="variable">$PlatformClassLoader</span>@17bb5c0                                                                                                                                                                                                   </span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 22 ms.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-classloader命令"><a href="#7-classloader命令" class="headerlink" title="7. classloader命令"></a>7. <strong>classloader命令</strong></h2><p>查看 classloader 的继承树，urls，类加载信息</p><p><code>classloader</code> 命令将 JVM 中所有的 classloader 的信息统计出来，并可以展示继承树，urls 等。</p><p>可以让指定的 classloader 去 getResources，打印出所有查找到的 resources 的 url。对于<code>ResourceNotFoundException</code>比较有用。</p><ul><li><strong>参数说明</strong></li></ul><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td>[l]</td><td>按类加载实例进行统计</td></tr><tr><td>[t]</td><td>打印所有 ClassLoader 的继承树</td></tr><tr><td>[a]</td><td>列出所有 ClassLoader 加载的类，请谨慎使用</td></tr><tr><td><code>[c:]</code></td><td>ClassLoader 的 hashcode</td></tr><tr><td><code>[classLoaderClass:]</code></td><td>指定执行表达式的 ClassLoader 的 class name</td></tr><tr><td><code>[c: r:]</code></td><td>用 ClassLoader 去查找 resource</td></tr><tr><td><code>[c: load:]</code></td><td>用 ClassLoader 去加载指定的类</td></tr></tbody></table><ul><li><p><strong>使用参考</strong></p><ul><li><strong>按类加载类型查看统计信息</strong></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ classloader</span><br><span class="line"> name                                                  numberOfInstances  loadedCountTotal                                                                                                                                                                                    </span><br><span class="line"> com.taobao.arthas.agent.ArthasClassloader             2                  4420                                                                                                                                                                                                </span><br><span class="line"> BootstrapClassLoader                                  1                  3487                                                                                                                                                                                                </span><br><span class="line"> jdk.internal.loader.ClassLoaders<span class="variable">$PlatformClassLoader</span>  1                  60                                                                                                                                                                                                  </span><br><span class="line"> jdk.internal.reflect.DelegatingClassLoader            21                 21                                                                                                                                                                                                  </span><br><span class="line"> jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>       1                  4                                                                                                                                                                                                   </span><br><span class="line">Affect(row-cnt:5) cost <span class="keyword">in</span> 10 ms.</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>按类加载实例查看统计信息</strong></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ classloader -l</span><br><span class="line"> name                                                          loadedCount  <span class="built_in">hash</span>      parent                                                                                                                                                                                  </span><br><span class="line"> BootstrapClassLoader                                          3487         null      null                                                                                                                                                                                    </span><br><span class="line"> com.taobao.arthas.agent.ArthasClassloader@369500c6            2696         369500c6  jdk.internal.loader.ClassLoaders<span class="variable">$PlatformClassLoader</span>@17bb5c0                                                                                                                            </span><br><span class="line"> com.taobao.arthas.agent.ArthasClassloader@6489d91             1727         6489d91   jdk.internal.loader.ClassLoaders<span class="variable">$PlatformClassLoader</span>@17bb5c0                                                                                                                            </span><br><span class="line"> jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c      4            4b85612c  jdk.internal.loader.ClassLoaders<span class="variable">$PlatformClassLoader</span>@17bb5c0                                                                                                                            </span><br><span class="line"> jdk.internal.loader.ClassLoaders<span class="variable">$PlatformClassLoader</span>@17bb5c0  60           17bb5c0   null                                                                                                                                                                                    </span><br><span class="line">Affect(row-cnt:5) cost <span class="keyword">in</span> 10 ms.</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>查看 ClassLoader 的继承树</strong></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ classloader -t</span><br><span class="line">+-BootstrapClassLoader                                                                                                                                                                                                                                                        </span><br><span class="line">+-jdk.internal.loader.ClassLoaders<span class="variable">$PlatformClassLoader</span>@17bb5c0                                                                                                                                                                                                                </span><br><span class="line">  +-com.taobao.arthas.agent.ArthasClassloader@369500c6                                                                                                                                                                                                                        </span><br><span class="line">  +-com.taobao.arthas.agent.ArthasClassloader@6489d91                                                                                                                                                                                                                         </span><br><span class="line">  +-jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c                                                                                                                                                                                                                  </span><br><span class="line">Affect(row-cnt:5) cost <span class="keyword">in</span> 13 ms.</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>查看 URLClassLoader 实际的 urls</strong></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ classloader -c 369500c6</span><br><span class="line">file:/root/.arthas/lib/4.0.5/arthas/arthas-core.jar                                                                                                                                                                                                                           </span><br><span class="line">Affect(row-cnt:2) cost <span class="keyword">in</span> 1 ms.</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>使用 ClassLoader 去查找 resource</strong></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ classloader -c 369500c6  -r META-INF/MANIFEST.MF</span><br><span class="line"> jar:file:/root/.arthas/lib/4.0.5/arthas/arthas-core.jar!/META-INF/MANIFEST.MF                                                                                                                                                                                                </span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 1 ms.</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>也可以尝试查找类的 class 文件</strong></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ classloader -c 369500c6   -r java/lang/String.class</span><br><span class="line"> jrt:/java.base/java/lang/String.class                                                                                                                                                                                                                                        </span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 1 ms.</span><br></pre></td></tr></table></figure><ul><li><strong>使用 ClassLoader 去加载类</strong></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[arthas@8161]$ classloader -c 369500c6 --load java.lang.String</span><br><span class="line">load class success.</span><br><span class="line"> class-info        java.lang.String                                                                                                                                                                                                                                           </span><br><span class="line"> code-source                                                                                                                                                                                                                                                                  </span><br><span class="line"> name              java.lang.String                                                                                                                                                                                                                                           </span><br><span class="line"> isInterface       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isAnnotation      <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isEnum            <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isAnonymousClass  <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isArray           <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isLocalClass      <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isMemberClass     <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isPrimitive       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isSynthetic       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> simple-name       String                                                                                                                                                                                                                                                     </span><br><span class="line"> modifier          final,public                                                                                                                                                                                                                                               </span><br><span class="line"> annotation                                                                                                                                                                                                                                                                   </span><br><span class="line"> interfaces        java.io.Serializable,java.lang.Comparable,java.lang.CharSequence                                                                                                                                                                                           </span><br><span class="line"> super-class       +-java.lang.Object                                                                                                                                                                                                                                         </span><br><span class="line"> class-loader                                                                                                                                                                                                                                                                 </span><br><span class="line"> classLoaderHash   null  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> [arthas@8161]$ classloader -c 4b85612c --load demo.MathGame</span><br><span class="line">load class success.</span><br><span class="line"> class-info        demo.MathGame                                                                                                                                                                                                                                              </span><br><span class="line"> code-source       /usr/local/software/arthas/math-game.jar                                                                                                                                                                                                                   </span><br><span class="line"> name              demo.MathGame                                                                                                                                                                                                                                              </span><br><span class="line"> isInterface       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isAnnotation      <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isEnum            <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isAnonymousClass  <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isArray           <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isLocalClass      <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isMemberClass     <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isPrimitive       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> isSynthetic       <span class="literal">false</span>                                                                                                                                                                                                                                                      </span><br><span class="line"> simple-name       MathGame                                                                                                                                                                                                                                                   </span><br><span class="line"> modifier          public                                                                                                                                                                                                                                                     </span><br><span class="line"> annotation                                                                                                                                                                                                                                                                   </span><br><span class="line"> interfaces                                                                                                                                                                                                                                                                   </span><br><span class="line"> super-class       +-java.lang.Object                                                                                                                                                                                                                                         </span><br><span class="line"> class-loader      +-jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c                                                                                                                                                                                                 </span><br><span class="line">                     +-jdk.internal.loader.ClassLoaders<span class="variable">$PlatformClassLoader</span>@17bb5c0                                                                                                                                                                                           </span><br><span class="line"> classLoaderHash   4b85612c   </span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">查看 JVM 已加载的类信息，“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息，这个命令支持的参数有 `[d]`、`[E]`、`[f]` 和 `[x:]`</summary>
    
    
    
    <category term="Arthas" scheme="https://yuanxw.github.io/categories/Arthas/"/>
    
    
    <category term="Arthas" scheme="https://yuanxw.github.io/tags/Arthas/"/>
    
    <category term="Arthas诊断工具" scheme="https://yuanxw.github.io/tags/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Arthas诊断工具(三)Arthas（阿尔萨斯）JVM相关命令</title>
    <link href="https://yuanxw.github.io/Arthas%E5%BA%94%E7%94%A8(Java)%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7(%E4%B8%89)Arthas%EF%BC%88%E9%98%BF%E5%B0%94%E8%90%A8%E6%96%AF%EF%BC%89JVM%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>https://yuanxw.github.io/Arthas%E5%BA%94%E7%94%A8(Java)%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7(%E4%B8%89)Arthas%EF%BC%88%E9%98%BF%E5%B0%94%E8%90%A8%E6%96%AF%EF%BC%89JVM%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</id>
    <published>2023-03-02T16:00:00.000Z</published>
    <updated>2025-09-03T15:50:23.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arthas诊断工具-三-Arthas（阿尔萨斯）JVM相关命令"><a href="#Arthas诊断工具-三-Arthas（阿尔萨斯）JVM相关命令" class="headerlink" title="Arthas诊断工具(三)Arthas（阿尔萨斯）JVM相关命令"></a>Arthas诊断工具(三)Arthas（阿尔萨斯）JVM相关命令</h1><h2 id="1-jvm命令"><a href="#1-jvm命令" class="headerlink" title="1. jvm命令"></a>1. jvm<strong>命令</strong></h2><p>查看当前 JVM 信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">[arthas@5167]$ jvm</span><br><span class="line"> RUNTIME                                                                                                                                                                                                                                                                      </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MACHINE-NAME                                                                 5167@localhost.localdomain                                        </span><br><span class="line"> JVM-START-TIME                                                               2025-06-06 05:55:57                                               </span><br><span class="line"> MANAGEMENT-SPEC-VERSION                                                      2.0                                                               </span><br><span class="line"> SPEC-NAME                                                                    Java Virtual Machine Specification                                </span><br><span class="line"> SPEC-VENDOR                                                                  Oracle Corporation                                                </span><br><span class="line"> SPEC-VERSION                                                                 11                                                                </span><br><span class="line"> VM-NAME                                                                      Java HotSpot(TM) 64-Bit Server VM                                 </span><br><span class="line"> VM-VENDOR                                                                    Oracle Corporation                                                </span><br><span class="line"> VM-VERSION                                                                   11.0.16.1+1-LTS-1                                                 </span><br><span class="line"> INPUT-ARGUMENTS                                                              []                                                                </span><br><span class="line"> CLASS-PATH                                                                   math-game.jar                                                     </span><br><span class="line"> BOOT-CLASS-PATH                                                                                                                                </span><br><span class="line"> LIBRARY-PATH                                                                 /usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib            </span><br><span class="line">                                                                                                                                                </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> CLASS-LOADING                                                                                                                                  </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> LOADED-CLASS-COUNT                                                           6215                                                              </span><br><span class="line"> TOTAL-LOADED-CLASS-COUNT                                                     6272                                                              </span><br><span class="line"> UNLOADED-CLASS-COUNT                                                         57                                                                </span><br><span class="line"> IS-VERBOSE                                                                   <span class="literal">false</span>                                                             </span><br><span class="line">                                                                                                                                                </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> COMPILATION                                                                                                                                    </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> NAME                                                                         HotSpot 64-Bit Tiered Compilers                                   </span><br><span class="line"> TOTAL-COMPILE-TIME                                                           22523                                                             </span><br><span class="line"> [<span class="keyword">time</span> (ms)]                                                                                                                                    </span><br><span class="line">                                                                                                                                                </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> GARBAGE-COLLECTORS                                                                                                                             </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> G1 Young Generation                                                          name : G1 Young Generation                                        </span><br><span class="line"> [count/time (ms)]                                                            collectionCount : 7                                               </span><br><span class="line">                                                                              collectionTime : 182                                              </span><br><span class="line"> G1 Old Generation                                                            name : G1 Old Generation                                          </span><br><span class="line"> [count/time (ms)]                                                            collectionCount : 0                                               </span><br><span class="line">                                                                              collectionTime : 0                                                </span><br><span class="line">                                                                                                                                                </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MEMORY-MANAGERS                                                                                                                                </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> CodeCacheManager                                                             CodeHeap <span class="string">&#x27;non-nmethods&#x27;</span>                                           </span><br><span class="line">                                                                              CodeHeap <span class="string">&#x27;profiled nmethods&#x27;</span>                                      </span><br><span class="line">                                                                              CodeHeap <span class="string">&#x27;non-profiled nmethods&#x27;</span>                                  </span><br><span class="line"> Metaspace Manager                                                            Metaspace                                                         </span><br><span class="line">                                                                              Compressed Class Space                                            </span><br><span class="line"> G1 Young Generation                                                          G1 Eden Space                                                     </span><br><span class="line">                                                                              G1 Survivor Space                                                 </span><br><span class="line">                                                                              G1 Old Gen                                                        </span><br><span class="line"> G1 Old Generation                                                            G1 Eden Space                                                     </span><br><span class="line">                                                                              G1 Survivor Space                                                 </span><br><span class="line">                                                                              G1 Old Gen                                                        </span><br><span class="line">                                                                                                                                                </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MEMORY                                                                                                                                         </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> HEAP-MEMORY-USAGE                                                            init : 130023424(124.0 MiB)                                       </span><br><span class="line"> [memory <span class="keyword">in</span> bytes]                                                            used : 40942912(39.0 MiB)                                         </span><br><span class="line">                                                                              committed : 130023424(124.0 MiB)                                  </span><br><span class="line">                                                                              max : 2051014656(1.9 GiB)                                         </span><br><span class="line"> NO-HEAP-MEMORY-USAGE                                                         init : 7667712(7.3 MiB)                                           </span><br><span class="line"> [memory <span class="keyword">in</span> bytes]                                                            used : 60157088(57.4 MiB)                                         </span><br><span class="line">                                                                              committed : 63004672(60.1 MiB)                                    </span><br><span class="line">                                                                              max : -1(-1 B)                                                    </span><br><span class="line"> PENDING-FINALIZE-COUNT                                                       0                                                                 </span><br><span class="line">                                                                                                                                                </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> OPERATING-SYSTEM                                                                                                                               </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> OS                                                                           Linux                                                             </span><br><span class="line"> ARCH                                                                         amd64                                                             </span><br><span class="line"> PROCESSORS-COUNT                                                             4                                                                 </span><br><span class="line"> LOAD-AVERAGE                                                                 0.0                                                               </span><br><span class="line"> VERSION                                                                      3.10.0-957.el7.x86_64                                             </span><br><span class="line">                                                                                                                                                </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> THREAD                                                                                                                                         </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> COUNT                                                                        20                                                                </span><br><span class="line"> DAEMON-COUNT                                                                 19                                                                </span><br><span class="line"> PEAK-COUNT                                                                   20                                                                </span><br><span class="line"> STARTED-COUNT                                                                27                                                                </span><br><span class="line"> DEADLOCK-COUNT                                                               0                                                                 </span><br><span class="line">                                                                                                                                                </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> FILE-DESCRIPTOR                                                                                                                                </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MAX-FILE-DESCRIPTOR-COUNT                                                    -1                                                                </span><br><span class="line"> OPEN-FILE-DESCRIPTOR-COUNT                                                   -1                                                                </span><br></pre></td></tr></table></figure><ul><li><strong>THREAD 相关</strong><ul><li>COUNT: JVM 当前活跃的线程数</li><li>DAEMON-COUNT: JVM 当前活跃的守护线程数</li><li>PEAK-COUNT: 从 JVM 启动开始曾经活着的最大线程数</li><li>STARTED-COUNT: 从 JVM 启动开始总共启动过的线程次数</li><li>DEADLOCK-COUNT: JVM 当前死锁的线程数</li></ul></li><li><strong>文件描述符相关</strong><ul><li>MAX-FILE-DESCRIPTOR-COUNT：JVM 进程最大可以打开的文件描述符数</li><li>OPEN-FILE-DESCRIPTOR-COUNT：JVM 当前打开的文件描述符数</li></ul></li></ul><h2 id="2-sysprop-命令"><a href="#2-sysprop-命令" class="headerlink" title="2. sysprop 命令"></a>2. <strong>sysprop 命令</strong></h2><p>查看当前 JVM 的系统属性(<code>System Property</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">[arthas@5167]$ sysprop </span><br><span class="line"> KEY                                                   VALUE                                                                                                                                                                                                                  </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> awt.toolkit                                           sun.awt.X11.XToolkit                                                                                                                                                                                                   </span><br><span class="line"> java.specification.version                            11                                                                                                                                                                                                                     </span><br><span class="line"> sun.cpu.isalist                                                                                                                                                                                                                                                              </span><br><span class="line"> sun.jnu.encoding                                      UTF-8                                                                                                                                                                                                                  </span><br><span class="line"> java.class.path                                       math-game.jar                                                                                                                                                                                                          </span><br><span class="line"> java.vm.vendor                                        Oracle Corporation                                                                                                                                                                                                     </span><br><span class="line"> sun.arch.data.model                                   64                                                                                                                                                                                                                     </span><br><span class="line"> java.vendor.url                                       https://openjdk.java.net/                                                                                                                                                                                              </span><br><span class="line"> user.timezone                                         America/New_York                                                                                                                                                                                                       </span><br><span class="line"> os.name                                               Linux                                                                                                                                                                                                                  </span><br><span class="line"> java.vm.specification.version                         11                                                                                                                                                                                                                     </span><br><span class="line"> sun.java.launcher                                     SUN_STANDARD                                                                                                                                                                                                           </span><br><span class="line"> user.country                                          US                                                                                                                                                                                                                     </span><br><span class="line"> sun.boot.library.path                                 /usr/local/software/jdk-11.0.16.1/lib                                                                                                                                                                                  </span><br><span class="line"> sun.java.command                                      math-game.jar                                                                                                                                                                                                          </span><br><span class="line"> jdk.debug                                             release                                                                                                                                                                                                                </span><br><span class="line"> sun.cpu.endian                                        little                                                                                                                                                                                                                 </span><br><span class="line"> user.home                                             /root                                                                                                                                                                                                                  </span><br><span class="line"> user.language                                         en                                                                                                                                                                                                                     </span><br><span class="line"> java.specification.vendor                             Oracle Corporation                                                                                                                                                                                                     </span><br><span class="line"> java.version.date                                     2022-08-18                                                                                                                                                                                                             </span><br><span class="line"> java.home                                             /usr/local/software/jdk-11.0.16.1                                                                                                                                                                                      </span><br><span class="line"> file.separator                                        /                                                                                                                                                                                                                      </span><br><span class="line"> java.vm.compressedOopsMode                            32-bit                                                                                                                                                                                                                 </span><br><span class="line"> line.separator                                                                                                                                                                                                                                                               </span><br><span class="line"> java.specification.name                               Java Platform API Specification                                                                                                                                                                                        </span><br><span class="line"> java.vm.specification.vendor                          Oracle Corporation                                                                                                                                                                                                     </span><br><span class="line"> java.awt.graphicsenv                                  sun.awt.X11GraphicsEnvironment                                                                                                                                                                                         </span><br><span class="line"> sun.management.compiler                               HotSpot 64-Bit Tiered Compilers                                                                                                                                                                                        </span><br><span class="line"> java.runtime.version                                  11.0.16.1+1-LTS-1                                                                                                                                                                                                      </span><br><span class="line"> user.name                                             root                                                                                                                                                                                                                   </span><br><span class="line"> path.separator                                        :                                                                                                                                                                                                                      </span><br><span class="line"> os.version                                            3.10.0-957.el7.x86_64                                                                                                                                                                                                  </span><br><span class="line"> java.runtime.name                                     Java(TM) SE Runtime Environment                                                                                                                                                                                        </span><br><span class="line"> file.encoding                                         UTF-8                                                                                                                                                                                                                  </span><br><span class="line"> java.vm.name                                          Java HotSpot(TM) 64-Bit Server VM                                                                                                                                                                                      </span><br><span class="line"> java.vendor.version                                   18.9                                                                                                                                                                                                                   </span><br><span class="line"> java.vendor.url.bug                                   https://bugreport.java.com/bugreport/                                                                                                                                                                                  </span><br><span class="line"> java.io.tmpdir                                        /tmp                                                                                                                                                                                                                   </span><br><span class="line"> java.version                                          11.0.16.1                                                                                                                                                                                                              </span><br><span class="line"> user.dir                                              /usr/local/software/arthas                                                                                                                                                                                             </span><br><span class="line"> os.arch                                               amd64                                                                                                                                                                                                                  </span><br><span class="line"> java.vm.specification.name                            Java Virtual Machine Specification                                                                                                                                                                                     </span><br><span class="line"> java.awt.printerjob                                   sun.print.PSPrinterJob                                                                                                                                                                                                 </span><br><span class="line"> sun.os.patch.level                                    unknown                                                                                                                                                                                                                </span><br><span class="line"> java.library.path                                     /usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib                                                                                                                                                                 </span><br><span class="line"> java.vendor                                           Oracle Corporation                                                                                                                                                                                                     </span><br><span class="line"> java.vm.info                                          mixed mode                                                                                                                                                                                                             </span><br><span class="line"> java.vm.version                                       11.0.16.1+1-LTS-1                                                                                                                                                                                                      </span><br><span class="line"> sun.io.unicode.encoding                               UnicodeLittle                                                                                                                                                                                                          </span><br><span class="line"> java.class.version                                    55.0  </span><br></pre></td></tr></table></figure><ul><li>查看某一个系统属性</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[arthas@5167]$ sysprop file.encoding</span><br><span class="line"> KEY                                                   VALUE                                                                                                                                                                                                                  </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> file.encoding                                         UTF-8                                                                                                                                                                                                                  </span><br><span class="line">[arthas@5167]$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>修改某一个属性</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[arthas@5167]$ sysprop production.mode <span class="literal">true</span></span><br><span class="line">Successfully changed the system property.</span><br><span class="line"> KEY                                                   VALUE                                                                                                                                                                                                                  </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> production.mode                                       <span class="literal">true</span>                                                                                                                                                                                                                   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-sysprop-命令"><a href="#3-sysprop-命令" class="headerlink" title="3. sysprop 命令"></a>3. <strong>sysprop 命令</strong></h2><p>查看当前 JVM 的系统属性(<code>System Property</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7339]$ sysenv </span><br><span class="line"> KEY                                                   VALUE                                                                                                                                                                                                                  </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> CLASSPATH                                             .:/usr/local/software/jdk-11.0.16.1/lib/dt.jar:/usr/local/software/jdk-11.0.16.1/lib/tools.jar                                                                                                                         </span><br><span class="line"> HISTCONTROL                                           ignoredups                                                                                                                                                                                                             </span><br><span class="line"> HISTSIZE                                              1000                                                                                                                                                                                                                   </span><br><span class="line"> HOME                                                  /root                                                                                                                                                                                                                  </span><br><span class="line"> HOSTNAME                                              localhost.localdomain                                                                                                                                                                                                  </span><br><span class="line"> JAVA_HOME                                             /usr/local/software/jdk-11.0.16.1                                                                                                                                                                                      </span><br><span class="line"> LANG                                                  en_US.UTF-8                                                                                                                                                                                                            </span><br><span class="line"> LESSOPEN                                              ||/usr/bin/lesspipe.sh %s                                                                                                                                                                                              </span><br><span class="line"> LOGNAME                                               root                                                                                                                                                                                                                   </span><br><span class="line"> LS_COLORS                                             rs=0:di=01;34:<span class="built_in">ln</span>=01;36:mh=00:pi=40;33:so=01;35:<span class="keyword">do</span>=01;35:bd=40;33;01:<span class="built_in">cd</span>=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01 </span><br><span class="line">                                                       ;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:* </span><br><span class="line">                                                       .bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:* </span><br><span class="line">                                                       .cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01 </span><br><span class="line">                                                       ;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.<span class="built_in">rm</span>=01;35:*.rmvb=01;35:*.fl </span><br><span class="line">                                                       c=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mi </span><br><span class="line">                                                       d=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:                                                                          </span><br><span class="line"> MAIL                                                  /var/spool/mail/root                                                                                                                                                                                                   </span><br><span class="line"> OLDPWD                                                /usr/local/software                                                                                                                                                                                                    </span><br><span class="line"> PATH                                                  /usr/local/software/jdk-11.0.16.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin                                                                                                                      </span><br><span class="line"> PWD                                                   /usr/local/software/arthas                                                                                                                                                                                             </span><br><span class="line"> SELINUX_LEVEL_REQUESTED                                                                                                                                                                                                                                                      </span><br><span class="line"> SELINUX_ROLE_REQUESTED                                                                                                                                                                                                                                                       </span><br><span class="line"> SELINUX_USE_CURRENT_RANGE                                                                                                                                                                                                                                                    </span><br><span class="line"> SHELL                                                 /bin/bash                                                                                                                                                                                                              </span><br><span class="line"> SHLVL                                                 1                                                                                                                                                                                                                      </span><br><span class="line"> SSH_CLIENT                                            192.168.3.74 2421 22                                                                                                                                                                                                   </span><br><span class="line"> SSH_CONNECTION                                        192.168.3.74 2421 192.168.3.125 22                                                                                                                                                                                     </span><br><span class="line"> SSH_TTY                                               /dev/pts/2                                                                                                                                                                                                             </span><br><span class="line"> TERM                                                  xterm                                                                                                                                                                                                                  </span><br><span class="line"> USER                                                  root                                                                                                                                                                                                                   </span><br><span class="line"> XDG_RUNTIME_DIR                                       /run/user/0                                                                                                                                                                                                            </span><br><span class="line"> XDG_SESSION_ID                                        25                                                                                                                                                                                                                     </span><br><span class="line"> _                                                     /usr/local/software/jdk-11.0.16.1/bin/java </span><br></pre></td></tr></table></figure><ul><li><strong>查看单个环境变量</strong></li></ul><p>sysenv JAVA_HOME</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7339]$ sysenv JAVA_HOME</span><br><span class="line"> KEY                                                   VALUE                                                                                                                                                                                                                  </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> JAVA_HOME                                             /usr/local/software/jdk-11.0.16.1 </span><br></pre></td></tr></table></figure><h2 id="4-vmoption命令"><a href="#4-vmoption命令" class="headerlink" title="4. vmoption命令"></a>4. <strong>vmoption命令</strong></h2><p>查看，更新 VM 诊断相关的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7339]$ vmoption </span><br><span class="line"> KEY                                                                 VALUE                                                              ORIGIN                                                              WRITEABLE                                                         </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> HeapDumpBeforeFullGC                                                <span class="literal">false</span>                                                              DEFAULT                                                             <span class="literal">true</span>                                                              </span><br><span class="line"> HeapDumpAfterFullGC                                                 <span class="literal">false</span>                                                              DEFAULT                                                             <span class="literal">true</span>                                                              </span><br><span class="line"> HeapDumpOnOutOfMemoryError                                          <span class="literal">false</span>                                                              DEFAULT                                                             <span class="literal">true</span>                                                              </span><br><span class="line"> HeapDumpPath                                                                                                                           DEFAULT                                                             <span class="literal">true</span>                                                              </span><br><span class="line"> PrintClassHistogram                                                 <span class="literal">false</span>                                                              DEFAULT                                                             <span class="literal">true</span>                                                              </span><br><span class="line"> MinHeapFreeRatio                                                    40                                                                 DEFAULT                                                             <span class="literal">true</span>                                                              </span><br><span class="line"> MaxHeapFreeRatio                                                    70                                                                 DEFAULT                                                             <span class="literal">true</span>                                                              </span><br><span class="line"> PrintConcurrentLocks                                                <span class="literal">false</span>                                                              DEFAULT                                                             <span class="literal">true</span>                                                              </span><br><span class="line"> CMSAbortablePrecleanWaitMillis                                      100                                                                DEFAULT                                                             <span class="literal">true</span>                                                              </span><br><span class="line"> CMSWaitDuration                                                     2000                                                               DEFAULT                                                             <span class="literal">true</span>                                                              </span><br><span class="line"> CMSTriggerInterval                                                  -1                                                                 DEFAULT                                                             <span class="literal">true</span>                                                              </span><br></pre></td></tr></table></figure><ul><li><strong>更新指定的 option</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7339]$ vmoption HeapDumpBeforeFullGC <span class="literal">true</span></span><br><span class="line">Successfully updated the vm option.</span><br><span class="line"> NAME                  BEFORE-VALUE  AFTER-VALUE                                                                                                                                                                                                                              </span><br><span class="line">-------------------------------------------------                                                                                                                                                                                                                             </span><br><span class="line"> HeapDumpBeforeFullGC  <span class="literal">false</span>         <span class="literal">true</span>   </span><br></pre></td></tr></table></figure><h2 id="5-getstatic-命令"><a href="#5-getstatic-命令" class="headerlink" title="5. getstatic 命令"></a>5. getstatic <strong>命令</strong></h2><p>通过 getstatic 命令可以方便的查看类的静态属性。使用方法为<code>getstatic class_name field_name</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[arthas@7339]$ getstatic demo.MathGame random</span><br><span class="line">field: random</span><br><span class="line">@Random[</span><br><span class="line">    serialVersionUID=@Long[3905348978240129619],</span><br><span class="line">    seed=@AtomicLong[279863952692122],</span><br><span class="line">    multiplier=@Long[25214903917],</span><br><span class="line">    addend=@Long[11],</span><br><span class="line">    mask=@Long[281474976710655],</span><br><span class="line">    DOUBLE_UNIT=@Double[1.1102230246251565E-16],</span><br><span class="line">    BadBound=@String[bound must be positive],</span><br><span class="line">    BadRange=@String[bound must be greater than origin],</span><br><span class="line">    BadSize=@String[size must be non-negative],</span><br><span class="line">    seedUniquifier=@AtomicLong[-2942033378085796212],</span><br><span class="line">    nextNextGaussian=@Double[0.0],</span><br><span class="line">    haveNextNextGaussian=@Boolean[<span class="literal">false</span>],</span><br><span class="line">    serialPersistentFields=@ObjectStreamField[][isEmpty=<span class="literal">false</span>;size=3],</span><br><span class="line">    unsafe=@Unsafe[jdk.internal.misc.Unsafe@1004ff20],</span><br><span class="line">    seedOffset=@Long[24],</span><br><span class="line">]</span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 29 ms.</span><br></pre></td></tr></table></figure><h2 id="6-ognl命令"><a href="#6-ognl命令" class="headerlink" title="6. ognl命令"></a>6. ognl<strong>命令</strong></h2><p>执行 ognl 表达式，从 3.0.5 版本增加</p><ul><li><strong>参数说明</strong></li></ul><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>express</em></td><td>执行的表达式</td></tr><tr><td><code>[c:]</code></td><td>执行表达式的 ClassLoader 的 hashcode，默认值是 SystemClassLoader</td></tr><tr><td><code>[classLoaderClass:]</code></td><td>指定执行表达式的 ClassLoader 的 class name</td></tr><tr><td>[x]</td><td>结果对象的展开层次，默认值 1</td></tr></tbody></table><ul><li><strong>使用参考</strong></li><li>OGNL 特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71"><strong>https://github.com/alibaba/arthas/issues/71</strong></a></li><li>OGNL 表达式官方指南：<a href="https://commons.apache.org/dormant/commons-ognl/language-guide.html"><strong>https://commons.apache.org/dormant/commons-ognl/language-guide.html</strong></a></li></ul><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## java.lang.System.out.printlnn(&quot;hello&quot;) 方法没有返回值</span></span><br><span class="line">[arthas@7339]$ ognl <span class="string">&#x27;@java.lang.System@out.println(&quot;hello&quot;)&#x27;</span></span><br><span class="line">null</span><br><span class="line"></span><br><span class="line"><span class="comment">## java.lang.System.currentTimeMillis()返回值为Long类型</span></span><br><span class="line">[arthas@7339]$ ognl <span class="string">&#x27;@java.lang.System@currentTimeMillis()&#x27;</span></span><br><span class="line">@Long[1749270125080]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取静态变量属性</span></span><br><span class="line">[arthas@7339]$ ognl <span class="string">&#x27;@demo.MathGame@random&#x27;</span></span><br><span class="line">@Random[</span><br><span class="line">    serialVersionUID=@Long[3905348978240129619],</span><br><span class="line">    seed=@AtomicLong[66121191540312],</span><br><span class="line">    multiplier=@Long[25214903917],</span><br><span class="line">    addend=@Long[11],</span><br><span class="line">    mask=@Long[281474976710655],</span><br><span class="line">    DOUBLE_UNIT=@Double[1.1102230246251565E-16],</span><br><span class="line">    BadBound=@String[bound must be positive],</span><br><span class="line">    BadRange=@String[bound must be greater than origin],</span><br><span class="line">    BadSize=@String[size must be non-negative],</span><br><span class="line">    seedUniquifier=@AtomicLong[-2942033378085796212],</span><br><span class="line">    nextNextGaussian=@Double[0.0],</span><br><span class="line">    haveNextNextGaussian=@Boolean[<span class="literal">false</span>],</span><br><span class="line">    serialPersistentFields=@ObjectStreamField[][isEmpty=<span class="literal">false</span>;size=3],</span><br><span class="line">    unsafe=@Unsafe[jdk.internal.misc.Unsafe@1004ff20],</span><br><span class="line">    seedOffset=@Long[24],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取JVM环境变量中的属性值，把获取到的结果，分别赋值给value1,value2。最后再将value1&amp;value2的值放入ArrayList集中，最后打印ArrayList结果。</span></span><br><span class="line">[arthas@7339]$ ognl <span class="string">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span><br><span class="line">@ArrayList[</span><br><span class="line">    @String[/usr/local/software/jdk-11.0.16.1],</span><br><span class="line">    @String[Java(TM) SE Runtime Environment],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">查看当前 JVM 信息</summary>
    
    
    
    <category term="Arthas" scheme="https://yuanxw.github.io/categories/Arthas/"/>
    
    
    <category term="Arthas" scheme="https://yuanxw.github.io/tags/Arthas/"/>
    
    <category term="Arthas诊断工具" scheme="https://yuanxw.github.io/tags/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
